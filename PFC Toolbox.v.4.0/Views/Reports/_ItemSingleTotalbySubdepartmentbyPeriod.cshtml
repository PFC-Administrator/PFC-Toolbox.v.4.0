@{
    ViewBag.Title = "Item Single Total by Subdepartment by Period";
    Layout = "~/Views/Shared/_Layout.cshtml";

    @model List<PFC_Toolbox.v._4._0.Models.ItemSingleTotalbySubdepartmentbyPeriodModel>

    var startDate = Request["startDate"];
    var endDate = Request["endDate"];
    var startDate2 = Request["startDate2"];
    var endDate2 = Request["endDate2"];
    var startDate3 = Request["startDate3"];
    var endDate3 = Request["endDate3"];
    var subdepartmentCode = ViewBag.SdpCode;
    var subdepartmentDescription = ViewBag.SdpDesc;
}

<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css" />
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/1.5.4/css/buttons.dataTables.min.css" />
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/select/1.2.7/css/select.dataTables.min.css" />
<link rel="stylesheet" type="text/css" href="https://editor.datatables.net/extensions/Editor/css/editor.dataTables.min.css" />
<link rel="stylesheet" type="text/css" href="~/Content/Custom.css" />

<h1 style="float:right;"><img src="~/Content/PFC_Logo_128px.png" width="100" height="100">@(ViewBag.Store)</h1>
<h2 style="float:left;">Item Single Total by Subdepartment by Period</h2>
<hr style="clear:both" />
@if (subdepartmentCode.Equals("0"))
{<h3>@subdepartmentDescription</h3>}
else
{<h3>@subdepartmentCode - @subdepartmentDescription</h3>}

<br />

<div>
    <fieldset title="Item Results">
        <table id="results" class="display text-nowrap compact" style="width:100%">
            
            <thead>
                <tr>
                    <th colspan="6" style="border-bottom:none"></th>
                    <th colspan="3" class="text-center">Period 1</th>
                    <th style="border-bottom:none"></th>
                    <th colspan="3" class="text-center">Period 2</th>
                    <th style="border-bottom:none"></th>
                    <th colspan="3" class="text-center">Period 3</th>
                </tr>
                <tr>
                    <th>Item Code</th>
                    <th>Subdepartment</th>
                    <th>Brand</th>
                    <th>Description</th>
                    <th>Size</th>
                    <th></th>
                    <th>Weight</th>
                    <th>Total Sales</th>
                    <th>Units</th>
                    <th></th>
                    <th>Weight</th>
                    <th>Total Sales</th>
                    <th>Units</th>
                    <th></th>
                    <th>Weight</th>
                    <th>Total Sales</th>
                    <th>Units</th>
                    <th></th>
                    <th>Trend</th>
                </tr>
            </thead>
            <tbody>
                @{
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.ItemCode)</td>
                            <td>@Html.DisplayFor(modelItem => item.Subdept)</td>
                            <td>@Html.DisplayFor(modelItem => item.ItemBrand)</td>
                            <td>@Html.DisplayFor(modelItem => item.ItemDescription)</td>
                            <td>@Html.DisplayFor(modelItem => item.ItemSize)</td>
                            <td></td>
                            <td>@Html.DisplayFor(modelItem => item.SalesWeight)</td>
                            <td>@Html.DisplayFor(modelItem => item.SalesTotal)</td>
                            <td>@Html.DisplayFor(modelItem => item.SalesQuantity)</td>
                            <td></td>
                            <td>@Html.DisplayFor(modelItem => item.SalesWeight2)</td>
                            <td>@Html.DisplayFor(modelItem => item.SalesTotal2)</td>
                            <td>@Html.DisplayFor(modelItem => item.SalesQuantity2)</td>
                            <td></td>
                            <td>@Html.DisplayFor(modelItem => item.SalesWeight3)</td>
                            <td>@Html.DisplayFor(modelItem => item.SalesTotal3)</td>
                            <td>@Html.DisplayFor(modelItem => item.SalesQuantity3)</td>
                            <td></td>
                            <td>@Html.DisplayFor(modelItem => item.SalesTrend)</td>
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr>
                    <th style="text-align:center">Total:</th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
            </tfoot>
        </table>
    </fieldset>
</div>

<br />
<br />

<div class="row">
    <div class="col-lg-3" style="width:33%;">
        <h3 class="text-center">@startDate &nbsp;&nbsp; to &nbsp;&nbsp; @endDate</h3>
        <hr id="hrJumbotron" />
        <fieldset title="Report Totals">
            <table id="report totals" class="display text-nowrap" style="width:100%;table-layout:fixed">
                <thead>
                    <tr>
                        <th class="text-center">Total Weight</th>
                        <th class="text-center">Total Sales</th>
                        <th class="text-center">Total Units</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td align="center">@String.Format("{0}", ViewBag.TotalWeight)</td>
                        <td align="center">@String.Format("{0:C}", ViewBag.TotalSales)</td>
                        <td align="center">@String.Format("{0}", ViewBag.TotalUnits)</td>
                    </tr>
                </tbody>
            </table>
        </fieldset>
    </div>
    <div class="col-lg-3" style="width: 33%;">
        <h3 class="text-center">@startDate2 &nbsp;&nbsp; to &nbsp;&nbsp; @endDate2</h3>
        <hr id="hrJumbotron" />
        <fieldset title="Report Totals">
            <table id="report totals" class="display text-nowrap" style="width:100%;table-layout:fixed">
                <thead>
                    <tr>
                        <th class="text-center">Total Weight</th>
                        <th class="text-center">Total Sales</th>
                        <th class="text-center">Total Units</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td align="center">@String.Format("{0}", ViewBag.TotalWeight2)</td>
                        <td align="center">@String.Format("{0:C}", ViewBag.TotalSales2)</td>
                        <td align="center">@String.Format("{0}", ViewBag.TotalUnits2)</td>
                    </tr>
                </tbody>
            </table>
        </fieldset>
    </div>
    <div class="col-lg-3" style="width:33%;">
        <h3 class="text-center">@startDate3 &nbsp;&nbsp; to &nbsp;&nbsp; @endDate3</h3>
        <hr id="hrJumbotron" />
        <fieldset title="Report Totals">
            <table id="report totals" class="display text-nowrap" style="width:100%;table-layout:fixed">
                <thead>
                    <tr>
                        <th class="text-center">Total Weight</th>
                        <th class="text-center">Total Sales</th>
                        <th class="text-center">Total Units</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td align="center">@String.Format("{0}", ViewBag.TotalWeight3)</td>
                        <td align="center">@String.Format("{0:C}", ViewBag.TotalSales3)</td>
                        <td align="center">@String.Format("{0}", ViewBag.TotalUnits3)</td>
                    </tr>
                </tbody>
            </table>
        </fieldset>
    </div>
</div>

@section scripts{
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.4/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.flash.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.html5.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.print.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/select/1.2.7/js/dataTables.select.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/responsive/1.0.7/js/dataTables.responsive.min.js"></script>
    <script src="~/Content/Editor-1.8.1/js/dataTables.editor.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/plug-ins/1.10.19/sorting/datetime-moment.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            table = $('#results').DataTable({
                columnDefs: [
                    { orderable: false, targets: [5, 9, 13, 17] },
                ],
                // Default table lengths
                lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
                dom: '<"floatRight"B><"clear">lfrtip',
                columns: [
                    {
                        data: "ItemCode", render: function (data, type, row) {
                            return type === 'export' ?
                                parseInt(data, 10) :
                                data;
                        }
                    },
                    { data: "Subdepartment" },
                    { data: "Brand" },
                    { data: "Description" },
                    { data: "Size" },
                    { width: "2%" },
                    { data: "SalesWeight" },
                    { data: "SalesQuantity" },
                    { data: "SalesAmount" },
                    { width: "2%" },
                    { data: "SalesWeight2" },
                    { data: "SalesQuantity2" },
                    { data: "SalesAmount2" },
                    { width: "2%" },
                    { data: "SalesWeight3" },
                    { data: "SalesQuantity3" },
                    { data: "SalesAmount#" },
                    { width: "2%" },
                    { data: "SalesTrend" }
                ],
                buttons: [{
                    extend: 'collection',
                    text: 'Export',
                    autoClose: true,
                    buttons: [
                        {
                            extend: 'copy',
                            filename: 'ISTBPSubdepartment-"@startDate"-"@endDate"',
                            footer: true,
                            exportOptions: {
                                columns: [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18]
                            }
                        },
                        {
                            extend: 'excelHtml5',
                            filename: 'ISTBPSubdepartment-"@startDate"-"@endDate"',
                            footer: true,
                            title: '',
                            exportOptions: {
                                rows: ':visible',
                                orthogonal: 'export'
                            },
                            customize: function (xlsx) {
                                var sheet = xlsx.xl.worksheets['sheet1.xml'];
                                var sheetStyle = xlsx.xl['styles.xml'];
                                var rowsDisplayed = table.page.info().length;
                                var rowsReturned = table.rows().count();
                                var clR = $('row', sheet);
                                var lastXfIndex = $('cellXfs xf', sheetStyle).length - 1;
                                var lastFontIndex = $('fonts font', sheetStyle).length - 1;
                                var lastBorderIndex = $('borders border', sheetStyle).length - 1;

                                // Determines how to calculate how many rows are displayed
                                var rows = 0;
                                if (rowsDisplayed == -1) {
                                    rows = rowsReturned;
                                }
                                else if (rowsDisplayed < rowsReturned) {
                                    rows = rowsDisplayed;
                                }
                                else {
                                    rows = rowsReturned;
                                }

                                // Fonts
                                var f12 = '<font><sz val="12" /><name val="Calibri" /></font>';
                                var f14 = '<font><sz val="14" /><name val="Calibri" /></font>';
                                var f18 = '<font><sz val="18" /><name val="Calibri" /></font>';

                                // Borders
                                var bb = '<border><left/><right/><top/><bottom style="thin"><color indexed="64"/></bottom><diagonal/></border>';
                                var tb = '<border><left/><right/><top style="thin"><color indexed="64"/></top><bottom/><diagonal/></border>';

                                // Number formats
                                var nf$ = '<numFmt numFmtId="164" formatCode="_(&quot;$&quot;* #,##0.00_);_(&quot;$&quot;* \[Red](#,##0.00\);_(&quot;$&quot;* &quot;-&quot;??_);"/>';
                                var nfperc = '<numFmt numFmtId="167" formatCode="#,##0.0%;[Red](#,##0.0%);"/>';
                                var nfUPC = '<numFmt numFmtId="172" formatCode="0000000000000"/>';

                                // Styles
                                var xfFont12 = '<xf numFmtId="0" fontId="' + (lastFontIndex + 1) + '" fillId="0" borderId="0" applyFont="1" applyFill = "1" applyBorder = "1" xfId = "0" applyAlignment = "1"/>';
                                var xfFont14 = '<xf numFmtId="0" fontId="' + (lastFontIndex + 2) + '" fillId="0" borderId="0" applyFont="1" applyFill = "1" applyBorder = "1" xfId = "0" applyAlignment = "1"/>';
                                var xfFont18 = '<xf numFmtId="0" fontId="' + (lastFontIndex + 3) + '" fillId="0" borderId="0" applyFont="1" applyFill = "1" applyBorder = "1" xfId = "0" applyAlignment = "1"/>';
                                var xfbB = '<xf numFmtId="0" fontId="0" fillId="0" borderId="' + (lastBorderIndex + 1) + '" xfId="0" applyBorder="1"/>';
                                var xftB = '<xf numFmtId="0" fontId="0" fillId="0" borderId="' + (lastBorderIndex + 2) + '" xfId="0" applyBorder="1"/>';
                                var xftB$ = '<xf numFmtId="164" fontId="0" fillId="0" borderId="' + (lastBorderIndex + 2) + '" xfId="0" applyBorder="1"/>';
                                var xftBPerc = '<xf numFmtId="167" fontId="0" fillId="0" borderId="' + (lastBorderIndex + 2) + '" xfId="0" applyBorder="1"/>';
                                var xfPerc = '<xf numFmtId="167" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>';
                                var xfUPC = '<xf numFmtId="172" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>';

                                // Adding the styles
                                sheetStyle.childNodes[0].childNodes[0].innerHTML += nf$ + nfperc + nfUPC;
                                sheetStyle.childNodes[0].childNodes[1].innerHTML += f12 + f14 + f18;
                                sheetStyle.childNodes[0].childNodes[3].innerHTML += bb + tb;
                                sheetStyle.childNodes[0].childNodes[5].innerHTML += xfFont12 + xfFont14 + xfFont18 + xfbB + xftB + xftB$ + xftBPerc + xfPerc + xfUPC;

                                // Creating variables withe the styles assigned to them
                                var font12 = lastXfIndex + 1;
                                var font14 = lastXfIndex + 2;
                                var font18 = lastXfIndex + 3;
                                var bottomBorder = lastXfIndex + 4;
                                var topBorder = lastXfIndex + 5;
                                var topBorder$ = lastXfIndex + 6;
                                var topBorderPerc = lastXfIndex + 7;
                                var negativePercent = lastXfIndex + 8;
                                var UPC = lastXfIndex + 9;

                                // Updating font sizes, so they're not overwritten
                                var tagName = sheetStyle.getElementsByTagName('sz');
                                tagName[5].setAttribute("val", "12");
                                tagName[6].setAttribute("val", "14");
                                tagName[7].setAttribute("val", "18");

                                // Number of header rows to add
                                var numrows = 6;
                                var clR = $('row', sheet);
                                clR.each(function () {
                                    var attr = $(this).attr('r');
                                    var ind = parseInt(attr);
                                    ind = ind + numrows;
                                    $(this).attr("r", ind);
                                });

                                // Create row before data
                                $('row c ', sheet).each(function () {
                                    var attr = $(this).attr('r');
                                    var pre = attr.substring(0, 1);
                                    var ind = parseInt(attr.substring(1, attr.length));
                                    ind = ind + numrows;
                                    $(this).attr("r", pre + ind);
                                });

                                // Add header rows
                                function Addrow(index, data) {
                                    var msg = '<row r="' + index + '">'
                                    for (var i = 0; i < data.length; i++) {
                                        var key = data[i].key;
                                        var value = data[i].value;
                                        msg += '<c t="inlineStr" r="' + key + index + '">';
                                        msg += '<is>';
                                        msg += '<t>' + value + '</t>';
                                        msg += '</is>';
                                        msg += '</c>';
                                    }
                                    msg += '</row>';
                                    return msg;
                                }

                                // Footer rows
                                var footerColumns = ['B', 'C', 'D', 'E', 'F', 'J', 'N', 'R', 'S', 'T'];
                                var footer = '<row r="' + (rows + (numrows + 2)) + '">';
                                for (var i = 0; i < footerColumns.length; i++) {
                                    footer += '<c r="' + footerColumns[i] + (rows + (numrows + 2)) + '" s="2"><v></v></c>';
                                }
                                footer += '</row>';

                                // Insert header rows
                                var r1 = Addrow(1, [{ key: 'A', value: 'Item Single Total by Sub-department by Period: @(ViewBag.Store)' }]);
                                var r2 = Addrow(2, [{ key: 'A', value: '@subdepartmentCode - @subdepartmentDescription' }]);
                                var r3 = Addrow(3, [{ key: 'A', value: 'Period 1: @startDate   to   @endDate' }]);
                                var r4 = Addrow(4, [{ key: 'A', value: 'Period 2: @startDate2   to   @endDate2' }]);
                                var r5 = Addrow(5, [{ key: 'A', value: 'Period 3: @startDate3   to   @endDate3' }]);
                                var r6 = Addrow(6, [{ key: 'H', value: 'Period 1' }]);
                                var r7 = Addrow(6, [{ key: 'L', value: 'Period 2' }]);
                                var r8 = Addrow(6, [{ key: 'P', value: 'Period 3' }]);
                                var r9 = Addrow(7, [{ key: 'F', value: '' }]);
                                var r10 = Addrow(7, [{ key: 'J', value: '' }]);
                                var r11 = Addrow(7, [{ key: 'N', value: '' }]);
                                var r12 = Addrow(7, [{ key: 'R', value: '' }]);
                                var r13 = Addrow(7, [{ key: 'T', value: '' }]);

                                // Add to sheet
                                sheet.childNodes[0].childNodes[1].innerHTML = r1 + r2 + r3 + r4 + r5 + r6 + r7 + r8 + r9 + r10 + r11 + r12 + r13 + sheet.childNodes[0].childNodes[1].innerHTML + footer;

                                // Styles report information
                                $('row c[r="A1"]', sheet).attr('s', font18);
                                $('row c[r="A2"]', sheet).attr('s', font14);
                                $('row c[r="A3"]', sheet).attr('s', font12);
                                $('row c[r="A4"]', sheet).attr('s', font12);
                                $('row c[r="A5"]', sheet).attr('s', font12);

                                // Applies the bottom and top borders to the header and footer rows
                                var headerColumns = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T'];
                                for (var i = 0; i < headerColumns.length; i++) {
                                    $('row c[r="' + headerColumns[i] + (numrows + 1) + '"]', sheet).attr('s', bottomBorder);
                                    $('row c[r="' + headerColumns[i] + (rows + (numrows + 2)) + '"]', sheet).attr('s', topBorder);
                                }

                                // Format UPC column
                                var upcColumns = ['A'];
                                for (var i = 0; i < upcColumns.length; i++) {
                                    // Loop over the cells in the upcColumns array
                                    $('row c[r^="' + upcColumns[i] + '"]', sheet).each(function () {
                                        // If value is a number, apply UPC format
                                        if (!isNaN($('is t', this).prevObject[0].textContent)) {
                                            $(this).attr('s', UPC);
                                        }
                                    });
                                }

                                // Format percent columns
                                var percentColumns = ['S'];
                                for (var i = 0; i < percentColumns.length; i++) {
                                    // Loop over the cells in column `C`
                                    $('row c[r^="' + percentColumns[i] + '"]', sheet).each(function () {
                                        // Get the value
                                        if ($('is t', this).prevObject[0].textContent < 0) {
                                            $(this).attr('s', negativePercent);
                                        }
                                    });
                                }

                                // Format $ footer
                                var $footers = ['H', 'L', 'P'];
                                for (var i = 0; i < $footers.length; i++) {
                                    $('row c[r="' + $footers[i] + (rows + (numrows + 2)) + '"]', sheet).attr('s', topBorder$);
                                }

                                // Format column widths on first column
                                var col = $('col', sheet);
                                $(col[0]).attr('width', 15);
                            }
                        },
                        {
                            extend: 'csv',
                            filename: 'ISTBPSubdepartment-"@startDate"-"@endDate"',
                            exportOptions: {
                                columns: [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18]
                            }
                        }
                    ]
                }],

                // Footer Totals
                "footerCallback": function (row, data, start, end, display) {

                    var api = this.api(), data;

                    // Remove the formatting to get integer data for summation
                    var intVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[)\$,]/g, '').replace(/[(]/g, '-') * 1 :
                            typeof i === 'number' ?
                                i : 0;
                    };

                    // Remove formatting to get float data for summation
                    var decVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[)\$,]/g, '').replace(/[(]/g, '-') :
                            typeof i === 'number' ?
                                i : 0;
                    };

                /********************************************************************/

                    // Sum weight column
                    pageTotalWeight = api
                        .column(6, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    // Update footer
                    $(api.column(6).footer()).html(pageTotalWeight.toFixed(3));

                    // Sum quantity column
                    pageTotalUnits = api
                        .column(8, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    // Update footer
                    $(api.column(8).footer()).html(pageTotalUnits.toFixed(2));

                    // Sum sales column
                    pageTotalSales = api
                        .column(7, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    // Update footer
                    $(api.column(7).footer()).html('$' + pageTotalSales.toFixed(2));

                    /********************************************************************/

                    // Sum weight column
                    pageTotalWeight = api
                        .column(10, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    // Update footer
                    $(api.column(10).footer()).html(pageTotalWeight.toFixed(3));

                    // Sum quantity column
                    pageTotalUnits = api
                        .column(12, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    // Update footer
                    $(api.column(12).footer()).html(pageTotalUnits.toFixed(2));

                    // Sum sales column
                    pageTotalSales = api
                        .column(11, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    // Update footer
                    $(api.column(11).footer()).html('$' + pageTotalSales.toFixed(2));

                /********************************************************************/

                    // Sum weight column
                    pageTotalWeight = api
                        .column(14, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    // Update footer
                    $(api.column(14).footer()).html(pageTotalWeight.toFixed(3));

                    // Sum quantity column
                    pageTotalUnits = api
                        .column(16, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    // Update footer
                    $(api.column(16).footer()).html(pageTotalUnits.toFixed(2));

                    // Sum sales column
                    pageTotalSales = api
                        .column(15, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    // Update footer
                    $(api.column(15).footer()).html('$' + pageTotalSales.toFixed(2));
                }
            });
        });
    </script>
}