@{
    ViewBag.Title = "Purchases";
    var CreatedBy = Request["CreatedBy"];
}

<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />

    <title>@ViewBag.Title</title>

    <link rel="stylesheet" type="text/css" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/1.6.1/css/buttons.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/select/1.3.1/css/select.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://editor.datatables.net/extensions/Editor/css/editor.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/Custom.css" />
</head>
<body class="dataTables">
    <div class="container">
        <button name="add" id="addanewinvoice" class="btn btn-default" style="float:right;">Help</button>
        <h1 style="float:left;"><img src="~/Content/PFC_Logo_128px.png" width="100" height="100">        @ViewBag.Title</h1>
        @*<h1><img src="~/Content/PFC_Logo_128px.png" width="100" height="100">        @ViewBag.Title</h1>*@
        <br />
        <table id="Purchases" class="display text-nowrap compact" style="width:100%">
            <thead>
                <tr>
                    <th>Invoice</th>
                    <th>Date</th>
                    <th>Vendor</th>
                    <th>Amount</th>
                    <th>Subdepartment</th>
                    <th>Location</th>
                    <th>Reconciled</th>
                    <th>Notes</th>
                    <th>Created By</th>
                    <th>Date Created</th>
                </tr>
            </thead>
        </table>
    </div>
</body>
</html>

@section scripts{
    <script type="text/javascript" charset="utf-8" src="https://code.jquery.com/jquery-3.3.1.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.10/lodash.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.6.1/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.flash.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.html5.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.print.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/select/1.3.1/js/dataTables.select.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/responsive/1.0.7/js/dataTables.responsive.min.js"></script>
    <script src="~/Content/Editor-1.8.1/js/dataTables.editor.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/plug-ins/1.10.19/sorting/datetime-moment.js"></script>

    <script>

        var currentUser = "@CreatedBy";
        var lastNIRetrieved, newInvoice;
        var editor;
        $(document).ready(function () {

            // New Purchase Form: disable autocomplete on fields.
            $.extend(true, $.fn.dataTable.Editor.Field.defaults, {
                attr: {
                    autocomplete: 'off'
                }
            });

            // New Purchase Form: fit form to window size.
            $.extend($.fn.dataTable.Editor.display.lightbox.conf, {
                windowPadding: 66
            });

            // New Purchase Form: moment data foramtter.
            $.fn.dataTable.moment('M/D/YYYY h:mm:ss A');

            // New Purchase Form
            editor = new $.fn.dataTable.Editor({
                ajax: '/api/Purchases',
                table: '#Purchases',
                fields: [
                    {
                        label: "Invoice:",
                        name: "Purchases.invoicenumber"
                    },
                    {
                        label: "Date:",
                        name: "Purchases.purchasedate",
                        type: "datetime",
                        format: 'M/D/YYYY',
                        def: function () { return new Date(); }
                    },
                    {
                        label: "Vendor:",
                        name: "Purchases.vendorID",
                        type: "select",
                        placeholder: "Select a vendor"
                    },
                    {
                        label: "Amount:",
                        name: "Purchases.purchaseamount",
                        id: "addAmount"
                    },
                    {
                        label: "Subdepartment:",
                        name: "Purchases.subdepartmentID",
                        type: "select",
                        placeholder: "Select a subdepartment"
                    },
                    {
                        label: "Amount:",
                        name: "Purchases.purchaseamount2",
                        id: "purchaseamount2"
                    },
                    {
                        label: "Subdepartment:",
                        name: "Purchases.subdepartmentID2",
                        type: "select",
                        placeholder: "Select a subdepartment",
                        id: "subdepartmentID2"
                    },
                    {
                        label: "Amount:",
                        name: "Purchases.purchaseamount3",
                        id: "purchaseamount3"
                    },
                    {
                        label: "Subdepartment:",
                        name: "Purchases.subdepartmentID3",
                        type: "select",
                        placeholder: "Select a subdepartment",
                        id: "subdepartmentID3"
                    },
                    {
                        label: "Amount:",
                        name: "Purchases.purchaseamount4",
                        id: "purchaseamount4"
                    },
                    {
                        label: "Subdepartment:",
                        name: "Purchases.subdepartmentID4",
                        type: "select",
                        placeholder: "Select a subdepartment",
                        id: "subdepartmentID4"
                    },
                    {
                        label: "Amount:",
                        name: "Purchases.purchaseamount5",
                        id: "purchaseamount5"
                    },
                    {
                        label: "Subdepartment:",
                        name: "Purchases.subdepartmentID5",
                        type: "select",
                        placeholder: "Select a subdepartment",
                        id: "subdepartmentID5"
                    },
                    {
                        label: "Amount:",
                        name: "Purchases.purchaseamount6",
                        id: "purchaseamount6"
                    },
                    {
                        label: "Subdepartment:",
                        name: "Purchases.subdepartmentID6",
                        type: "select",
                        placeholder: "Select a subdepartment",
                        id: "subdepartmentID6"
                    },
                    {
                        label: "Amount:",
                        name: "Purchases.purchaseamount7",
                        id: "purchaseamount7"
                    },
                    {
                        label: "Subdepartment:",
                        name: "Purchases.subdepartmentID7",
                        type: "select",
                        placeholder: "Select a subdepartment",
                        id: "subdepartmentID7"
                    },
                    {
                        label: "Amount:",
                        name: "Purchases.purchaseamount8",
                        id: "purchaseamount8"
                    },
                    {
                        label: "Subdepartment:",
                        name: "Purchases.subdepartmentID8",
                        type: "select",
                        placeholder: "Select a subdepartment",
                        id: "subdepartmentID8"
                    },
                    {
                        label: "Amount:",
                        name: "Purchases.purchaseamount9",
                        id: "purchaseamount9"
                    },
                    {
                        label: "Subdepartment:",
                        name: "Purchases.subdepartmentID9",
                        type: "select",
                        placeholder: "Select a subdepartment",
                        id: "subdepartmentID9"
                    },
                    {
                        label: "Amount:",
                        name: "Purchases.purchaseamount10",
                        id: "purchaseamount10"
                    },
                    {
                        label: "Subdepartment:",
                        name: "Purchases.subdepartmentID10",
                        type: "select",
                        placeholder: "Select a subdepartment",
                        id: "subdepartmentID10"
                    },
                    {
                        label: "Location:",
                        name: "Purchases.locationID",
                        type: "select",
                        placeholder: "Select a location"
                    },
                    {
                        label: "Reconciled:",
                        name: "Purchases.purchasereconciled",
                        type: "checkbox",
                        options: [
                            { label: "", "value": "True" }
                        ],
                        separator: "|",
                        unselectedValue: "False"
                    },
                    {
                        label: "Notes:",
                        name: "Purchases.purchasememo",
                        type: "textarea"
                    },
                    {
                        label: "Created by:",
                        name: "Purchases.CreatedBy",
                        def: currentUser
                    },
                    {
                        label: "Date created:",
                        name: "Purchases.DateCreated",
                        type: "hidden",
                        def: getDate()
                    }
                ]
            });

            // Number of total Purchase amount and invoice fields
            var numberOfFields = 10;

            // Hide extra purchase amount and subdepartment fields.
            for (var i = 2; i <= numberOfFields; i++) {
                editor.field('Purchases.purchaseamount' + i).hide();
                editor.field('Purchases.subdepartmentID' + i).hide();
            };

            // Append "Add More" button to the end of purchase amount field.
            $('<button name="add" id="add" style="position:absolute;top:42%;right:8.3%">Add More</button>').insertAfter(
                editor.field('Purchases.purchaseamount').input()
            );

            // New Puchase Form: append "Add More" button to the end of purchase amount field.
            for (var i = 2; i <= numberOfFields; i++) {
                $('<button name="remove" id="' + i + '"class="btn btn-danger btn_remove" style="position:absolute;top:9.5%;right:13.25%">X</button>').insertAfter(
                    editor.field('Purchases.purchaseamount' + i).input()
                );
            }

            // New Purchase Form: on edit
            editor.on('initEdit', function () {
                for (i = 0; i < editor.fields().length; i++) {

                    // Always hide DateCreate field.
                    editor.field('Purchases.DateCreated').hide();

                    // If fields contain a value, show them
                    if (editor.field(editor.fields()[i]).val()) {
                        editor.field(editor.fields()[i]).show();
                    }

                    // If fields are null, empty, or undefined; hide them
                    if (!editor.field(editor.fields()[i]).val()) {
                        editor.field(editor.fields()[i]).hide();

                        // These fields should always be visible
                        editor.field('Purchases.vendorID').show();
                        editor.field('Purchases.CreatedBy').show();
                        editor.field('Purchases.purchasememo').show();
                    }
                }
            });

            // New Purchase Form:
            editor.on('open', function () {

                // New Purchase Form: add a themtaic break after Vendor ID field.
                $('<hr class="hrPurchaseForm">').insertBefore(
                    editor.field('Purchases.purchaseamount').input()
                );

                // New Purchase Form: add a themtaic break after Subdepartment field.
                $('<hr class="hrPurchaseForm">').insertBefore(
                    editor.field('Purchases.locationID').input()
                );

                // Always hide DateCreated field.
                editor.field('Purchases.DateCreated').hide();

                // If "Add More" button is clicked increment counter and show another pair of purchase amount and subdepartment fields
                $(document).unbind('click').on('click', '#add', function () {

                    // Get all displayed fields in Purchase form and create an array
                    var fields = [];
                    temp = editor.displayed();
                    for (i = 0; i < temp.length; i++) {
                        fields[i] = temp[i];
                    }

                    // Get all displayed purchaseamount fields and create an array
                    var used = [];
                    for (i = 2; i <= numberOfFields; i++) {
                        var notOpen = fields.indexOf('Purchases.purchaseamount' + i);
                        if (fields[notOpen]) {
                            var displayed = parseInt(fields[notOpen].replace(/[^\d]/g, ''));
                            used[i] = displayed;
                        }
                    }

                    // Generates array of all numbers between range.
                    var range = [];
                    for (i = 2; i <= numberOfFields; i++) {
                        range.push(i);
                    };

                    // Create array of unused values in range
                    var unused = _.difference(range, used);

                    if (unused.length != 0) {
                        editor.field('Purchases.purchaseamount' + unused[0]).show();
                        editor.field('Purchases.subdepartmentID' + unused[0]).show();
                    }
                });

                // Remove the last new UPC field generated
                $(document).on('click', '.btn_remove', function () {
                    var button_id = $(this).attr("id");

                    editor.field('Purchases.purchaseamount' + button_id).val('');
                    editor.field('Purchases.subdepartmentID' + button_id).val('');

                    editor.field('Purchases.purchaseamount' + button_id).hide();
                    editor.field('Purchases.subdepartmentID' + button_id).hide();
                });

                // New Purchase Form: on form close, hide and remove certain fields.
                editor.on('close', function () {

                    // Hide all displayed purchase amount and subdepartmentID fields.
                    for (var i = 2; i <= numberOfFields; i++) {
                        editor.field('Purchases.purchaseamount' + i).hide();
                        editor.field('Purchases.subdepartmentID' + i).hide();
                    };

                    // New Purchase Form: remove all thematic breaks on form close.
                    $(document).find('.hrPurchaseForm').remove();
                });

            });

            var table = $('#Purchases').DataTable({
                deferRender: true,
                select: true,
                lengthMenu: [[15, 25, 50, 100, -1], [15, 25, 50, 100, "All"]],
                ajax: '/api/Purchases',
                columns: [
                    {
                        data: "Purchases.invoicenumber"
                    },
                    {
                        data: "Purchases.purchasedate"
                    },
                    {
                        data: "SMSVendors.F334"
                    },
                    {
                        data: "Purchases.purchaseamount",
                        render: $.fn.dataTable.render.number(',', '.', 2, '$')
                    },
                    {
                        data: "Subdepartments.subdepartmentname"
                    },
                    {
                        data: "Locations.locationname"
                    },
                    {
                        data: "Purchases.purchasereconciled",
                        render: function (data, type, row) {
                            if (type === 'display') {
                                return '<input type="checkbox" class="editor-active">';
                            }
                            return data;
                        },
                        className: "dt-body-center"
                    },
                    {
                        data: "Purchases.purchasememo"
                    },
                    {
                        data: "Purchases.CreatedBy"
                    },
                    {
                        data: "Purchases.DateCreated",
                        render: function (value) {
                            if (value === null) return "";
                            return window.moment(value).format('M/D/YYYY h:mm:ss A');
                        }
                    }
                ],
                dom: '<"floatRight"B><"clear">lfrtip',
                order: [[9, "desc"]],
                buttons: [
                    {
                        text: 'New', formTitle: 'Add a New Invoice', extend: 'create', editor: editor,
                        formButtons: [
                            { text: 'Cancel', action: function () { this.close(); } },
                            { text: 'Create', action: function () { this.submit(); } },
                            {
                                text: 'Clear', action: function () {
                                    fields = editor.displayed();
                                    for (field in fields) {
                                        if ((editor.field(fields[field]).name() !== "Purchases.CreatedBy") && (editor.field(fields[field]).name() !== 'Purchases.DateCreated')) {
                                            editor.field(fields[field]).val('');
                                        }
                                    };
                                }
                            },
                            {
                                text: 'Submit Another', action: function () {

                                    // Creates lastNewInvoice object to store current forms data to be called later
                                    var lastNewInvoice = {
                                        'invoicenumber': editor.field('Purchases.invoicenumber').val(),
                                        'purchasedate': editor.field('Purchases.purchasedate').val(),
                                        'vendorID': editor.field('Purchases.vendorID').val(),
                                        'locationID': editor.field('Purchases.locationID').val(),
                                        'CreatedBy': editor.field('Purchases.CreatedBy').val()
                                    }

                                    // Puts the object into local storage
                                    localStorage.setItem('lastNewInvoice', JSON.stringify(lastNewInvoice));

                                    // Retrieve the object from storage
                                    lastNIRetrieved = localStorage.getItem('lastNewInvoice');
                                    this.submit();
                                    editor.create();
                                }
                            },
                            {
                                text: 'Copy', action: function () {

                                    // Initialize lastInvoice variable with object retrieved from storage
                                    var lastNewInvoice = JSON.parse(lastNIRetrieved);

                                    // Assign lastInvoice values to their respective fields
                                    editor.field('Purchases.invoicenumber').val(lastNewInvoice.invoicenumber);
                                    editor.field('Purchases.purchasedate').val(lastNewInvoice.purchasedate);
                                    editor.field('Purchases.vendorID').val(lastNewInvoice.vendorID);
                                    editor.field('Purchases.locationID').val(lastNewInvoice.locationID);
                                    editor.field('Purchases.CreatedBy').val(lastNewInvoice.CreatedBy);
                                }
                            }
                        ]
                    },
                    { extend: 'edit', editor: editor },
                    { extend: 'remove', editor: editor },
                    {
                        // Export table button
                        extend: 'collection', text: 'Export', autoClose: true,
                        buttons: [
                            'copy',
                            'excel',
                            'csv',
                            'pdf',
                            'print'
                        ]
                    },
                    {
                        // Show default view filter button
                        text: 'Show Default View', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .columns().order('')
                                .page.len(20)
                                .column(9).order('desc').draw()
                        }
                    }
                    @*,
                    {
                        // Help button!
                        text: 'Help', attr: { id: 'addanewinvoice', class: "btn btn-default" }, action: function () {
                            window.location = '@Url.Content("~/Content/Documentation/addanewinvoice.mp4")';
                        }
                    }*@

                ],
                rowCallback: function (row, data) {
                    // Set the checked state of the checkbox in the table
                    $('input.editor-active', row).prop('checked', data.Purchases.purchasereconciled == "True");
                }
            });

            // New Purchase Form: hide or show "Add More" button dependendent on create or edit form opened.
            editor.on('open', function (e, data, action) {

                // If editing a record, hide "Add More" button.
                if (action === 'edit') {
                    document.getElementById('add').style.visibility = 'hidden';
                }

                // If creating a new record, display "Add More" button.
                if (action === 'create') {
                    document.getElementById('add').style.visibility = 'visible';
                }
            });

            // Arrays to be used in the entry of multiple purchase amounts and their subdepartments.
            var purchaseAmounts = [];
            var subdepartmentIDs = [];

            // New Purchase Form: before submitting, verify if there are multiple purchase amounts being entered and manipulate them to create a new row for each.
            editor.on('preSubmit', function (e, data, action) {
                if (action === 'create') {

                    // New Purchase Form: field validation
                    // Invoice number
                    if (!editor.field('Purchases.invoicenumber').val()) {
                        editor.field('Purchases.invoicenumber').error('Required');
                    }

                    // Purchase date
                    if (!editor.field('Purchases.purchasedate').val()) {
                        editor.field('Purchases.purchasedate').error('Required');
                    }

                    // Vendor ID
                    if (!editor.field('Purchases.vendorID').val()) {
                        editor.field('Purchases.vendorID').error('Required');
                    }

                    // Purchase amount
                    if (!editor.field('Purchases.purchaseamount').val()) {
                        editor.field('Purchases.purchaseamount').error('Required');
                    }

                    // Subdepartment ID
                    if (!editor.field('Purchases.subdepartmentID').val()) {
                        editor.field('Purchases.subdepartmentID').error('Required');
                    }

                    //*****************************************************************************//

                    // New Purchase Form: get all displayed fields in Purchase form and create an array.
                    var fields = [];
                    temp = editor.displayed();
                    for (i = 0; i < temp.length; i++) {
                        fields[i] = temp[i];
                    }

                    // New Purchase Form: get all displayed purchaseamount and subdepartmentID fields and
                    // and display and required message if they are not filled out.
                    for (i = 2; i <= numberOfFields; i++) {
                        var purchaseAmount = fields.indexOf('Purchases.purchaseamount' + i);
                        var subdepartmentID = fields.indexOf('Purchases.subdepartmentID' + i);
                        if (fields[purchaseAmount]) {

                            // Purchase amount
                            if (!editor.field(fields[purchaseAmount]).val()) {
                                editor.field(fields[purchaseAmount]).error('Required');
                            }

                            // Subdepartment ID
                            if (!editor.field(fields[subdepartmentID]).val()) {
                                editor.field(fields[subdepartmentID]).error('Required');
                            }
                        }
                    }

                    //*****************************************************************************//

                    // Location ID
                    if (!editor.field('Purchases.locationID').val()) {
                        editor.field('Purchases.locationID').error('Required');
                    }

                    // Created By
                    if (!editor.field('Purchases.CreatedBy').val()) {
                        editor.field('Purchases.CreatedBy').error('Required');
                    }

                    // Date Created
                    if (!editor.field('Purchases.DateCreated').val()) {
                        editor.field('Purchases.DateCreated').error('Required');
                    }

                    // If any error was reported, cancel the submission so it can be corrected
                    if (this.inError()) {
                        return false;
                    }

                    // Gather data from filled out Editor form and store in array.
                    var oData = [];
                    oData = Object.values(data.data[0].Purchases);

                    // Loop through specific fields in data array to create purchaseAmounts array
                    // with data that will be different between each new row created.
                    var temp = {};
                    var purchases = [];
                    for (i = 3; i < 23; i += 2) {
                        if (oData[i]) {
                            temp.purchaseamount = oData[i];
                            temp.subdepartmentID = oData[i + 1];

                            purchases.push(temp);
                            temp = {};
                        }
                    }

                    // Temp array to hold all purchases
                    var tempPurchases = [];
                    for (i = 0; i < purchases.length; i++) {
                        tempPurchases.push(purchases[i].purchaseamount);
                    }

                    // Temp array to hold all subdepartments
                    var tempSubdepartments = [];
                    for (i = 0; i < purchases.length; i++) {
                        tempSubdepartments.push(purchases[i].subdepartmentID);
                    }

                    // If more than 1 purchase amount is entered enter this statement.
                    if (tempPurchases.length > 1) {

                        // Remote and return the last value in the tempPurchases and tempSubdepartments arrays to be used to create a new row.
                        data.data[0].Purchases.purchaseamount = tempPurchases.pop();
                        data.data[0].Purchases.subdepartmentID = tempSubdepartments.pop();

                        // Clear out all additional purchase amount and subdepartments for initial record to be created.
                        for (i = 10; i > 0; i--) {
                            data.data[0].Purchases["purchaseamount" + i] = "";
                            data.data[0].Purchases["subdepartmentID" + i] = "";
                        }

                        // Update purchaseAmounts and SubdepartmentID arrays.
                        purchaseAmounts = tempPurchases;
                        subdepartmentIDs = tempSubdepartments;
                    }
                }

                return true;
            });

            // New Purchase Form: on submission, create multiple new records dependent on how many
            // purchase amount and subdepartment pairs were completed.
            editor.on('submitComplete', function (e, json, data, action) {
                if (action === 'create') {
                    if (purchaseAmounts.length > 0) {
                        editor.create(false)
                            .set('Purchases.invoicenumber', data.Purchases.invoicenumber)
                            .set('Purchases.purchasedate', data.Purchases.purchasedate)
                            .set('Purchases.vendorID', data.Purchases.vendorID)
                            .set('Purchases.purchaseamount', purchaseAmounts.pop())
                            .set('Purchases.subdepartmentID', subdepartmentIDs.pop())
                            .set('Purchases.locationID', data.Purchases.locationID)
                            .set('Purchases.purchasereconciled', data.Purchases.purchasereconciled)
                            .set('Purchases.purchasememo', data.Purchases.purchasememo)
                            .set('Purchases.CreatedBy', data.Purchases.CreatedBy)
                            .set('Purchases.DateCreated', data.Purchases.DateCreated)
                            .submit();
                    }
                }
            });

            // Submit check of purchase reconciled box to server for updating.
            $('#Purchases').on('change', 'input.editor-active', function () {
                editor
                    .edit($(this).closest('tr'), false)
                    .set('Purchases.purchasereconciled', $(this).prop('checked') ? "True" : "False")
                    .submit();
            });

            // Go to Add A New Invoice Video Guide
            $('#addanewinvoice').click(function () {
                window.location.href = '@Url.Content("~/Content/Documentation/addanewinvoice.mp4")';
            })
        });

    </script>
}