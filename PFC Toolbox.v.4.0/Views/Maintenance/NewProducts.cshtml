@{
    ViewBag.Title = "Manage New Products";
}
@using PFC_Toolbox.v._4._0.Extensions;
@using PFC_Toolbox.v._4._0.Models;

<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />

    <title>New Products</title>

    <link rel="stylesheet" type="text/css" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/1.6.1/css/buttons.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/select/1.3.1/css/select.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://editor.datatables.net/extensions/Editor/css/editor.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/Custom.css" />
</head>
<body class="dataTables">
    <div class="container">
        <h1><img src="~/Content/PFC_Logo_128px.png" width="100" height="100">        New Products</h1>
        <br />
        <table id="ProductUpdates" class="display text-nowrap compact" style="width:100%">
            <thead>
                <tr>
                    <th>Request Type</th>
                    <th>Status</th>
                    <th>UPC/PLU</th>
                    <th>Brand</th>
                    <th>Description</th>
                    <th>Size</th>
                    <th>TPR Start</th>
                    <th>TPR End</th>
                    <th>TPR Price</th>
                    <th>Retail Price</th>
                    <th>Created By</th>
                    <th>Date Created</th>
                </tr>
            </thead>
        </table>
    </div>
</body>
</html>

@section scripts{
    <script type="text/javascript" charset="utf-8" src="https://code.jquery.com/jquery-3.3.1.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.10/lodash.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.6.1/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.flash.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.html5.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.print.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/select/1.3.1/js/dataTables.select.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/responsive/1.0.7/js/dataTables.responsive.min.js"></script>
    <script src="~/Content/Editor-1.8.1/js/dataTables.editor.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/plug-ins/1.10.19/sorting/datetime-moment.js"></script>

    <script>

        // Function to pad numbers with 0's
        function pad(number, width = 3, z = 0) { return (String(z).repeat(width) + String(number)).slice(String(number).length) }

        // Function to get today's date
        function getDate() {
            today = new Date().getMonth() + 1
            + "/" + new Date().getDate()
            + "/" + new Date().getFullYear()
            + " " + new Date().getHours()
            + ":" + new Date().getMinutes()
            + ":" + new Date().getSeconds()
            return today;
        };

        var editorNP;
        $(document).ready(function () {

            $.fn.dataTable.moment( 'M/D/YYYY hh:mm:ss A' );

            // New Product Form
            var editorNP = new $.fn.dataTable.Editor({
                ajax: '/api/ProductUpdates',
                table: '#ProductUpdates',
                fields: [
                    {
                        label: "Product Update Type",
                        name: "ProductUpdates.requesttypeID",
                        type: "readonly",
                        type: "hidden",
                        def: "6"
                    }, {
                        label: "Location:",
                        name: "ProductUpdates.locationID",
                        type: "select",
                        placeholder: "Select a location"
                    }, {
                        label: "Mettler Product:",
                        name: "ProductUpdates.ismettlerrequired",
                        type: "select",
                        options: ["Yes", "No"],
                        placeholder: "Select an option"
                    }, {
                        label: "Shelf Tag:",
                        name: "ProductUpdates.labelID",
                        type: "select",
                        placeholder: "Select a label size"
                    }, {
                        label: "UPC/PLU",
                        name: "ProductUpdates.F01"
                    }, {
                        label: "Mettler PLU:",
                        name: "ProductUpdates.ScalePLU"
                    }, {
                        label: "Brand:",
                        name: "ProductUpdates.OBJ_TAB_F155",
                        type: "select",
                        placeholder: "Select a brand"
                    }, {
                        label: "Receipt Description:",
                        name: "ProductUpdates.OBJ_TAB_F29"
                    }, {
                        label: "Size:",
                        name: "ProductUpdates.OBJ_TAB_F22"
                    }, {
                        label: "Sign Description:",
                        name: "ProductUpdates.OBJ_TAB_F255"
                    }, {
                        label: "Subdepartment:",
                        name: "ProductUpdates.POS_TAB_F04",
                        type: "select",
                        placeholder: "Select a subdepartment"
                    }, {
                        label: "Category:",
                        name: "ProductUpdates.OBJ_TAB_F17",
                        optionsPair: {
                            label: 'F1023',
                            value: 'F17'
                        },
                        type: "select",
                        placeholder: "Select a category"
                    }, {
                        label: "Report:",
                        name: "ProductUpdates.OBJ_TAB_F18",
                        type: "select",
                        placeholder: "Select a report"
                    }, {
                        label: "Family button:",
                        name: "ProductUpdates.OBJ_TAB_F16",
                        type: "select",
                        placeholder: "Select a family button"
                    }, {
                        label: "Like:",
                        name: "ProductUpdates.LIKE_TAB_F122",
                        type: "select",
                        placeholder: "Select a like code"
                    }, {
                        label: "SNAP:",
                        name: "ProductUpdates.POS_TAB_F79",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Scalable:",
                        name: "ProductUpdates.POS_TAB_F82",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Taxable:",
                        name: "ProductUpdates.POS_TAB_F81",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        type: "checkbox",
                        unselectedValue: 0,
                        separator: "|"
                    }, {
                        label: "Stop discount:",
                        name: "ProductUpdates.POS_TAB_F150",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0,
                        type: "hidden"
                    }, {
                        label: "WIC:",
                        name: "ProductUpdates.POS_TAB_F178",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Retail Price",
                        name: "ProductUpdates.price_tab_f30"
                    }, {
                        label: "Vendor:",
                        name: "ProductUpdates.COST_TAB_F27",
                        type: "select",
                        placeholder: "Select a vendor"
                    }, {
                        label: "Reorder code:",
                        name: "ProductUpdates.COST_TAB_F26"
                    }, {
                        label: "Retail margin:",
                        name: "ProductUpdates.PRICE_TAB_F49"
                    }, {
                        label: "Items per case:",
                        name: "ProductUpdates.COST_TAB_F19"
                    }, {
                        label: "Case cost:",
                        name: "ProductUpdates.COST_TAB_F38"
                    }, {
                        label: "Client age:",
                        name: "ProductUpdates.POS_TAB_F171",
                        type: "hidden"
                    }, {
                        label: "Created by:",
                        name: "ProductUpdates.createdby",
                        type: "readonly",
                        type: "hidden",
                        def: "@(User.GetCreatedBy())"
                    }, {
                        label: "Date created:",
                        name: "ProductUpdates.datecreated",
                        type: "hidden",
                        def: getDate()
                    }, {
                        label: "Date completed:",
                        name: "ProductUpdates.completeddate",
                        type: "hidden"
                    }, {
                        label: "Completed by:",
                        name: "ProductUpdates.completedby",
                        type: "hidden"
                    }, {
                        label: "Last updated on:",
                        name: "ProductUpdates.lastupdatedon",
                        type: "hidden"
                    }, {
                        label: "Last updated by:",
                        name: "ProductUpdates.lastupdatedby",
                        type: "hidden"
                    }, {
                        label: "Status:",
                        name: "ProductUpdates.productstatusID",
                        type: "hidden",
                        def: "3"
                    }, {
                        label: "Notes:",
                        name: "ProductUpdates.AdditionalRequestNotes",
                        type:"textarea"
                    }, {
                        label: "Item Type:",
                        name: "ProductUpdates.ScaleItemTypeID",
                        type: "select",
                        placeholder: "Select an option",
                        options: [
                            { label: "Price per pound", value: "1" },
                            { label: "Standard pack", value: "2"}
                        ]
                    }, {
                        label: "Tare / Net Weight:",
                        name: "ProductUpdates.TareNetWeight"
                    }, {
                        label: "Shelf Life:",
                        name: "ProductUpdates.ShelfLife"
                    }, {
                        label: "Ingredients:",
                        name: "ProductUpdates.IngredientList",
                        type:"textarea"
                    }
                ]
            });

            // New Product Form: hides Family Button unless Hackberry's Brand is selected
            editorNP.field('ProductUpdates.OBJ_TAB_F155').input().on('change', function () {
                if (editorNP.field('ProductUpdates.OBJ_TAB_F155').val() == "HACKBERRYS" || editorNP.field('ProductUpdates.OBJ_TAB_F155').val() == "HACKBERRY'S") {
                    editorNP.field('ProductUpdates.OBJ_TAB_F16').show();
                } else {
                    editorNP.field('ProductUpdates.OBJ_TAB_F16').hide();
                }
            });

            // New Product Form: hides Like code unless Produce is selected
            editorNP.field('ProductUpdates.POS_TAB_F04').input().on('change', function () {
                if (editorNP.field('ProductUpdates.POS_TAB_F04').val() == '6' || editorNP.field('ProductUpdates.POS_TAB_F04').val() == '17' || editorNP.field('ProductUpdates.POS_TAB_F04').val() == '3') {
                    editorNP.field('ProductUpdates.LIKE_TAB_F122').show();
                } else {
                    editorNP.field('ProductUpdates.LIKE_TAB_F122').hide();
                }
            });

            // New Product Form: hides Mettler Ingredients unless Yes to Mettler Product option is selected
            editorNP.field('ProductUpdates.ismettlerrequired').input().on('change', function () {
                if (editorNP.field('ProductUpdates.ismettlerrequired').val() == 'Yes') {

                    editorNP.field('ProductUpdates.ScalePLU').show();
                    editorNP.field('ProductUpdates.ScaleItemTypeID').show();
                    editorNP.field('ProductUpdates.TareNetWeight').show();
                    editorNP.field('ProductUpdates.ShelfLife').show();
                    editorNP.field('ProductUpdates.IngredientList').show();
                } else {
                    editorNP.field('ProductUpdates.ScalePLU').hide();
                    editorNP.field('ProductUpdates.ScaleItemTypeID').hide();
                    editorNP.field('ProductUpdates.TareNetWeight').hide();
                    editorNP.field('ProductUpdates.ShelfLife').hide();
                    editorNP.field('ProductUpdates.IngredientList').hide();
                }
            });

            // New Product Form: set scalable checkbox on Item Type selection
            editorNP.field('ProductUpdates.ScaleItemTypeID').input().on('change', function () {
                if (editorNP.field('ProductUpdates.ScaleItemTypeID').val() == '1') {
                    editorNP.field('ProductUpdates.POS_TAB_F82').val(1);
                    editorNP.field('ProductUpdates.OBJ_TAB_F22').val("per lb.")
                } else {
                    editorNP.field('ProductUpdates.POS_TAB_F82').val(2);
                }
            });

            // New Product Form: filter available categories on subdepartment selection
            editorNP.dependent('ProductUpdates.POS_TAB_F04', '/api/Categories');

            // New Product Form: set default POS attributes
            editorNP.dependent('ProductUpdates.POS_TAB_F04', function () {
                var subdepartment = editorNP.field('ProductUpdates.POS_TAB_F04').val();

                var GetSubdepartmentAttributes = $.ajax({
                    url: "api/GetSubdepartmentBounds",
                    type: "GET",
                    dataType: "json",
                    data: { 'F04': subdepartment },
                    error: function (error) {
                        console.log(`Error ${error}`);
                    }
                });

                GetSubdepartmentAttributes.then(function (data) {
                    editorNP.field('ProductUpdates.POS_TAB_F79').val(data.data[0].SMSSubdepartments.F79);
                    editorNP.field('ProductUpdates.POS_TAB_F178').val(data.data[0].SMSSubdepartments.F178);
                    editorNP.field('ProductUpdates.POS_TAB_F81').val(data.data[0].SMSSubdepartments.F81);
                    editorNP.field('ProductUpdates.POS_TAB_F171').val(data.data[0].SMSSubdepartments.F171);
                    editorNP.field('ProductUpdates.POS_TAB_F150').val(data.data[0].SMSSubdepartments.F150);
                });
            });

            // New Product Form: set last updated date and last updated by upon edit
            editorNP.field('ProductUpdates.productstatusID').input().on('change', function () {
                editorNP.field('ProductUpdates.lastupdatedon').val(getDate());
                editorNP.field('ProductUpdates.lastupdatedby').val("@(User.GetCreatedBy())");
            });

            // Create the DataTables table
            var table = $('#ProductUpdates').DataTable({

                // Default view showing incomplete requests
                initComplete: function (e, dt, node, config) {
                    table
                        .column(0).search('^New Product$', true, false)
                        .column(1).search('^3 - Manager Review Completed$', true, false).draw()
                },
                deferRender: true,
                // Default table lengths
                lengthMenu: [[20, 50, 100, -1], [20, 50, 100, "All"]],
                // Table data source
                ajax: {
                    url: '/api/ProductUpdates'
                },
                // Table columns
                columns: [
                    { "data": "RequestTypes.requestname" },
                    { "data": "Status.productupdatestatus" },
                    { "data": "ProductUpdates.F01", width: '110px' },
                    { "data": "ProductUpdates.OBJ_TAB_F155" },
                    { "data": "ProductUpdates.OBJ_TAB_F29" },
                    { "data": "ProductUpdates.OBJ_TAB_F22" },
                    { "data": "ProductUpdates.promotprstartdate" },
                    { "data": "ProductUpdates.promotprenddate" },
                    { "data": "ProductUpdates.promotprprice" },
                    { "data": "ProductUpdates.price_tab_f30" },
                    { "data": "ProductUpdates.createdby" },
                    {
                        "data": "ProductUpdates.datecreated", "render": function (value) {
                            if (value === null) return "";
                            return window.moment(value).format('M/D/YYYY hh:mm:ss A');
                        }
                    },
                    { "data": "ProductUpdates.completeddate", visible: false }
                ],
                // Change New Products request type background green
                "rowCallback": function (row, data, index) {
                    if (data.RequestTypes.requestname == "New Product") { $(row).find('td:eq(0)').css('background-color', '#E6EDD7'); }
                },
                select: true,
                // Control button layout
                dom: '<"floatRight"B><"clear">lfrtip',
                // Default table order
                order: [[11, "desc"], [1, "asc"]],
                buttons: [
                    {
                        // Custom edit button that updates timestamps
                        text: 'Edit', formTitle: 'Edit New Product', extend: 'edit', editor: editorNP,
                        formButtons:
                            [
                                {
                                    text: 'Update', action: function () {
                                        editorNP.field('ProductUpdates.lastupdatedon').val(getDate());
                                        editorNP.field('ProductUpdates.lastupdatedby').val("@(User.GetCreatedBy())");
                                        this.submit();
                                    }
                                }
                            ]
                    },
                    {
                        // Show completed today filter button
                        text: 'Show Completed Today', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .column(0).search('^New Product$', true, false)
                                .column(1).search('^4 - Completed$', true, false)
                                .column(12).search(new Date().getMonth() + 1 + "/" + new Date().getDate() + "/" + new Date().getFullYear(), true, false).draw()
                        }
                    },
                    {
                        // Show default view filter button
                        text: 'Show Default View', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .column(0).search('^New Product$', true, false)
                                .column(1).search('^3 - Manager Review Completed$', true, false).draw()
                        }
                    },
                    {
                        // Show all records filter button
                        text: 'Show All', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .column(0).search('^New Product$', true, false)
                                .column(1).search('^3 - Manager Review Completed$|^4 - Completed$', true, false).column(11).order('desc').draw()
                        }
                    },

                    // Creates an Export New Products button and executes AJAX requests
                    {
                        text: 'Export', action: function (e, dt, node, config) {

                            // Gather data from each selected row
                            var data = table.rows({ selected: true }).data();

                            // Create array with selected rows data
                            var newArray = [];
                            var tempArray = {};
                            for ($i = 0; $i < data.length; $i++) {

                                // OBJ_TAB
                                tempArray.F01 = data[$i].ProductUpdates.F01
                                tempArray.F155 = data[$i].ProductUpdates.OBJ_TAB_F155
                                tempArray.F29 = data[$i].ProductUpdates.OBJ_TAB_F29
                                tempArray.F22 = data[$i].ProductUpdates.OBJ_TAB_F22
                                tempArray.F255 = data[$i].ProductUpdates.OBJ_TAB_F255
                                tempArray.F17 = data[$i].ProductUpdates.OBJ_TAB_F17
                                tempArray.F16 = data[$i].ProductUpdates.OBJ_TAB_F16
                                tempArray.F18 = data[$i].ProductUpdates.OBJ_TAB_F18

                                // POS_TAB
                                tempArray.F04 = data[$i].ProductUpdates.POS_TAB_F04
                                tempArray.F02 = data[$i].ProductUpdates.OBJ_TAB_F29 + " " + data[$i].ProductUpdates.OBJ_TAB_F22
                                tempArray.F79 = data[$i].ProductUpdates.POS_TAB_F79
                                tempArray.F178 = data[$i].ProductUpdates.POS_TAB_F178
                                tempArray.F1120 = data[$i].ProductUpdates.POS_TAB_F1120
                                tempArray.F83 = data[$i].ProductUpdates.POS_TAB_F83
                                tempArray.F82 = data[$i].ProductUpdates.POS_TAB_F82
                                tempArray.F81 = data[$i].ProductUpdates.POS_TAB_F81
                                tempArray.F96 = data[$i].ProductUpdates.POS_TAB_F96
                                tempArray.F171 = data[$i].ProductUpdates.POS_TAB_F171
                                tempArray.F123 = data[$i].ProductUpdates.POS_TAB_F123
                                tempArray.F150 = data[$i].ProductUpdates.POS_TAB_F150

                                // PRICE_TAB
                                tempArray.F30 = data[$i].ProductUpdates.price_tab_f30
                                tempArray.F126 = data[$i].ProductUpdates.PRICE_TAB_F126
                                tempArray.F31 = data[$i].ProductUpdates.PRICE_TAB_F31

                                // COST_TAB
                                tempArray.F27 = data[$i].ProductUpdates.COST_TAB_F27
                                tempArray.F26 = data[$i].ProductUpdates.COST_TAB_F26
                                if (data[$i].ProductUpdates.COST_TAB_F19 == null) {
                                    tempArray.F19 = data[$i].ProductUpdates.COST_TAB_F19 = 1;
                                }
                                else {
                                    tempArray.F19 = data[$i].ProductUpdates.COST_TAB_F19
                                }
                                if (data[$i].ProductUpdates.COST_TAB_F38 == null) {
                                    tempArray.F38 = data[$i].ProductUpdates.COST_TAB_F19 = 0.01;
                                }
                                else {
                                    tempArray.F38 = data[$i].ProductUpdates.COST_TAB_F38
                                }

                                newArray.push(tempArray);
                                tempArray = {};
                            };

                            console.log(newArray);

                            for ($i = 0; $i < newArray.length; $i++) {
                                var ExportNewProduct = $.ajax({
                                    url: '@Url.Action("CreateNewProduct", "NewProduct")',
                                    type: "POST",
                                    dataType: "json",
                                    data: {

                                        // OBJ_TAB
                                        'F01': newArray[$i].F01,
                                        'F155': newArray[$i].F155,
                                        'F29': newArray[$i].F29,
                                        'F22': newArray[$i].F22,
                                        'F255': newArray[$i].F255,
                                        'F17': newArray[$i].F17,
                                        'F16': newArray[$i].F16,
                                        'F18': newArray[$i].F18,

                                        // POS_TAB
                                        'F04': newArray[$i].F04,
                                        'F02': newArray[$i].F02,
                                        'F79': newArray[$i].F79,
                                        'F178': newArray[$i].F178,
                                        'F1120': newArray[$i].F1120,
                                        'F83': newArray[$i].F83,
                                        'F82': newArray[$i].F82,
                                        'F81': newArray[$i].F81,
                                        'F96': newArray[$i].F96,
                                        'F171': '21',
                                        'F123': newArray[$i].F123,
                                        'F150': newArray[$i].F150,

                                        // PRICE_TAB
                                        'F30': newArray[$i].F30,
                                        'F126': '1',
                                        'F31': '1',

                                        // COST_TAB
                                        'F27': newArray[$i].F27,
                                        'F26': newArray[$i].F26,
                                        'F19': newArray[$i].F19,
                                        'F38': newArray[$i].F38

                                    },
                                    error: function (error) {
                                        console.log(`Error ${error}`);
                                    }
                                });

                                ExportNewProduct;
                            }
                        }
                    },

                    // Redirects user back to main Product Maintenance page
                    { text: 'Back', action: function () { window.location = 'ProductMaintenance' } }
                ]
            });
        });
    </script>
}