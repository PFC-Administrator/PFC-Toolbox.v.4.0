@{
    ViewBag.Title = "Manage New Products";
    var CreatedBy = Request["CreatedBy"];
}

<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />

    <title>New Products</title>

    @*Imported CSS libraries*@
    <link rel="stylesheet" type="text/css" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/1.6.1/css/buttons.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/select/1.3.1/css/select.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://editor.datatables.net/extensions/Editor/css/editor.dataTables.min.css" />
</head>
<body class="dataTables">
    <div class="container">
        <h1 style="display: inline-block"><img src="~/Content/PFC_Logo_128px.png" width="100" height="100">        New Products</h1>
        <button name="add" id="getProductMaintenance" class="btn btn-deafult blueButton" style="float:right;margin-top:2%;margin-right:0.5%;padding:1%">Back</button>
        <button name="add" id="deleteNewProducts" class="btn btn-default redButton" style="float:right;margin-top:2%;margin-right:0.5%;padding:1%">Delete</button>
        <button name="add" id="getProductUpdates" class="btn btn-default" style="float:right;margin-top:2%;margin-right:0.5%;padding:1%">Manage Update Requests</button>
        <button name="add" id="exportNewProducts" class="btn btn-default yellowButton" style="float:right;margin-top:2%;margin-right:0.5%;padding:1%">Export</button>
        <br />
        <br />
        <table id="NewProducts" class="display text-nowrap compact" style="width:100%">
            <thead>
                <tr>
                    <th class="toggle-all"><i id="select_all" name="select_invoice"></i></th>
                    <th>Request Type</th>
                    @*<th></th>*@
                    <th>Status</th>
                    <th>Item Code</th>
                    <th>Brand</th>
                    <th>Description</th>
                    <th>Size</th>
                    <th>Retail Price</th>
                    <th>Created By</th>
                    <th>Date Created</th>
                </tr>
            </thead>
        </table>
    </div>
</body>
</html>

@section scripts{
    @*Imported JavaScript libraries*@
    <script type="text/javascript" charset="utf-8" src="https://code.jquery.com/jquery-3.3.1.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.6.1/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.flash.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.html5.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.print.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/select/1.3.1/js/dataTables.select.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/responsive/1.0.7/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/plug-ins/1.10.19/sorting/datetime-moment.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/plug-ins/1.10.20/dataRender/ellipsis.js"></script>

    <script>

        // Current logged in user's name
        var currentUser = "@CreatedBy";

        // Activates all code inside when DOM of page is loaded
        $(document).ready(function () {

            // Moment date format
            $.fn.dataTable.moment('M/D/YYYY h:mm:ss A');

            // Disable autocomplete on form fields
            $.extend(true, $.fn.dataTable.Editor.Field.defaults, {
                attr: {
                    autocomplete: 'off'
                }
            });

            // Form padding
            $.extend($.fn.dataTable.Editor.display.lightbox.conf, {
                windowPadding: 66
            });

            // New Product Form
            var editorNP = new $.fn.dataTable.Editor({
                ajax: '/api/NewProducts',
                table: '#NewProducts',
                fields: [
                    {
                        label: "Status:",
                        name: "ProductUpdates.productstatusID",
                        type: "select",
                        def: "3"
                    }, {
                        label: "Product Update Type:",
                        name: "ProductUpdates.requesttypeID",
                        type: "readonly",
                        type: "hidden",
                        def: "6"
                    }, {
                        label: "Location:",
                        name: "ProductUpdates.locationID",
                        type: "select",
                        placeholder: "Select a location"
                    }, {
                        label: "Mettler Product:",
                        name: "ProductUpdates.ismettlerrequired",
                        type: "select",
                        options: ["Yes", "No"],
                        placeholder: "Select an option"
                    }, {
                        label: "Shelf Tag:",
                        name: "ProductUpdates.labelID",
                        type: "select",
                        placeholder: "Select a label size"
                    }, {
                        label: "UPC/PLU:",
                        name: "ProductUpdates.F01"
                    }, {
                        label: "Mettler PLU:",
                        name: "ProductUpdates.ScalePLU",
                        attr: {
                            type: 'number'
                        }
                    }, {
                        label: "Brand:",
                        name: "ProductUpdates.OBJ_TAB_F155",
                        type: "select",
                        placeholder: "Select a brand"
                    }, {
                        label: "Shelf Tag & Receipt Description:",
                        name: "ProductUpdates.OBJ_TAB_F29"
                    }, {
                        label: "Size:",
                        name: "ProductUpdates.OBJ_TAB_F22"
                    }, {
                        label: "Sign Description:",
                        name: "ProductUpdates.OBJ_TAB_F255"
                    }, {
                        label: "Subdepartment:",
                        name: "ProductUpdates.POS_TAB_F04",
                        type: "select",
                        placeholder: "Select a subdepartment"
                    }, {
                        label: "Category:",
                        name: "ProductUpdates.OBJ_TAB_F17",
                        optionsPair: {
                            label: 'F1023',
                            value: 'F17'
                        },
                        type: "select",
                        placeholder: "Select a category"
                    }, {
                        label: "Report:",
                        name: "ProductUpdates.OBJ_TAB_F18",
                        type: "select",
                        placeholder: "Select a report"
                    }, {
                        label: "Family Button:",
                        name: "ProductUpdates.OBJ_TAB_F16",
                        type: "select",
                        placeholder: "Select a family button"
                    }, {
                        label: "Like:",
                        name: "ProductUpdates.LIKE_TAB_F122",
                        type: "select",
                        placeholder: "Select a like code",
                        id: "likecodeNP"
                    }, {
                        label: "SNAP:",
                        name: "ProductUpdates.POS_TAB_F79",
                        type: "checkbox",
                        options: [
                            { label: "", "value": "True" }
                        ],
                        separator: "|",
                        unselectedValue: "False"
                    }, {
                        label: "Scalable:",
                        name: "ProductUpdates.POS_TAB_F82",
                        type: "checkbox",
                        options: [
                            { label: "", "value": "True" }
                        ],
                        separator: "|",
                        unselectedValue: "False"
                    }, {
                        label: "Taxable:",
                        name: "ProductUpdates.POS_TAB_F81",
                        type: "checkbox",
                        options: [
                            { label: "", "value": "True" }
                        ],
                        separator: "|",
                        unselectedValue: "False"
                    }, {
                        label: "Taxable 2:",
                        name: "ProductUpdates.POS_TAB_F96",
                        type: "checkbox",
                        type: "hidden",
                        options: [
                            { label: "", "value": "True" }
                        ],
                        separator: "|",
                        unselectedValue: "False"
                    }, {
                        label: "Stop Discount:",
                        name: "ProductUpdates.POS_TAB_F150",
                        type: "checkbox",
                        type: "hidden",
                        options: [
                            { label: "", "value": "True" }
                        ],
                        separator: "|",
                        unselectedValue: "False"
                    }, {
                        label: "Force Price:",
                        name: "ProductUpdates.POS_TAB_F83",
                        type: "checkbox",
                        type: "hidden",
                        options: [
                            { label: "", "value": "True" }
                        ],
                        separator: "|",
                        unselectedValue: "False"
                    }, {
                        label: "WIC:",
                        name: "ProductUpdates.POS_TAB_F178",
                        type: "checkbox",
                        options: [
                            { label: "", "value": "True" }
                        ],
                        separator: "|",
                        unselectedValue: "False"
                    }, {
                        label: "Vendor:",
                        name: "ProductUpdates.COST_TAB_F27",
                        type: "select",
                        placeholder: "Select a vendor"
                    }, {
                        label: "Reorder Code:",
                        name: "ProductUpdates.COST_TAB_F26"
                    }, {
                        label: "Retail Margin:",
                        name: "ProductUpdates.PRICE_TAB_F49",
                        attr: {
                            type: 'number'
                        }
                    }, {
                        label: "Items Per Case:",
                        name: "ProductUpdates.COST_TAB_F19",
                        attr: {
                            type: 'number'
                        }
                    }, {
                        label: "Case Cost:",
                        name: "ProductUpdates.COST_TAB_F38",
                        attr: {
                            type: 'number',
                            step: 'any'
                        }
                    }, {
                        label: "Retail Price:",
                        name: "ProductUpdates.price_tab_f30",
                        attr: {
                            type: 'number',
                            step: 'any'
                        }
                    }, {
                        label: "Client Age:",
                        name: "ProductUpdates.POS_TAB_F171",
                        type: "hidden"
                    }, {
                        label: "Notes:",
                        name: "ProductUpdates.AdditionalRequestNotes",
                        type:"textarea"
                    }, {
                        label: "Item Type:",
                        name: "ProductUpdates.ScaleItemTypeID",
                        type: "select",
                        placeholder: "Select an option",
                        options: [
                            { label: "Price per pound", value: "1" },
                            { label: "Standard pack", value: "2"}
                        ]
                    }, {
                        label: "Tare:",
                        name: "ProductUpdates.TareNetWeight",
                        attr: {
                            type: 'number',
                            step: 'any'
                        }
                    }, {
                        label: "Net Weight:",
                        name: "ProductUpdates.PRICE_TAB_F31",
                        attr: {
                            type: 'number'
                        }
                    }, {
                        label: "Shelf Life:",
                        name: "ProductUpdates.ShelfLife",
                        attr: {
                            type: 'number'
                        }
                    }, {
                        label: "Ingredients:",
                        name: "ProductUpdates.IngredientList",
                        type:"textarea"
                    }, {
                        label: "Created By:",
                        name: "ProductUpdates.createdby",
                        type: "readonly",
                        type: "hidden",
                        def: currentUser
                    }, {
                        label: "Date Created:",
                        name: "ProductUpdates.datecreated",
                        type: "hidden",
                        def: getDate()
                    }, {
                        label: "Date Completed:",
                        name: "ProductUpdates.completeddate"
                    }, {
                        label: "Completed By:",
                        name: "ProductUpdates.completedby"
                    }, {
                        label: "Last Updated On:",
                        name: "ProductUpdates.lastupdatedon",
                        type: "hidden"
                    }, {
                        label: "Last Updated By:",
                        name: "ProductUpdates.lastupdatedby",
                        type: "hidden"
                    }
                ]
            });

            /***********************************************************/
            // Field formatting and filtering

            // New Product Form: converts receipt description to title case
            editorNP.field('ProductUpdates.OBJ_TAB_F29').input().on('blur', function () {
                var productName = editorNP.field('ProductUpdates.OBJ_TAB_F29').val();
                productName = titleCase(productName);
                productName = limitLength(productName, 32)
                editorNP.field('ProductUpdates.OBJ_TAB_F29').val(productName);
            });

            // New Product Form: format size field
            editorNP.field('ProductUpdates.OBJ_TAB_F22').input().on('blur', function () {
                var size = editorNP.field('ProductUpdates.OBJ_TAB_F22').val();
                size = sizeFormatter(size);
                size = limitLength(size, 10)
                editorNP.field('ProductUpdates.OBJ_TAB_F22').val(size);
            });

            // New Product Form: converts signage descriptions to title case
            editorNP.field('ProductUpdates.OBJ_TAB_F255').input().on('blur', function () {
                var productName = editorNP.field('ProductUpdates.OBJ_TAB_F255').val();
                productName = titleCase(productName);
                productName = limitLength(productName, 64)
                editorNP.field('ProductUpdates.OBJ_TAB_F255').val(productName);
            });

            // New Product Form: only numbers, letters, commas, and spaces allowed
            editorNP.field('ProductUpdates.F01').input().on('blur', function () {
                var UPC = editorNP.field('ProductUpdates.F01').val();
                UPC = UPC.replace(/[^a-zA-Z0-9, ]/g, "");
                editorNP.field('ProductUpdates.F01').val(UPC);
            });

            // New Product Form: only numbers, letters, commas, and spaces allowed
            editorNP.field('ProductUpdates.ScalePLU').input().on('blur', function () {
                var MPLU = editorNP.field('ProductUpdates.ScalePLU').val();
                MPLU = MPLU.replace(/[^a-zA-Z0-9, ]/g, "");
                editorNP.field('ProductUpdates.ScalePLU').val(MPLU);
            });

            // New Product Form: only numbers, letters, commas, and spaces allowed
            editorNP.field('ProductUpdates.COST_TAB_F26').input().on('blur', function () {
                var reordercode = editorNP.field('ProductUpdates.COST_TAB_F26').val();
                reordercode = reordercode.replace(/[^a-zA-Z0-9, ]/g, "");
                editorNP.field('ProductUpdates.COST_TAB_F26').val(reordercode);
            });

            // New Product Form: removes all characters from notes field
            editorNP.field('ProductUpdates.AdditionalRequestNotes').input().on('blur', function () {
                var notes = editorNP.field('ProductUpdates.AdditionalRequestNotes').val();
                notes = removeSpecials(notes);
                editorNP.field('ProductUpdates.AdditionalRequestNotes').val(notes);
            });

            // New Product Form: removes all characters from ingredients field
            editorNP.field('ProductUpdates.IngredientList').input().on('blur', function () {
                var ingredients = editorNP.field('ProductUpdates.IngredientList').val();
                ingredients = removeSpecials(ingredients);
                editorNP.field('ProductUpdates.IngredientList').val(ingredients);
            });

            // New Product Form: hides Family Button unless Hackberry's Brand is selected
            editorNP.field('ProductUpdates.OBJ_TAB_F155').input().on('change', function () {
                if (editorNP.field('ProductUpdates.OBJ_TAB_F155').val() == "HACKBERRYS" || editorNP.field('ProductUpdates.OBJ_TAB_F155').val() == "HACKBERRY'S") {
                    editorNP.field('ProductUpdates.OBJ_TAB_F16').show();
                } else {
                    editorNP.field('ProductUpdates.OBJ_TAB_F16').hide();
                    editorNP.field('ProductUpdates.OBJ_TAB_F16').val('');
                }
            });

            // New Product Form: hides Like code unless Produce is selected
            editorNP.field('ProductUpdates.POS_TAB_F04').input().on('change', function () {
                if (editorNP.field('ProductUpdates.POS_TAB_F04').val() == '6' || editorNP.field('ProductUpdates.POS_TAB_F04').val() == '17' || editorNP.field('ProductUpdates.POS_TAB_F04').val() == '3') {
                    editorNP.field('ProductUpdates.LIKE_TAB_F122').show();
                } else {
                    editorNP.field('ProductUpdates.LIKE_TAB_F122').hide();
                    editorNP.field('ProductUpdates.LIKE_TAB_F122').val('');
                }
            });

            // New Product Form: on selection of is Mettler required?
            editorNP.field('ProductUpdates.ismettlerrequired').input().on('change', function () {
                if (editorNP.field('ProductUpdates.ismettlerrequired').val() == 'Yes') {

                    // Show Mettler fields
                    editorNP.field('ProductUpdates.ScalePLU').show();
                    editorNP.field('ProductUpdates.ScaleItemTypeID').show();
                    editorNP.field('ProductUpdates.TareNetWeight').show();
                    editorNP.field('ProductUpdates.ShelfLife').show();
                    editorNP.field('ProductUpdates.IngredientList').show();

                    // Set Force price to checked
                    editorNP.field('ProductUpdates.POS_TAB_F83').val("True");

                    // New Product Form: set scalable checkbox on Scale Item Type selection
                    editorNP.field('ProductUpdates.ScaleItemTypeID').input().on('change', function () {
                        if (editorNP.field('ProductUpdates.ScaleItemTypeID').val() == '1') {
                            editorNP.field('ProductUpdates.POS_TAB_F82').val("True");
                            editorNP.field('ProductUpdates.OBJ_TAB_F22').val("per lb.")
                            editorNP.field('ProductUpdates.PRICE_TAB_F31').hide();
                        } else if (editorNP.field('ProductUpdates.ScaleItemTypeID').val() == '2') {
                            editorNP.field('ProductUpdates.POS_TAB_F82').val("False");
                            editorNP.field('ProductUpdates.PRICE_TAB_F31').show();
                        }
                    });
                } else {

                    // Hide Mettler fields
                    editorNP.field('ProductUpdates.ScalePLU').hide();
                    editorNP.field('ProductUpdates.ScaleItemTypeID').hide();
                    editorNP.field('ProductUpdates.TareNetWeight').hide();
                    editorNP.field('ProductUpdates.PRICE_TAB_F31').hide();
                    editorNP.field('ProductUpdates.ShelfLife').hide();
                    editorNP.field('ProductUpdates.IngredientList').hide();

                    // Clear values when hidden
                    editorNP.field('ProductUpdates.ScalePLU').val('');
                    editorNP.field('ProductUpdates.ScaleItemTypeID').val('');
                    editorNP.field('ProductUpdates.TareNetWeight').val('');
                    editorNP.field('ProductUpdates.PRICE_TAB_F31').val('');
                    editorNP.field('ProductUpdates.ShelfLife').val('');
                    editorNP.field('ProductUpdates.IngredientList').val('');

                    // Set Force price to unchecked
                    editorNP.field('ProductUpdates.POS_TAB_F83').val("False");
                }
            });

            /***********************************************************/
            // Buttons

            // New Product Form: Like code x button
            $('<i id="clearLikeCode" class="fa fa-close"></i>').insertAfter(
                editorNP.field('ProductUpdates.LIKE_TAB_F122').input()
            );

            // New Product Form: clear like code select field
            $(document).on('click', '#clearLikeCode', function () {
                editorNP.field('ProductUpdates.LIKE_TAB_F122').val(null);
            });

            /***********************************************************/
            // Clear fields on backspace or delete key press

            // New Product Form: clear like code select field
            $(document).on('keydown', '#likecodeNP', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editorNP.field('ProductUpdates.LIKE_TAB_F122').val(null);
                }
            });

            /***********************************************************/
            // Form functions

            // New Product Form: adds a drop down arrow next to the product status select list
            var dropDownArrow = function (data, type, row) {
                if (type === 'display') {
                    return data + '<i class="fa fa-toggle-down" style="font-size:15px;color:black;float:right;padding-right:7%;"/>';
                }
                return data;
            };

            // New Product Form: activate an inline edit on click of a table cell
            $('#NewProducts').on('click', 'tbody td.editable', function (e) {
                editorNP.inline(this, {
                    submit: 'changed'
                });
            });

            // New Product Form: on row edit
            editorNP.on('initEdit', function () {

                // Set last updated date and last updated by upon edit
                editorNP.field('ProductUpdates.lastupdatedon').val(getDate());
                editorNP.field('ProductUpdates.lastupdatedby').val(currentUser);

                // Shows completed by info if product is marked as complete
                if (editorNP.field('ProductUpdates.productstatusID').val() == 4) {
                    editorNP.field('ProductUpdates.completeddate').show();
                    editorNP.field('ProductUpdates.completedby').show();
                }
                else {
                    editorNP.field('ProductUpdates.completeddate').hide();
                    editorNP.field('ProductUpdates.completedby').hide();
                }

                // Filter available categories on subdepartment selection
                editorNP.dependent('ProductUpdates.POS_TAB_F04', '/api/Categories');

                // Set default POS attributes
                editorNP.dependent('ProductUpdates.POS_TAB_F04', function () {
                    var subdepartment = editorNP.field('ProductUpdates.POS_TAB_F04').val();

                    // Get default subdepartment attributes from SMS
                    var GetSubdepartmentAttributes = $.ajax({
                        url: "api/GetSubdepartmentBounds",
                        type: "GET",
                        dataType: "json",
                        data: { 'F04': subdepartment },
                        error: function (error) {
                            console.log(`Error ${error}`);
                        }
                    });

                    // Apply default subdepartment attributes to fields
                    GetSubdepartmentAttributes.then(function (data) {

                        // SNAP
                        if (data.data[0].SMSSubdepartments.F79 == 1) {
                            editorNP.field('ProductUpdates.POS_TAB_F79').val("True");
                        } else {
                            editorNP.field('ProductUpdates.POS_TAB_F79').val("False");
                        }

                        // WIC
                        if (data.data[0].SMSSubdepartments.F178 == 1) {
                            editorNP.field('ProductUpdates.POS_TAB_F178').val("True");
                        } else {
                            editorNP.field('ProductUpdates.POS_TAB_F178').val("False");
                        }

                        // Taxable 1
                        if (data.data[0].SMSSubdepartments.F81 == 1) {
                            editorNP.field('ProductUpdates.POS_TAB_F81').val("True");
                        } else {
                            editorNP.field('ProductUpdates.POS_TAB_F81').val("False");
                        }

                        // Stop discount
                        if (data.data[0].SMSSubdepartments.F150 == 1) {
                            editorNP.field('ProductUpdates.POS_TAB_F150').val("True");
                        } else {
                            editorNP.field('ProductUpdates.POS_TAB_F150').val("False");
                        }

                        editorNP.field('ProductUpdates.POS_TAB_F171').val(data.data[0].SMSSubdepartments.F171);
                    });
                });
            });

            // New Product Form: set completed date and completed by upon submit if status is set to complete.
            editorNP.on('initSubmit', function () {
                if (editorNP.field('ProductUpdates.productstatusID').val() == 4) {
                    editorNP.field('ProductUpdates.completeddate').val(getDate());
                    editorNP.field('ProductUpdates.completedby').val(currentUser);
                }
            });


            /***********************************************************************************************************************/


            // DataTables table initilazation
            var table = $('#NewProducts').DataTable({
                // Enable or disable rendering of only necessary HTML elements
                deferRender: true,
                // Enable or disable automatic column width calculation.
                autoWidth: true,
                // Enable or disable the ability to select a row
                select: true,
                select: {
                    style: 'os',
                    style: 'multi',
                    selector: 'td:first-child'
                },
                // Default view showing only incomplete requests
                initComplete: function (e, dt, node, config) {
                    table
                        .column(1).search('^New Product$', true, false)
                        .column(2).search('^3 - Manager Review Completed$', true, false).draw()
                },
                // Column default settings
                columnDefs: [
                    //{ orderable: false, targets: 2 },
                    {
                        // Show up to 18 characters in brand field then hide with ellipses
                        targets: 4,
                        render: $.fn.dataTable.render.ellipsis(18)
                    }
                ],
                // Change New Products request type background green
                rowCallback: function (row, data, index) {
                    if (data.RequestTypes.requestname == "New Product") { $(row).find('td:eq(1)').css('background-color', '#FAC090'); }
                    if (data.RequestTypes.requestname !== "New Product") { $(row).find('td:eq(1)').css('background-color', '#E6EDD7'); }
                },
                // Default table lengths
                lengthMenu: [[20, 50, 100, -1], [20, 50, 100, "All"]],
                // Default table order
                order: [[9, "desc"]],
                // Table data source
                ajax: {
                    url: '/api/NewProducts'
                },
                // Table columns
                columns: [
                    {
                        data: null,
                        defaultContent: '',
                        className: 'select-checkbox',
                        orderable: false,
                        width: "2%"
                    },
                    { data: "RequestTypes.requestname", width: "9.5%"},
                    //{
                    //    data: null,
                    //    className: "center",
                    //    defaultContent: '<a href="" class="editor_edit"><i class="fa fa-pencil" style="font-size:18px;color:black"></i></a>',
                    //    width: "1.5%"
                    //},
                    { data: "Status.productupdatestatus", className: "editable", editField: "ProductUpdates.productstatusID", render: dropDownArrow, width: "13.5%" },
                    { data: "ProductUpdates.F01", width: "8%" },
                    { data: "ProductUpdates.OBJ_TAB_F155", width: "10.5%" },
                    { data: "ProductUpdates.OBJ_TAB_F29" },
                    { data: "ProductUpdates.OBJ_TAB_F22", width: "6%"},
                    {
                        data: "ProductUpdates.price_tab_f30",
                        "render": $.fn.dataTable.render.number(',', '.', 2, '$'),
                        width: "6%"
                    },
                    { data: "ProductUpdates.createdby", width: "6%" },
                    {
                        data: "ProductUpdates.datecreated", "render": function (value) {
                            if (value === null) return "";
                            return window.moment(value).format('M/D/YYYY h:mm:ss A');
                        }, width: "10%"
                    },
                    { data: "ProductUpdates.completeddate", visible: false}
                ],
                // Control button layout
                dom: '<"floatRight"B><"clear">lfrtip',
                // Buttons
                buttons: [
                    //{ extend: 'remove', editor: editorNP },
                    {
                        // Show completed today filter button
                        text: 'Show Completed Today', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .columns().order('')
                                .column(1).search('^New Product$', true, false)
                                .column(2).search('^4 - Completed$', true, false)
                                .column(10).search(new Date().getMonth() + 1 + "/" + new Date().getDate() + "/" + new Date().getFullYear(), true, false).column(9).order('desc').draw()

                            // Deselect any selected rows.
                            table.rows({ selected: true }).deselect();
                        }
                    },
                    {
                        // Show default view filter button
                        text: 'Show Default View', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .columns().order('')
                                .page.len(20)
                                .column(1).search('^New Product$', true, false)
                                .column(2).search('^3 - Manager Review Completed$', true, false).column(9).order('desc').draw()

                            // Deselect any selected rows.
                            table.rows({ selected: true }).deselect();
                        }
                    },
                    {
                        // Show all records filter button
                        text: 'Show All', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .columns().order('')
                                .column(1).search('^New Product$', true, false)
                                .column(2).search('^3 - Manager Review Completed$|^4 - Completed$', true, false).column(9).order('desc').draw()

                            // Deselect any selected rows.
                            table.rows({ selected: true }).deselect();
                        }
                    }
                    @*,
                    {
                        // Creates an Export New Products button and executes AJAX requests
                        text: 'Export', action: function (e, dt, node, config) {

                            // If no rows selected, display message
                            if (table.rows('.selected').count() == 0) {
                                alert("Please select a product to export.");
                                return;
                            }

                            // Confirm and begin export of new product(s) selected
                            if ( confirm( 'Export ' + table.rows('.selected').count() + ' product(s)?' ) ) {

                                // Gather data from each selected row
                                var data = table.rows({ selected: true }).data();

                                // Create array with selected rows data
                                var newProductArray = [];
                                var tempArray = {};
                                for ($i = 0; $i < data.length; $i++) {

                                    tempArray.store = data[$i].ProductUpdates.locationID

                                    // OBJ_TAB
                                    tempArray.F01 = pad(data[$i].ProductUpdates.F01, 13, 0);
                                    tempArray.F155 = data[$i].ProductUpdates.OBJ_TAB_F155
                                    tempArray.F29 = data[$i].ProductUpdates.OBJ_TAB_F29
                                    tempArray.F22 = data[$i].ProductUpdates.OBJ_TAB_F22
                                    tempArray.F255 = data[$i].ProductUpdates.OBJ_TAB_F255
                                    tempArray.F17 = data[$i].ProductUpdates.OBJ_TAB_F17
                                    tempArray.F16 = data[$i].ProductUpdates.OBJ_TAB_F16
                                    tempArray.F18 = data[$i].ProductUpdates.OBJ_TAB_F18

                                    // POS_TAB
                                    tempArray.F04 = data[$i].ProductUpdates.POS_TAB_F04
                                    tempArray.F02 = data[$i].ProductUpdates.OBJ_TAB_F29 + " " + data[$i].ProductUpdates.OBJ_TAB_F22
                                    tempArray.F79 = data[$i].ProductUpdates.POS_TAB_F79
                                    tempArray.F178 = data[$i].ProductUpdates.POS_TAB_F178
                                    if (data[$i].ProductUpdates.POS_TAB_F1120 == null || data[$i].ProductUpdates.POS_TAB_F1120 == "") {
                                        tempArray.F1120 = null;
                                    }
                                    else {
                                        tempArray.F1120 = data[$i].ProductUpdates.POS_TAB_F1120
                                    }
                                    tempArray.F83 = data[$i].ProductUpdates.POS_TAB_F83
                                    tempArray.F82 = data[$i].ProductUpdates.POS_TAB_F82
                                    tempArray.F81 = data[$i].ProductUpdates.POS_TAB_F81
                                    if (data[$i].ProductUpdates.POS_TAB_F96 == null || data[$i].ProductUpdates.POS_TAB_F96 == "") {
                                        tempArray.F96 = 0;
                                    }
                                    else {
                                        tempArray.F96 = 1;
                                    }
                                    tempArray.F171 = data[$i].ProductUpdates.POS_TAB_F171

                                    tempArray.F123 = data[$i].ProductUpdates.ScalePLU
                                    tempArray.F150 = data[$i].ProductUpdates.POS_TAB_F150

                                    // PRICE_TAB
                                    tempArray.F30 = data[$i].ProductUpdates.price_tab_f30
                                    if (data[$i].ProductUpdates.PRICE_TAB_F31 == null || data[$i].ProductUpdates.PRICE_TAB_F31 == "") {
                                        tempArray.F31 = data[$i].ProductUpdates.PRICE_TAB_F31 = 1;
                                    }
                                    else {
                                        tempArray.F31 = data[$i].ProductUpdates.PRICE_TAB_F31
                                        tempArray.F1120 = 'FW';
                                    }
                                    tempArray.F126 = data[$i].ProductUpdates.PRICE_TAB_F126
                                    tempArray.F122 = data[$i].ProductUpdates.LIKE_TAB_F122

                                    // COST_TAB
                                    tempArray.F27 = data[$i].ProductUpdates.COST_TAB_F27
                                    if (data[$i].ProductUpdates.COST_TAB_F26 == null || data[$i].ProductUpdates.COST_TAB_F26 == "" || data[$i].ProductUpdates.COST_TAB_F26 == 1) {
                                        tempArray.F26 = data[$i].ProductUpdates.COST_TAB_F26 = "na";
                                    }
                                    else {
                                        tempArray.F26 = data[$i].ProductUpdates.COST_TAB_F26
                                    }
                                    if (data[$i].ProductUpdates.COST_TAB_F19 == null || data[$i].ProductUpdates.COST_TAB_F19 == "") {
                                        tempArray.F19 = data[$i].ProductUpdates.COST_TAB_F19 = 1;
                                    }
                                    else {
                                        tempArray.F19 = data[$i].ProductUpdates.COST_TAB_F19
                                    }
                                    if (data[$i].ProductUpdates.COST_TAB_F38 == null || data[$i].ProductUpdates.COST_TAB_F38 == "") {
                                        tempArray.F38 = data[$i].ProductUpdates.COST_TAB_F38 = 0.01;
                                    }
                                    else {
                                        tempArray.F38 = data[$i].ProductUpdates.COST_TAB_F38
                                    }

                                    // LABEL_TAB
                                    switch ( data[$i].ProductUpdates.labelID )
                                    {
                                        case "1":
                                            tempArray.F95 = "1 - Full Regular Price.lbz";
                                            break;
                                        case "2":
                                            tempArray.F95 = "2 - Half Regular Price.lbz";
                                            break;
                                        case "3":
                                            tempArray.F95 = "3 - Full No Price.lbz";
                                            break;
                                        case "4":
                                            tempArray.F95 = "4 - Half No Price.lbz";
                                            break;
                                        case "5":
                                            tempArray.F95 = "5 - No Label - Do Not Print";
                                            break;
                                    };

                                    // SCL_TAB
                                    tempArray.F266 = data[$i].ProductUpdates.ScalePLU
                                    tempArray.F258 = data[$i].ProductUpdates.TareNetWeight
                                    tempArray.F264 = data[$i].ProductUpdates.ShelfLife
                                    tempArray.Mettler = data[$i].ProductUpdates.ismettlerrequired

                                    // SCL_TXT_TAB
                                    // Ingredients1
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F297 = null;
                                    }
                                    else {
                                        tempArray.F297 = data[$i].ProductUpdates.IngredientList.substring(0, 252)
                                    }

                                    // Ingredients2
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1837 = null;
                                    }
                                    else {
                                        tempArray.F1837 = data[$i].ProductUpdates.IngredientList.substring(253, 505)
                                    }

                                    // Ingredients3
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1838 = null;
                                    }
                                    else {
                                        tempArray.F1838 = data[$i].ProductUpdates.IngredientList.substring(506, 758)
                                    }

                                    // Ingredients4
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1839 = null;
                                    }
                                    else {
                                        tempArray.F1839 = data[$i].ProductUpdates.IngredientList.substring(759, 1011)
                                    }

                                    // Ingredients5
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1853 = null;
                                    }
                                    else {
                                        tempArray.F1853 = data[$i].ProductUpdates.IngredientList.substring(1012, 1264)
                                    }

                                    // Ingredients6
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1854 = null;
                                    }
                                    else {
                                        tempArray.F1854 = data[$i].ProductUpdates.IngredientList.substring(1265, 1517)
                                    }

                                    // Ingredients7
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1855 = null;
                                    }
                                    else {
                                        tempArray.F1855 = data[$i].ProductUpdates.IngredientList.substring(1518, 1770)
                                    }

                                    // Ingredients8
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1856 = null;
                                    }
                                    else {
                                        tempArray.F1856 = data[$i].ProductUpdates.IngredientList.substring(1771, 2023)
                                    }

                                    // Ingredients9
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1968 = null;
                                    }

                                    else {
                                        tempArray.F1968 = data[$i].ProductUpdates.IngredientList.substring(2024, 2276)
                                    }

                                    // Ingredients10
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1969 = null;
                                    }
                                    else {
                                        tempArray.F1969 = data[$i].ProductUpdates.IngredientList.substring(2277, 2529)
                                    }

                                    // Ingredients11
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1970 = null;
                                    }
                                    else {
                                        tempArray.F1970 = data[$i].ProductUpdates.IngredientList.substring(2530, 2782)
                                    }

                                    // Ingredients12
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1971 = null;
                                    }
                                    else {
                                        tempArray.F1971 = data[$i].ProductUpdates.IngredientList.substring(2783, 3035)
                                    }

                                    // Ingredients13
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1972 = null;
                                    }
                                    else {
                                        tempArray.F1972 = data[$i].ProductUpdates.IngredientList.substring(3036, 3288)
                                    }

                                    newProductArray.push(tempArray);
                                    tempArray = {};
                                };

                                // Recursive function to export selected new products.
                                function exportItem() {
                                    // Check length, if 0 quit loop.
                                    if (newProductArray.length) {
                                        // Make a call always referencing the first element in the array.
                                        $.ajax({
                                        url: '@Url.Action("CreateNewProduct", "NewProduct")',
                                        type: "POST",
                                            data: {
                                                'Store': newProductArray[0].store,

                                                // OBJ_TAB
                                                'UPC': newProductArray[0].F01,
                                                'Brand': newProductArray[0].F155,
                                                'ShortDescription': newProductArray[0].F29,
                                                'Size': newProductArray[0].F22,
                                                'LongDescription': newProductArray[0].F255,
                                                'Category': newProductArray[0].F17,
                                                'Family': newProductArray[0].F16,
                                                'Report': newProductArray[0].F18,

                                                // POS_TAB
                                                'Subdepartment': newProductArray[0].F04,
                                                'POSDescription': newProductArray[0].F02,
                                                'SNAP': newProductArray[0].F79,
                                                'WIC': newProductArray[0].F178,
                                                'Others': newProductArray[0].F1120,
                                                'ForcePrice': newProductArray[0].F83,
                                                'Scalable': newProductArray[0].F82,
                                                'Tax1': newProductArray[0].F81,
                                                'Tax2': newProductArray[0].F96,
                                                'ClientAge': newProductArray[0].F171,
                                                'PLU': newProductArray[0].F123,
                                                'StopDiscount': newProductArray[0].F150,

                                                // PRICE_TAB
                                                'Retail': newProductArray[0].F30,
                                                'PriceLevel': '1',
                                                'Quantity': newProductArray[0].F31,
                                                'Like': newProductArray[0].F122,

                                                // COST_TAB
                                                'VendorID': newProductArray[0].F27,
                                                'ReorderCode': newProductArray[0].F26,
                                                'Case': newProductArray[0].F19,
                                                'Cost': newProductArray[0].F38,

                                                // LABEL_TAB
                                                'Label': newProductArray[0].F95,

                                                // SCL_TAB
                                                'Mettler': newProductArray[0].Mettler,
                                                'Tare': newProductArray[0].F258,
                                                'ProdLife': newProductArray[0].F264,
                                                'TextLink': newProductArray[0].F266,

                                                // SCL_TXT_TAB
                                                'Ingredients1': newProductArray[0].F297,
                                                'Ingredients2': newProductArray[0].F1837,
                                                'Ingredients3': newProductArray[0].F1838,
                                                'Ingredients4': newProductArray[0].F1839,
                                                'Ingredients5': newProductArray[0].F1853,
                                                'Ingredients6': newProductArray[0].F1854,
                                                'Ingredients7': newProductArray[0].F1855,
                                                'Ingredients8': newProductArray[0].F1856,
                                                'Ingredients9': newProductArray[0].F1968,
                                                'Ingredients10': newProductArray[0].F1969,
                                                'Ingredients11': newProductArray[0].F1970,
                                                'Ingredients12': newProductArray[0].F1971,
                                                'Ingredients13': newProductArray[0].F1972
                                            },
                                            error: function (error) {
                                                console.log(`Error ${error}`);
                                            },
                                            success: function () {

                                                // Remove first element in array and call exportItem again to deal with the next element.
                                                newProductArray.shift();
                                                exportItem();
                                            }
                                        });
                                    }
                                };

                                // Call to the recurisve exportItem() function.
                                exportItem();

                                // Repeating function to check for proper loading of category field before submitting field.
                                function checkForCategory(callback, delay, repetitions) {
                                    var x = 0;
                                    var intervalID = window.setInterval(function () {

                                        callback();

                                        // If category field is loaded, submit form and clear interval; else, keep looping
                                        if (editorNP.field('ProductUpdates.OBJ_TAB_F17').val()) {

                                            // Submit form
                                            editorNP.submit();

                                            // Stop timer
                                            window.clearInterval(intervalID);
                                        }

                                        // If function loops repitition times, alert user and cancel function loop
                                        if (++x === repetitions) {

                                            // Alert user export has failed, because the category didn't load in time.
                                            alert("Export failed!");

                                            // Close form
                                            editorNP.close();

                                            // Stop timer
                                            window.clearInterval(intervalID);
                                        }

                                    }, delay);
                                }

                                // Gather all selected rows.
                                var rows = table.rows({ selected: true }).indexes();

                                // If exporting 1 product, use DataTables set method; else, use DataTables multiSet method.
                                if (rows.length == 1) {

                                    // Get selected row's id.
                                    var row = table.row(rows);

                                    // Open hidden edit form and update fields.
                                    editorNP.edit(row, false)
                                        .set('ProductUpdates.completeddate', getDate())
                                        .set('ProductUpdates.completedby', currentUser)
                                        .set('ProductUpdates.productstatusID', 4);

                                    // Function to check if category has loaded every half a second for 30 seconds.
                                    checkForCategory(function () {}, 500, 60);

                                    // Pause execution long enough to let dependent category field load then submit.
                                    //setTimeout(() => { editorNP.submit(); }, 2000);
                                } else {
                                    // Open hidden edit form and update fields for multiple products.
                                    editorNP.edit(rows, false);

                                    // Loop through each product updating fields.
                                    var loop = function () {
                                        $.each(rows, function (i, rowIdx) {
                                            var row = table.row(rowIdx);

                                            editorNP.field('ProductUpdates.completeddate').multiSet(row.id(), getDate());
                                            editorNP.field('ProductUpdates.completedby').multiSet(row.id(), currentUser);
                                            editorNP.field('ProductUpdates.productstatusID').multiSet(row.id(), 4);
                                        });
                                    };

                                    // Loop is complete, submit form.
                                    $.when(loop()).done(function () {
                                        editorNP.submit();
                                    });
                                }

                                // Display how many records were exported.
                                alert('Exported ' + table.rows('.selected').count() + ' products!');

                                // Deselect any selected row on export.
                                table.rows({ selected: true }).deselect();

                            } else {
                                alert("Export canceled!")
                            };
                        },

                    },
                    {
                        // Redirects user back to main Product Maintenance page
                        text: 'Back', action: function () { window.location = 'ProductMaintenance' }
                    }*@
                ]
            });

            // Opens DataTables Editor New Product form
            $('#exportNewProducts').click(function () {
                // If no rows selected, display message
                            if (table.rows('.selected').count() == 0) {
                                alert("Please select a product to export.");
                                return;
                            }

                            // Confirm and begin export of new product(s) selected
                            if ( confirm( 'Export ' + table.rows('.selected').count() + ' product(s)?' ) ) {

                                // Gather data from each selected row
                                var data = table.rows({ selected: true }).data();

                                // Create array with selected rows data
                                var newProductArray = [];
                                var tempArray = {};
                                for ($i = 0; $i < data.length; $i++) {

                                    tempArray.store = data[$i].ProductUpdates.locationID

                                    // OBJ_TAB
                                    tempArray.F01 = pad(data[$i].ProductUpdates.F01, 13, 0);
                                    tempArray.F155 = data[$i].ProductUpdates.OBJ_TAB_F155
                                    tempArray.F29 = data[$i].ProductUpdates.OBJ_TAB_F29
                                    tempArray.F22 = data[$i].ProductUpdates.OBJ_TAB_F22
                                    tempArray.F255 = data[$i].ProductUpdates.OBJ_TAB_F255
                                    tempArray.F17 = data[$i].ProductUpdates.OBJ_TAB_F17
                                    tempArray.F16 = data[$i].ProductUpdates.OBJ_TAB_F16
                                    tempArray.F18 = data[$i].ProductUpdates.OBJ_TAB_F18

                                    // POS_TAB
                                    tempArray.F04 = data[$i].ProductUpdates.POS_TAB_F04
                                    tempArray.F02 = data[$i].ProductUpdates.OBJ_TAB_F29 + " " + data[$i].ProductUpdates.OBJ_TAB_F22
                                    tempArray.F79 = data[$i].ProductUpdates.POS_TAB_F79
                                    tempArray.F178 = data[$i].ProductUpdates.POS_TAB_F178
                                    if (data[$i].ProductUpdates.POS_TAB_F1120 == null || data[$i].ProductUpdates.POS_TAB_F1120 == "") {
                                        tempArray.F1120 = null;
                                    }
                                    else {
                                        tempArray.F1120 = data[$i].ProductUpdates.POS_TAB_F1120
                                    }
                                    tempArray.F83 = data[$i].ProductUpdates.POS_TAB_F83
                                    tempArray.F82 = data[$i].ProductUpdates.POS_TAB_F82
                                    tempArray.F81 = data[$i].ProductUpdates.POS_TAB_F81
                                    if (data[$i].ProductUpdates.POS_TAB_F96 == null || data[$i].ProductUpdates.POS_TAB_F96 == "") {
                                        tempArray.F96 = 0;
                                    }
                                    else {
                                        tempArray.F96 = 1;
                                    }
                                    tempArray.F171 = data[$i].ProductUpdates.POS_TAB_F171

                                    tempArray.F123 = data[$i].ProductUpdates.ScalePLU
                                    tempArray.F150 = data[$i].ProductUpdates.POS_TAB_F150

                                    // PRICE_TAB
                                    tempArray.F30 = data[$i].ProductUpdates.price_tab_f30
                                    if (data[$i].ProductUpdates.PRICE_TAB_F31 == null || data[$i].ProductUpdates.PRICE_TAB_F31 == "") {
                                        tempArray.F31 = data[$i].ProductUpdates.PRICE_TAB_F31 = 1;
                                    }
                                    else {
                                        tempArray.F31 = data[$i].ProductUpdates.PRICE_TAB_F31
                                        tempArray.F1120 = 'FW';
                                    }
                                    tempArray.F126 = data[$i].ProductUpdates.PRICE_TAB_F126
                                    tempArray.F122 = data[$i].ProductUpdates.LIKE_TAB_F122

                                    // COST_TAB
                                    tempArray.F27 = data[$i].ProductUpdates.COST_TAB_F27
                                    if (data[$i].ProductUpdates.COST_TAB_F26 == null || data[$i].ProductUpdates.COST_TAB_F26 == "" || data[$i].ProductUpdates.COST_TAB_F26 == 1) {
                                        tempArray.F26 = data[$i].ProductUpdates.COST_TAB_F26 = "na";
                                    }
                                    else {
                                        tempArray.F26 = data[$i].ProductUpdates.COST_TAB_F26
                                    }
                                    if (data[$i].ProductUpdates.COST_TAB_F19 == null || data[$i].ProductUpdates.COST_TAB_F19 == "") {
                                        tempArray.F19 = data[$i].ProductUpdates.COST_TAB_F19 = 1;
                                    }
                                    else {
                                        tempArray.F19 = data[$i].ProductUpdates.COST_TAB_F19
                                    }
                                    if (data[$i].ProductUpdates.COST_TAB_F38 == null || data[$i].ProductUpdates.COST_TAB_F38 == "") {
                                        tempArray.F38 = data[$i].ProductUpdates.COST_TAB_F38 = 0.01;
                                    }
                                    else {
                                        tempArray.F38 = data[$i].ProductUpdates.COST_TAB_F38
                                    }

                                    // LABEL_TAB
                                    switch ( data[$i].ProductUpdates.labelID )
                                    {
                                        case "1":
                                            tempArray.F95 = "1 - Full Regular Price.lbz";
                                            break;
                                        case "2":
                                            tempArray.F95 = "2 - Half Regular Price.lbz";
                                            break;
                                        case "3":
                                            tempArray.F95 = "3 - Full No Price.lbz";
                                            break;
                                        case "4":
                                            tempArray.F95 = "4 - Half No Price.lbz";
                                            break;
                                        case "5":
                                            tempArray.F95 = "5 - No Label - Do Not Print";
                                            break;
                                    };

                                    // SCL_TAB
                                    tempArray.F266 = data[$i].ProductUpdates.ScalePLU
                                    tempArray.F258 = data[$i].ProductUpdates.TareNetWeight
                                    tempArray.F264 = data[$i].ProductUpdates.ShelfLife
                                    tempArray.Mettler = data[$i].ProductUpdates.ismettlerrequired

                                    // SCL_TXT_TAB
                                    // Ingredients1
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F297 = null;
                                    }
                                    else {
                                        tempArray.F297 = data[$i].ProductUpdates.IngredientList.substring(0, 252)
                                    }

                                    // Ingredients2
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1837 = null;
                                    }
                                    else {
                                        tempArray.F1837 = data[$i].ProductUpdates.IngredientList.substring(253, 505)
                                    }

                                    // Ingredients3
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1838 = null;
                                    }
                                    else {
                                        tempArray.F1838 = data[$i].ProductUpdates.IngredientList.substring(506, 758)
                                    }

                                    // Ingredients4
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1839 = null;
                                    }
                                    else {
                                        tempArray.F1839 = data[$i].ProductUpdates.IngredientList.substring(759, 1011)
                                    }

                                    // Ingredients5
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1853 = null;
                                    }
                                    else {
                                        tempArray.F1853 = data[$i].ProductUpdates.IngredientList.substring(1012, 1264)
                                    }

                                    // Ingredients6
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1854 = null;
                                    }
                                    else {
                                        tempArray.F1854 = data[$i].ProductUpdates.IngredientList.substring(1265, 1517)
                                    }

                                    // Ingredients7
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1855 = null;
                                    }
                                    else {
                                        tempArray.F1855 = data[$i].ProductUpdates.IngredientList.substring(1518, 1770)
                                    }

                                    // Ingredients8
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1856 = null;
                                    }
                                    else {
                                        tempArray.F1856 = data[$i].ProductUpdates.IngredientList.substring(1771, 2023)
                                    }

                                    // Ingredients9
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1968 = null;
                                    }

                                    else {
                                        tempArray.F1968 = data[$i].ProductUpdates.IngredientList.substring(2024, 2276)
                                    }

                                    // Ingredients10
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1969 = null;
                                    }
                                    else {
                                        tempArray.F1969 = data[$i].ProductUpdates.IngredientList.substring(2277, 2529)
                                    }

                                    // Ingredients11
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1970 = null;
                                    }
                                    else {
                                        tempArray.F1970 = data[$i].ProductUpdates.IngredientList.substring(2530, 2782)
                                    }

                                    // Ingredients12
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1971 = null;
                                    }
                                    else {
                                        tempArray.F1971 = data[$i].ProductUpdates.IngredientList.substring(2783, 3035)
                                    }

                                    // Ingredients13
                                    if (data[$i].ProductUpdates.IngredientList == null || data[$i].ProductUpdates.IngredientList == "") {
                                        tempArray.F1972 = null;
                                    }
                                    else {
                                        tempArray.F1972 = data[$i].ProductUpdates.IngredientList.substring(3036, 3288)
                                    }

                                    newProductArray.push(tempArray);
                                    tempArray = {};
                                };

                                // Recursive function to export selected new products.
                                function exportItem() {
                                    // Check length, if 0 quit loop.
                                    if (newProductArray.length) {
                                        // Make a call always referencing the first element in the array.
                                        $.ajax({
                                        url: '@Url.Action("CreateNewProduct", "NewProduct")',
                                        type: "POST",
                                            data: {
                                                'Store': newProductArray[0].store,

                                                // OBJ_TAB
                                                'UPC': newProductArray[0].F01,
                                                'Brand': newProductArray[0].F155,
                                                'ShortDescription': newProductArray[0].F29,
                                                'Size': newProductArray[0].F22,
                                                'LongDescription': newProductArray[0].F255,
                                                'Category': newProductArray[0].F17,
                                                'Family': newProductArray[0].F16,
                                                'Report': newProductArray[0].F18,

                                                // POS_TAB
                                                'Subdepartment': newProductArray[0].F04,
                                                'POSDescription': newProductArray[0].F02,
                                                'SNAP': newProductArray[0].F79,
                                                'WIC': newProductArray[0].F178,
                                                'Others': newProductArray[0].F1120,
                                                'ForcePrice': newProductArray[0].F83,
                                                'Scalable': newProductArray[0].F82,
                                                'Tax1': newProductArray[0].F81,
                                                'Tax2': newProductArray[0].F96,
                                                'ClientAge': newProductArray[0].F171,
                                                'PLU': newProductArray[0].F123,
                                                'StopDiscount': newProductArray[0].F150,

                                                // PRICE_TAB
                                                'Retail': newProductArray[0].F30,
                                                'PriceLevel': '1',
                                                'Quantity': newProductArray[0].F31,
                                                'Like': newProductArray[0].F122,

                                                // COST_TAB
                                                'VendorID': newProductArray[0].F27,
                                                'ReorderCode': newProductArray[0].F26,
                                                'Case': newProductArray[0].F19,
                                                'Cost': newProductArray[0].F38,

                                                // LABEL_TAB
                                                'Label': newProductArray[0].F95,

                                                // SCL_TAB
                                                'Mettler': newProductArray[0].Mettler,
                                                'Tare': newProductArray[0].F258,
                                                'ProdLife': newProductArray[0].F264,
                                                'TextLink': newProductArray[0].F266,

                                                // SCL_TXT_TAB
                                                'Ingredients1': newProductArray[0].F297,
                                                'Ingredients2': newProductArray[0].F1837,
                                                'Ingredients3': newProductArray[0].F1838,
                                                'Ingredients4': newProductArray[0].F1839,
                                                'Ingredients5': newProductArray[0].F1853,
                                                'Ingredients6': newProductArray[0].F1854,
                                                'Ingredients7': newProductArray[0].F1855,
                                                'Ingredients8': newProductArray[0].F1856,
                                                'Ingredients9': newProductArray[0].F1968,
                                                'Ingredients10': newProductArray[0].F1969,
                                                'Ingredients11': newProductArray[0].F1970,
                                                'Ingredients12': newProductArray[0].F1971,
                                                'Ingredients13': newProductArray[0].F1972
                                            },
                                            error: function (error) {
                                                console.log(`Error ${error}`);
                                            },
                                            success: function () {

                                                // Remove first element in array and call exportItem again to deal with the next element.
                                                newProductArray.shift();
                                                exportItem();
                                            }
                                        });
                                    }
                                };

                                // Call to the recurisve exportItem() function.
                                exportItem();

                                // Repeating function to check for proper loading of category field before submitting field.
                                function checkForCategory(callback, delay, repetitions) {
                                    var x = 0;
                                    var intervalID = window.setInterval(function () {

                                        callback();

                                        // If category field is loaded, submit form and clear interval; else, keep looping
                                        if (editorNP.field('ProductUpdates.OBJ_TAB_F17').val()) {

                                            // Submit form
                                            editorNP.submit();

                                            // Stop timer
                                            window.clearInterval(intervalID);
                                        }

                                        // If function loops repitition times, alert user and cancel function loop
                                        if (++x === repetitions) {

                                            // Alert user export has failed, because the category didn't load in time.
                                            alert("Export failed!");

                                            // Close form
                                            editorNP.close();

                                            // Stop timer
                                            window.clearInterval(intervalID);
                                        }

                                    }, delay);
                                }

                                // Gather all selected rows.
                                var rows = table.rows({ selected: true }).indexes();

                                // If exporting 1 product, use DataTables set method; else, use DataTables multiSet method.
                                if (rows.length == 1) {

                                    // Get selected row's id.
                                    var row = table.row(rows);

                                    // Open hidden edit form and update fields.
                                    editorNP.edit(row, false)
                                        .set('ProductUpdates.completeddate', getDate())
                                        .set('ProductUpdates.completedby', currentUser)
                                        .set('ProductUpdates.productstatusID', 4);

                                    // Function to check if category has loaded every half a second for 30 seconds.
                                    checkForCategory(function () {}, 500, 60);

                                    // Pause execution long enough to let dependent category field load then submit.
                                    //setTimeout(() => { editorNP.submit(); }, 2000);
                                } else {
                                    // Open hidden edit form and update fields for multiple products.
                                    editorNP.edit(rows, false);

                                    // Loop through each product updating fields.
                                    var loop = function () {
                                        $.each(rows, function (i, rowIdx) {
                                            var row = table.row(rowIdx);

                                            editorNP.field('ProductUpdates.completeddate').multiSet(row.id(), getDate());
                                            editorNP.field('ProductUpdates.completedby').multiSet(row.id(), currentUser);
                                            editorNP.field('ProductUpdates.productstatusID').multiSet(row.id(), 4);
                                        });
                                    };

                                    // Loop is complete, submit form.
                                    $.when(loop()).done(function () {
                                        editorNP.submit();
                                    });
                                }

                                // Display how many records were exported.
                                alert('Exported ' + table.rows('.selected').count() + ' products!');

                                // Deselect any selected row on export.
                                table.rows({ selected: true }).deselect();

                            } else {
                                alert("Export canceled!")
                            };
            });

            // Delete selected products
            $('#deleteNewProducts').click(function () {
                var rows = table.rows('.selected');
                rows.delete({
                    buttons: [
                        { label: 'Cancel', fn: function () { this.close(); } },
                        'Delete'
                    ]
                });
            });

            // Go to New Products page
            $('#getProductUpdates').click(function () {
                window.location = 'ProductUpdates'
            });

            // Go to Product Updates page
            $('#getProductMaintenance').click(function () {
                window.location = 'ProductMaintenance'
            });

            // New Products: adds or removes selected class to column with toggle-all class.
            table.on('select.dt deselect.dt', function (evtObj) {
                // Amount of currenty displayed rows.
                var count = table.page.info().end;

                // Amount of currently selected rows.
                var sel = table.rows(".selected").nodes().length;

                if (count === sel) {

                    $(".toggle-all").closest("tr").addClass("selected");
                }
                else {

                    $(".toggle-all").closest("tr").removeClass("selected");
                }

            });

            // New Products: checks or unchecks all checkboxes in toggle-all column.
            $('#NewProducts').on('click', '.toggle-all', function () {
                $(this).closest("tr").toggleClass("selected");
                if ($(this).closest("tr").hasClass("selected")) {
                    table.rows({ page: 'current' }).select();
                }
                else {
                    table.rows({ page: 'current' }).deselect();
                }
            });

            // New Products: adds edit pencil in each cell
            $('#NewProducts').on('click', 'a.editor_edit', function (e) {
                e.preventDefault();

                editorNP.edit($(this).closest('tr'), {
                    title: 'Edit entry',
                    buttons:
                        [
                            {
                                text: 'Update', action: function () {
                                    editorNP.field('ProductUpdates.lastupdatedon').val(getDate());
                                    editorNP.field('ProductUpdates.lastupdatedby').val(currentUser);
                                    this.submit();
                                }
                            }
                        ]
                });
            });
        });
    </script>
} 