@{
    ViewBag.Title = "Product Maintenance";
    var CreatedBy = Request["CreatedBy"];
}

<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />

    <title>Product Maintenance</title>

    <link rel="stylesheet" type="text/css" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/1.6.1/css/buttons.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/select/1.3.1/css/select.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://editor.datatables.net/extensions/Editor/css/editor.dataTables.min.css" />
</head>
<body class="dataTables">
    <div class="productUpdatesContainer">
        <h1><img src="~/Content/PFC_Logo_128px.png" width="100" height="100">        Product Updates</h1>
        <br />
        <table id="ProductUpdates" class="display text-nowrap compact" style="width:100%">
            <thead>
                <tr>
                    <th>Request Type</th>
                    <th></th>
                    <th>Status</th>
                    <th>Item Code</th>
                    <th>Brand</th>
                    <th>Description</th>
                    <th>Size</th>
                    <th>TPR Start</th>
                    <th>TPR End</th>
                    <th>TPR Price</th>
                    <th>Retail Price</th>
                    <th>Created By</th>
                    <th>Date Created</th>
                    <th style="display:none;"></th>
                    <th style="display:none;">Location</th>
                    <th style="display:none;">Notes</th>
                    <th style="display:none;">Ingredients</th>
                    <th style="display:none;">Margin</th>
                </tr>
            </thead>
        </table>
    </div>
</body>
</html>

@section scripts{
    <script type="text/javascript" charset="utf-8" src="https://code.jquery.com/jquery-3.3.1.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.6.1/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.flash.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.html5.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.print.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/select/1.3.1/js/dataTables.select.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/responsive/1.0.7/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/plug-ins/1.10.19/sorting/datetime-moment.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/plug-ins/1.10.20/dataRender/ellipsis.js"></script>

    <script>

        // Current logged in user's name
        var currentUser = "@CreatedBy";

        // Activates all code inside when DOM of page is loaded
        $(document).ready(function () {

            // Moment date format
            $.fn.dataTable.moment('M/D/YYYY h:mm:ss A');

            // Disable autocomplete on form fields
            $.extend(true, $.fn.dataTable.Editor.Field.defaults, {
                attr: {
                    autocomplete: 'off'
                }
            });

            // Form padding
            $.extend($.fn.dataTable.Editor.display.lightbox.conf, {
                windowPadding: 66
            });

            // Promotion Report Form
            var editorPR = new $.fn.dataTable.Editor({
                ajax: '/api/ProductUpdates',
                table: '#ProductUpdates',
                formOptions: {
                    main: {
                        onReturn: false
                    }
                },
                fields: [
                    {
                        label: "Product Update Type:",
                        name: "ProductUpdates.requesttypeID",
                        type: "select",
                        placeholder: "Select a request type"
                    }, {
                        label: "Location:",
                        name: "promolocations",
                        type: "select",
                        placeholder: "Select a location",
                        options: [
                            { label: "La Crosse store", value: 1 },
                            { label: "Rochester store", value: 2 },
                            { label: "Both stores", value: 3 },
                            { label: "All", value: 4}
                        ]
                    }, {
                        label: "TPR Start:",
                        name: "ProductUpdates.promotprstartdate",
                        type: "datetime",
                        format: "M/D/YYYY"
                    }, {
                        label: "TPR End:",
                        name: "ProductUpdates.promotprenddate",
                        type: "datetime",
                        format: "M/D/YYYY"
                    }
                ]
            });


            /***********************************************************************************************************************/


            // Update An Existing Product Form
            var editor = new $.fn.dataTable.Editor({
                ajax: '/api/ProductUpdates',
                table: '#ProductUpdates',
                fields: [
                    {
                        label: "Status:",
                        name: "ProductUpdates.productstatusID",
                        type: "select",
                        def: "3"
                    }, {
                        label: "Product Update Type:",
                        name: "ProductUpdates.requesttypeID",
                        type: "select",
                        placeholder: "Select a request type"
                    }, {
                        label: "Location:",
                        name: "ProductUpdates.locationID",
                        type: "select",
                        placeholder: "Select a location"
                    }, {
                        label: "Mettler Product:",
                        name: "ProductUpdates.ismettlerrequired",
                        type: "select",
                        options: ["Yes", "No"],
                        placeholder: "Select an option"
                    }, {
                        label: "Shelf Tag:",
                        name: "ProductUpdates.labelID",
                        type: "select",
                        placeholder: "Select a label size"
                    }, {
                        label: "UPC/PLU:",
                        name: "ProductUpdates.F01"
                    }, {
                        label: "Mettler PLU:",
                        name: "ProductUpdates.ScalePLU",
                        attr: {
                            type: 'number'
                        }
                    }, {
                        label: "Vendor:",
                        name: "ProductUpdates.COST_TAB_F27",
                        type: "select",
                        placeholder: "Select a vendor"
                    }, {
                        label: "Reorder Code:",
                        name: "ProductUpdates.COST_TAB_F26"
                    }, {
                        label: "Retail Margin:",
                        name: "ProductUpdates.PRICE_TAB_F49",
                        attr: {
                            type: 'number',
                            step: 'any'
                        }
                    }, {
                        label: "Items Per Case:",
                        name: "ProductUpdates.COST_TAB_F19",
                        attr: {
                            type: 'number'
                        }
                    }, {
                        label: "Case Cost:",
                        name: "ProductUpdates.COST_TAB_F38",
                        attr: {
                            type: 'number',
                            step: 'any'
                        }
                    }, {
                        label: "Retail Price:",
                        name: "ProductUpdates.price_tab_f30",
                        attr: {
                            type: 'number',
                            step: 'any'
                        }
                    }, {
                        label: "TPR Price:",
                        name: "ProductUpdates.promotprprice",
                        attr: {
                            type: 'number',
                            step: 'any'
                        }
                    }, {
                        label: "TPR Start:",
                        name: "ProductUpdates.promotprstartdate",
                        type: "datetime",
                        format: "M/DD/YYYY"
                    }, {
                        label: "TPR End:",
                        name: "ProductUpdates.promotprenddate",
                        type: "datetime",
                        format: "M/DD/YYYY"
                    }, {
                        label: "Sign:",
                        name: "ProductUpdates.signID",
                        type: "select",
                        placeholder: "Select a sign size"
                    }, {
                        label: "Brand:",
                        name: "ProductUpdates.OBJ_TAB_F155",
                        type: "select",
                        placeholder: "Select a brand",
                        id: "brandPU"
                    }, {
                        label: "Shelf Tag & Receipt Description:",
                        name: "ProductUpdates.OBJ_TAB_F29"
                    }, {
                        label: "Size:",
                        name: "ProductUpdates.OBJ_TAB_F22"
                    }, {
                        label: "Sign Description:",
                        name: "ProductUpdates.OBJ_TAB_F255"
                    }, {
                        label: "Subdepartment:",
                        name: "ProductUpdates.POS_TAB_F04",
                        type: "select",
                        placeholder: "Select a subdepartment",
                        id: "subdepartmentPU"
                    }, {
                        label: "Category:",
                        name: "ProductUpdates.OBJ_TAB_F17",
                        optionsPair: {
                            label: 'F1023',
                            value: 'F17'
                        },
                        type: "select",
                        placeholder: "Select a category",
                        id: "categoryPU"
                    }, {
                        label: "Report:",
                        name: "ProductUpdates.OBJ_TAB_F18",
                        type: "select",
                        placeholder: "Select a report",
                        id: "reportPU"
                    }, {
                        label: "Family Button:",
                        name: "ProductUpdates.OBJ_TAB_F16",
                        type: "select",
                        placeholder: "Select a family button",
                        id: "familyPU"
                    }, {
                        label: "Like:",
                        name: "ProductUpdates.LIKE_TAB_F122",
                        type: "select",
                        placeholder: "Select a like code",
                        id: "likecodePU"
                    }, {
                        label: "SNAP:",
                        name: "ProductUpdates.POS_TAB_F79",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Scalable:",
                        name: "ProductUpdates.POS_TAB_F82",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Taxable:",
                        name: "ProductUpdates.POS_TAB_F81",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Taxable 2:",
                        name: "ProductUpdates.POS_TAB_F96",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        type: "checkbox",
                        type: "hidden",
                        unselectedValue: 0,
                        separator: "|"
                    }, {
                        label: "Stop Discount:",
                        name: "ProductUpdates.POS_TAB_F150",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0,
                        type: "hidden"
                    }, {
                        label: "Force Price:",
                        name: "ProductUpdates.POS_TAB_F83",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0,
                        type: "hidden"
                    }, {
                        label: "WIC:",
                        name: "ProductUpdates.POS_TAB_F178",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Client Age:",
                        name: "ProductUpdates.POS_TAB_F171",
                        type: "hidden"
                    }, {
                        label: "Notes:",
                        name: "ProductUpdates.AdditionalRequestNotes",
                        type:"textarea"
                    }, {
                        label: "Item Type:",
                        name: "ProductUpdates.ScaleItemTypeID",
                        type: "select",
                        placeholder: "Select an option",
                        options: [
                            { label: "Price per pound", value: "1" },
                            { label: "Standard pack", value: "2"}
                        ]
                    }, {
                        label: "Tare:",
                        name: "ProductUpdates.TareNetWeight",
                        attr: {
                            type: 'number',
                            step: 'any'
                        }
                    }, {
                        label: "Net Weight:",
                        name: "ProductUpdates.PRICE_TAB_F31",
                        attr: {
                            type: 'number'
                        }
                    }, {
                        label: "Shelf Life:",
                        name: "ProductUpdates.ShelfLife",
                        attr: {
                            type: 'number'
                        }
                    }, {
                        label: "Ingredients:",
                        name: "ProductUpdates.IngredientList",
                        type:"textarea"
                    }, {
                        label: "Created By:",
                        name: "ProductUpdates.createdby",
                        type: "readonly",
                        type: "hidden",
                        def: currentUser
                    }, {
                        label: "Date Created:",
                        name: "ProductUpdates.datecreated",
                        type: "hidden",
                        def: getDate()
                    }, {
                        label: "Date Completed:",
                        name: "ProductUpdates.completeddate"
                    }, {
                        label: "Completed By:",
                        name: "ProductUpdates.completedby"
                    }, {
                        label: "Last Updated On:",
                        name: "ProductUpdates.lastupdatedon",
                        type: "hidden"
                    }, {
                        label: "Last Updated By:",
                        name: "ProductUpdates.lastupdatedby",
                        type: "hidden"
                    }
                ]
            });

            /***********************************************************/
            // Field formatting and filtering

            // Update An Existing Product Form: converts receipt description to title case
            editor.field('ProductUpdates.OBJ_TAB_F29').input().on('blur', function () {
                var productName = editor.field('ProductUpdates.OBJ_TAB_F29').val();
                productName = titleCase(productName);
                productName = limitLength(productName, 32)
                editor.field('ProductUpdates.OBJ_TAB_F29').val(productName);
            });

            // Update An Existing Product Form: format size field
            editor.field('ProductUpdates.OBJ_TAB_F22').input().on('blur', function () {
                var size = editor.field('ProductUpdates.OBJ_TAB_F22').val();
                size = sizeFormatter(size);
                size = limitLength(size, 10)
                editor.field('ProductUpdates.OBJ_TAB_F22').val(size);
            });

            // Update An Existing Product Form: converts signage descriptions to title case
            editor.field('ProductUpdates.OBJ_TAB_F255').input().on('blur', function () {
                var productName = editor.field('ProductUpdates.OBJ_TAB_F255').val();
                productName = titleCase(productName);
                productName = limitLength(productName, 64)
                editor.field('ProductUpdates.OBJ_TAB_F255').val(productName);
            });

            // Update An Existing Product Form: removes all characters from case cost field
            editor.field('ProductUpdates.COST_TAB_F38').input().on('blur', function () {
                var caseCost = editor.field('ProductUpdates.COST_TAB_F38').val();
                caseCost = caseCostFormatter(caseCost);
                editor.field('ProductUpdates.COST_TAB_F38').val(caseCost);
            });

            // Update An Existing Product Form: only numbers, letters, commas, and spaces allowed
            editor.field('ProductUpdates.F01').input().on('blur', function () {
                var UPC = editor.field('ProductUpdates.F01').val();
                UPC = UPC.replace(/[^a-zA-Z0-9, ]/g, "");
                editor.field('ProductUpdates.F01').val(UPC);
            });

            // Update An Existing Product Form: only numbers, letters, commas, and spaces allowed
            editor.field('ProductUpdates.ScalePLU').input().on('blur', function () {
                var MPLU = editor.field('ProductUpdates.ScalePLU').val();
                MPLU = MPLU.replace(/[^a-zA-Z0-9, ]/g, "");
                editor.field('ProductUpdates.ScalePLU').val(MPLU);
            });

            // Update An Existing Product Form: only numbers, letters, commas, and spaces allowed
            editor.field('ProductUpdates.COST_TAB_F26').input().on('blur', function () {
                var reordercode = editor.field('ProductUpdates.COST_TAB_F26').val();
                reordercode = reordercode.replace(/[^a-zA-Z0-9, ]/g, "");
                editor.field('ProductUpdates.COST_TAB_F26').val(reordercode);
            });

            // Update An Existing Product Form: removes all characters from notes field
            editor.field('ProductUpdates.AdditionalRequestNotes').input().on('blur', function () {
                var notes = editor.field('ProductUpdates.AdditionalRequestNotes').val();
                notes = removeSpecials(notes);
                editor.field('ProductUpdates.AdditionalRequestNotes').val(notes);
            });

            // Update An Existing Product Form: removes all characters from ingredients field
            editor.field('ProductUpdates.IngredientList').input().on('blur', function () {
                var ingredients = editor.field('ProductUpdates.IngredientList').val();
                ingredients = removeSpecials(ingredients);
                editor.field('ProductUpdates.IngredientList').val(ingredients);
            });

            // Update An Existing Product Form: on request type change
            editor.field('ProductUpdates.requesttypeID').input().on('change', function () {

                // Hides TPR related fields unless a promotional request type is selected
                if (editor.field('ProductUpdates.requesttypeID').val() == '2' || editor.field('ProductUpdates.requesttypeID').val() == '3' || editor.field('ProductUpdates.requesttypeID').val() == '4' || editor.field('ProductUpdates.requesttypeID').val() == '5' || editor.field('ProductUpdates.requesttypeID').val() == '7' || editor.field('ProductUpdates.requesttypeID').val() == '8' || editor.field('ProductUpdates.requesttypeID').val() == '9') {
                    editor.field('ProductUpdates.signID').show();
                    editor.field('ProductUpdates.promotprstartdate').show();
                    editor.field('ProductUpdates.promotprenddate').show();
                    editor.field('ProductUpdates.promotprprice').show();
                } else {
                    editor.field('ProductUpdates.signID').hide();
                    editor.field('ProductUpdates.promotprstartdate').hide();
                    editor.field('ProductUpdates.promotprenddate').hide();
                    editor.field('ProductUpdates.promotprprice').hide();

                    // Clear values when hidden
                    editor.field('ProductUpdates.signID').val('');
                    editor.field('ProductUpdates.promotprstartdate').val('');
                    editor.field('ProductUpdates.promotprenddate').val('');
                    editor.field('ProductUpdates.promotprprice').val('');
                }

                // Hides Family Button unless Hackberry's Brand is selected
                if (editor.field('ProductUpdates.requesttypeID').val() == '10') {
                    editor.field('ProductUpdates.OBJ_TAB_F16').show();
                } else {
                    editor.field('ProductUpdates.OBJ_TAB_F16').hide();

                    // Clear values when hidden
                    editor.field('ProductUpdates.OBJ_TAB_F16').val();
                }
            });

            // Update An Existing Product Form: hides Like code unless Produce is selected
            editor.field('ProductUpdates.POS_TAB_F04').input().on('change', function () {
                if (editor.field('ProductUpdates.POS_TAB_F04').val() == '6' || editor.field('ProductUpdates.POS_TAB_F04').val() == '17' || editor.field('ProductUpdates.POS_TAB_F04').val() == '3') {
                    editor.field('ProductUpdates.LIKE_TAB_F122').show();
                } else {
                    editor.field('ProductUpdates.LIKE_TAB_F122').hide();
                    editor.field('ProductUpdates.LIKE_TAB_F122').val('');
                }
            });

            // Update An Existing Product Form: hides Mettler Ingredients unless Yes to Mettler Product option is selected
            editor.field('ProductUpdates.ismettlerrequired').input().on('change', function () {
                if (editor.field('ProductUpdates.ismettlerrequired').val() == 'Yes') {

                    editor.field('ProductUpdates.ScalePLU').show();
                    editor.field('ProductUpdates.ScaleItemTypeID').show();
                    editor.field('ProductUpdates.TareNetWeight').show();
                    editor.field('ProductUpdates.ShelfLife').show();
                    editor.field('ProductUpdates.IngredientList').show();

                    // Force price
                    editor.field('ProductUpdates.POS_TAB_F83').val(1);
                } else {
                    editor.field('ProductUpdates.ScalePLU').hide();
                    editor.field('ProductUpdates.ScaleItemTypeID').hide();
                    editor.field('ProductUpdates.TareNetWeight').hide();
                    editor.field('ProductUpdates.PRICE_TAB_F31').hide();
                    editor.field('ProductUpdates.ShelfLife').hide();
                    editor.field('ProductUpdates.IngredientList').hide();

                    // Clear values when hidden
                    editor.field('ProductUpdates.ScalePLU').val('');
                    editor.field('ProductUpdates.ScaleItemTypeID').val('');
                    editor.field('ProductUpdates.TareNetWeight').val('');
                    editor.field('ProductUpdates.PRICE_TAB_F31').val('');
                    editor.field('ProductUpdates.ShelfLife').val('');
                    editor.field('ProductUpdates.IngredientList').val('');

                    // Force price
                    editor.field('ProductUpdates.POS_TAB_F83').val(0);
                }
            });

            // Update An Existing Product Form: set scalable checkbox on Item Type selection.
            editor.field('ProductUpdates.ScaleItemTypeID').input().on('change', function () {
                if (editor.field('ProductUpdates.ScaleItemTypeID').val() == '1') {
                    editor.field('ProductUpdates.POS_TAB_F82').val(1);
                    editor.field('ProductUpdates.OBJ_TAB_F22').val("per lb.")
                    editor.field('ProductUpdates.PRICE_TAB_F31').hide();
                } else if (editor.field('ProductUpdates.ScaleItemTypeID').val() == '2') {
                    editor.field('ProductUpdates.POS_TAB_F82').val(0);
                    editor.field('ProductUpdates.PRICE_TAB_F31').show();
                } else {
                    editor.field('ProductUpdates.POS_TAB_F82').val(0);
                }
            });

            // Update An Existing Product Form: filter available categories on subdepartment selection
            editor.dependent('ProductUpdates.POS_TAB_F04', '/api/Categories');

            // Update An Existing Product Form: set default POS attributes
            editor.dependent('ProductUpdates.POS_TAB_F04', function () {
                var subdepartment = editor.field('ProductUpdates.POS_TAB_F04').val();

                var GetSubdepartmentAttributes = $.ajax({
                    url: "api/GetSubdepartmentBounds",
                    type: "GET",
                    dataType: "json",
                    data: { 'F04': subdepartment },
                    error: function (error) {
                        console.log(`Error ${error}`);
                    }
                });

                GetSubdepartmentAttributes.then(function (data) {
                    editor.field('ProductUpdates.POS_TAB_F79').val(data.data[0].SMSSubdepartments.F79);
                    editor.field('ProductUpdates.POS_TAB_F178').val(data.data[0].SMSSubdepartments.F178);
                    editor.field('ProductUpdates.POS_TAB_F81').val(data.data[0].SMSSubdepartments.F81);
                    editor.field('ProductUpdates.POS_TAB_F171').val(data.data[0].SMSSubdepartments.F171);
                    editor.field('ProductUpdates.POS_TAB_F150').val(data.data[0].SMSSubdepartments.F150);
                });
            });

            /***********************************************************/
            // Buttons

            // Update An Existing Product Form: SRP button
            $('<button title="Click here to calculate the suggested retail price." id="srpPU" style="position:absolute;top:20%;right:12.5%">SRP</button>').insertAfter(
                editor.field('ProductUpdates.price_tab_f30').input()
            );

            // Update An Existing Product Form: SRP calculator
            $(document).on('click', '#srpPU', function () {

                // If cost fields aren't displayed, display them
                if (editor.displayed().indexOf('ProductUpdates.COST_TAB_F27') == -1) {
                    editor.field('ProductUpdates.COST_TAB_F27').show();
                    editor.field('ProductUpdates.COST_TAB_F26').show();
                    editor.field('ProductUpdates.PRICE_TAB_F49').show();
                    editor.field('ProductUpdates.COST_TAB_F19').show();
                    editor.field('ProductUpdates.COST_TAB_F38').show();
                }

                // If margin is empty, alert user; else, get value
                if (editor.field('ProductUpdates.PRICE_TAB_F49').val() == null || editor.field('ProductUpdates.PRICE_TAB_F49').val() == "") {
                    alert('Please enter the target margin in the Retail Margin field.');
                    editor.field('ProductUpdates.PRICE_TAB_F49').focus();
                } else {
                    var targetMargin = editor.field('ProductUpdates.PRICE_TAB_F49').val();

                    // If items per case is empty, alert user; else, get value
                    if (editor.field('ProductUpdates.COST_TAB_F19').val() == null || editor.field('ProductUpdates.COST_TAB_F19').val() == "") {
                        alert('Please enter the number of items per case in the Items Per Case field.');
                        editor.field('ProductUpdates.COST_TAB_F19').focus();
                    } else {
                        var itemsPerCase = editor.field('ProductUpdates.COST_TAB_F19').val();

                        // If case cost is empty, alert user; else, get value
                        if (editor.field('ProductUpdates.COST_TAB_F38').val() == null || editor.field('ProductUpdates.COST_TAB_F38').val() == "") {
                            alert('Please enter a cost per case.');
                            editor.field('ProductUpdates.COST_TAB_F38').focus();
                        } else {
                            var costPerCase = editor.field('ProductUpdates.COST_TAB_F38').val();

                            // Calculate suggested retail price
                            var srp = ((Math.round(((costPerCase / itemsPerCase) / (1 - (targetMargin / 100))) * 10) / 10) - .01);

                            // Set suggested retail price
                            editor.field('ProductUpdates.price_tab_f30').val(toFixed(srp, 2));
                        }
                    }
                }
            });

            // Update An Existing Product Form: Cost button
            $('<button title="Click here to display all cost fields." id="cost" style="position:absolute;top:20%;right:12.5%">Cost</button>').insertAfter(
                editor.field('ProductUpdates.COST_TAB_F38').input()
            );

            // Update An Existing Product Form: display cost info when cost button is clicked
            $(document).on('click', '#cost', function () {
                $(editor.node('ProductUpdates.COST_TAB_F27')).toggle();
                $(editor.node('ProductUpdates.COST_TAB_F26')).toggle();
                $(editor.node('ProductUpdates.PRICE_TAB_F49')).toggle();
                $(editor.node('ProductUpdates.COST_TAB_F19')).toggle();
            });

            // Update An Existing Product Form: Calculate % TPR button
            $('<button title="Click here to calculate TPR by percentage." id="calculatePTPR" style="position:absolute;top:20%;right:10.5%">% TPR</button>').insertAfter(
                editor.field('ProductUpdates.promotprprice').input()
            );

            // Update An Existing Product Form: % TRP Calculator
            $(document).on('click', '#calculatePTPR', function () {

                // If retail field is empty, alert user
                if (editor.field('ProductUpdates.price_tab_f30').val() == null || editor.field('ProductUpdates.price_tab_f30').val() == "") {
                    alert('Please enter the regular retail in the Retail Price field.');
                    editor.field('ProductUpdates.price_tab_f30').focus();
                } else {

                    // Prompt user for percent discount
                    percentage = prompt("Please enter the percent discount:");

                    // Get regular retail value
                    regRetail = editor.field('ProductUpdates.price_tab_f30').val();

                    // Calculate percent temporary reduced price
                    ptpr = regRetail * (1 - (percentage / 100));

                    // Set percent discount
                    editor.field('ProductUpdates.promotprprice').val(toFixed(ptpr, 2));
                }
            });

            // Update An Existing Product Form: Like code x button
            $('<i id="clearLikeCode" class="fa fa-close"></i>').insertAfter(
                editor.field('ProductUpdates.LIKE_TAB_F122').input()
            );

            // Update An Existing Product Form: clear like code select field on button press
            $(document).on('click', '#clearLikeCode', function () {
                editor.field('ProductUpdates.LIKE_TAB_F122').val(null);
            });

            /***********************************************************/
            // Clear fields on backspace or delete key press

            // Update An Existing Product Form: clear brand select field
            $(document).on('keydown', '#brandPU', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editor.field('ProductUpdates.OBJ_TAB_F155').val(null);
                }
            });

            // Update An Existing Product Form: clear subdepartment select field
            $(document).on('keydown', '#subdepartmentPU', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editor.field('ProductUpdates.POS_TAB_F04').val(null);
                }
            });

            // Update An Existing Product Form: clear category select field
            $(document).on('keydown', '#categoryPU', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editor.field('ProductUpdates.OBJ_TAB_F17').val(null);
                }
            });

            // Update An Existing Product Form: clear report select field
            $(document).on('keydown', '#reportPU', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editor.field('ProductUpdates.OBJ_TAB_F18').val(null);
                }
            });

            // Update An Existing Product Form: clear family select field
            $(document).on('keydown', '#familyPU', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editor.field('ProductUpdates.OBJ_TAB_F16').val(null);
                }
            });

            // Update An Existing Product Form: clear like code select field
            $(document).on('keydown', '#likecodePU', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editor.field('ProductUpdates.LIKE_TAB_F122').val(null);
                }
            });

            /***********************************************************/
            // Form functions

            // Update An Existing Product Form: activate an inline edit on click of a table cell that has the className attribute "editable" set to it
            $('#ProductUpdates').on('click', 'tbody td.editable', function (e) {
                editor.inline(this, {
                    onBlur: 'submit'
                });
            });

            // Update An Existing Product Form: send email to user's with requests marked as more info needed
            editor.field('ProductUpdates.productstatusID').input().on('blur', function () {
                if (editor.field('ProductUpdates.productstatusID').val() == '2') {

                    // Gather data from each selected row
                    var data = table.rows({ selected: true }).data();

                    var CreatedBy = data[0].createdby;

                    if (confirm('Send email?')) {
                        var subject = "More Info Needed";
                        var body = "Hi " + CreatedBy + ", ";
                        window.open('mailto:?subject=' + subject + '&body=' + body);
                    }
                };
            });

            // Product Maintenance: adds a drop down arrow next to the product status select list
            var dropDownArrow = function (data, type, row) {
                if (type === 'display') {
                    return data + '<i class="fa fa-toggle-down" style="font-size:15px;color:black;float:right;padding-right:7%;"/>';
                }
                return data;
            };

            // Update An Existing Product Form: shows completed by info if product is marked as complete
            editor.on('open', function () {

                // Hides cost info on load
                editor.field('ProductUpdates.COST_TAB_F27').hide();
                editor.field('ProductUpdates.COST_TAB_F26').hide();
                editor.field('ProductUpdates.PRICE_TAB_F49').hide();
                editor.field('ProductUpdates.COST_TAB_F19').hide();

                // If request is complete show completed date and created by; else, hide
                if (editor.field('ProductUpdates.productstatusID').val() == 4) {
                    editor.field('ProductUpdates.completeddate').show();
                    editor.field('ProductUpdates.completedby').show();
                }
                else {
                    editor.field('ProductUpdates.completeddate').hide();
                    editor.field('ProductUpdates.completedby').hide();
                }
            });

            // Update An Existing Product Form: on product edit
            editor.on('initEdit', function () {

                // Set last updated date and last updated by upon edit
                editor.field('ProductUpdates.lastupdatedon').val(getDate());
                editor.field('ProductUpdates.lastupdatedby').val(currentUser);

                // Show fields with values or hide fields with nothing
                for (i = 0; i < editor.fields().length; i++) {

                    // If fields contain a value, show them
                    if (editor.field(editor.fields()[i]).val()) {
                        editor.field(editor.fields()[i]).show();

                        // Never show these fields!
                        editor.field('ProductUpdates.POS_TAB_F96').hide();
                        editor.field('ProductUpdates.POS_TAB_F150').hide();
                        editor.field('ProductUpdates.POS_TAB_F83').hide();
                        editor.field('ProductUpdates.POS_TAB_F171').hide();
                        editor.field('ProductUpdates.createdby').hide();
                        editor.field('ProductUpdates.datecreated').hide();
                        editor.field('ProductUpdates.completeddate').hide();
                        editor.field('ProductUpdates.completedby').hide();
                        editor.field('ProductUpdates.lastupdatedon').hide();
                        editor.field('ProductUpdates.lastupdatedby').hide();
                    }

                    // If fields are null, empty, or undefined; hide them
                    if (!editor.field(editor.fields()[i]).val()) {
                        editor.field(editor.fields()[i]).hide();
                    }
                }
            });

            // Update An Existing Product Form: field validation
            editor.on('preSubmit', function (e, o, action) {
                if (action !== 'remove') {

                    /*** Product Info Update required fields ***/
                    // Request Type - required
                    if (!editor.field('ProductUpdates.requesttypeID').val()) {
                        editor.field('ProductUpdates.requesttypeID').error('Required');
                    }

                    // Location - required
                    if (!editor.field('ProductUpdates.locationID').val()) {
                        editor.field('ProductUpdates.locationID').error('Required');
                    }

                    // Mettler Product - required
                    if (!editor.field('ProductUpdates.ismettlerrequired').val()) {
                        editor.field('ProductUpdates.ismettlerrequired').error('Required');
                    }

                    // UPC - required
                    if (!editor.field('ProductUpdates.F01').val()) {
                        editor.field('ProductUpdates.F01').error('Required');
                    }
                    //else {
                    //    // Check if UPC doesn't exist in SMS
                    //    var UPC = pad(editor.field('ProductUpdates.F01').val(), 13, 0);

                    //    var CheckUPC = $.ajax({
                    //        url: "api/CheckUPC",
                    //        type: "GET",
                    //        dataType: "json",
                    //        error: function (error) {
                    //            console.log(`Error ${error}`);
                    //        }
                    //    });

                    //    CheckUPC.done(function (data) {
                    //        var used = [];
                    //        for (i = 0; i < data.data.length; i++) {
                    //            used.push(data.data[i].OBJ_TAB.F01);
                    //        }

                    //        var count = 0;
                    //        for (i = 0; i < used.length; i++) {
                    //            if (UPC == used[i]) {
                    //                count++
                    //            }
                    //        }

                    //        if (count == 0) {
                    //            editor.field('ProductUpdates.F01').error("UPC/PLU does not exist in SMS");
                    //        }
                    //    });
                    //}

                    // Mettler PLU - if value is present, must be a whole number
                    if (editor.field('ProductUpdates.ScalePLU').val() && !integerCheck(editor.field('ProductUpdates.ScalePLU').val())) {
                        editor.field('ProductUpdates.ScalePLU').error('Please enter a whole number.');
                    }

                    // Items Per Case - if value is present, must be a whole number
                    if (editor.field('ProductUpdates.COST_TAB_F19').val() && !integerCheck(editor.field('ProductUpdates.COST_TAB_F19').val())) {
                        editor.field('ProductUpdates.COST_TAB_F19').error('Please enter a whole number.');
                    }

                    // Tare - if value is present, must be a decimal
                    if (editor.field('ProductUpdates.TareNetWeight').val() && !floatCheck(editor.field('ProductUpdates.TareNetWeight').val())) {
                        editor.field('ProductUpdates.TareNetWeight').error('Please enter a decimal value: e.g. 0.08');
                    }

                    // Retail Margin - if value is present, must be a whole number
                    if (editor.field('ProductUpdates.PRICE_TAB_F49').val() && !integerCheck(editor.field('ProductUpdates.PRICE_TAB_F49').val())) {
                        editor.field('ProductUpdates.PRICE_TAB_F49').error('Please enter a whole number.');
                    }

                    // Net Weight - if value is present, must be a whole number
                    if (editor.field('ProductUpdates.PRICE_TAB_F31').val() && !integerCheck(editor.field('ProductUpdates.PRICE_TAB_F31').val())) {
                        editor.field('ProductUpdates.PRICE_TAB_F31').error('Please enter a whole number.');
                    }

                    // Shelf Life - if value is present, must be a whole number
                    if (editor.field('ProductUpdates.ShelfLife').val() && !integerCheck(editor.field('ProductUpdates.ShelfLife').val())) {
                        editor.field('ProductUpdates.ShelfLife').error('Please enter a whole number.');
                    }


                    /*** PFC & NCG Fresh Deals required fields ***/
                    if (editor.field('ProductUpdates.requesttypeID').val() == 4 || editor.field('ProductUpdates.requesttypeID').val() == 9) {

                        // Retail - required
                        if (!editor.field('ProductUpdates.price_tab_f30').val()) {
                            editor.field('ProductUpdates.price_tab_f30').error('Required');
                        }

                        // Retail margin - required
                        if (!editor.field('ProductUpdates.PRICE_TAB_F49').val()) {
                            editor.field('ProductUpdates.PRICE_TAB_F49').error('Required');
                            editor.field('ProductUpdates.PRICE_TAB_F49').show();
                        }

                        // TPR Price - required
                        if (!editor.field('ProductUpdates.promotprprice').val()) {
                            editor.field('ProductUpdates.promotprprice').error('Required');
                        }

                        // TPR Start - required
                        if (!editor.field('ProductUpdates.promotprstartdate').val()) {
                            editor.field('ProductUpdates.promotprstartdate').error('Required');
                        }

                        // TPR End - required
                        if (!editor.field('ProductUpdates.promotprenddate').val()) {
                            editor.field('ProductUpdates.promotprenddate').error('Required');
                        }

                        // Brand - required
                        if (!editor.field('ProductUpdates.OBJ_TAB_F155').val()) {
                            editor.field('ProductUpdates.OBJ_TAB_F155').error('Required');
                        }

                        // Short Description - required
                        if (!editor.field('ProductUpdates.OBJ_TAB_F29').val()) {
                            editor.field('ProductUpdates.OBJ_TAB_F29').error('Required');
                        }

                        // Size - required
                        if (!editor.field('ProductUpdates.OBJ_TAB_F22').val()) {
                            editor.field('ProductUpdates.OBJ_TAB_F22').error('Required');
                        }
                    }

                    // If any error was reported, cancel the submission so it can be corrected
                    if (this.inError()) {
                        return false;
                    }
                }
            });

            // Update An Existing Product Form: set completed date and completed by upon record completion
            editor.on('initSubmit', function () {
                if (editor.field('ProductUpdates.productstatusID').val() == 4) {
                    editor.field('ProductUpdates.completeddate').val(getDate());
                    editor.field('ProductUpdates.completedby').val(currentUser);
                }
            });


            /***********************************************************************************************************************/


            // DataTables table initilazation
            var table = $('#ProductUpdates').DataTable({
                // Enable or disable rendering of only necessary HTML elements
                deferRender: true,
                // Enable or disable automatic column width calculation.
                autoWidth: true,
                // Enable or disable the ability to select a row
                select: true,
                // Default view showing only incomplete requests
                initComplete: function (e, dt, node, config) {
                    table
                        .column(0).search('^((?!(New Product)).)*$', true, false)
                        .column(2).search('^((?!(4 - Completed)).)*$', true, false).draw()
                },
                // Column default settings
                columnDefs: [
                    {
                        // Disable sorting on column 1 ( 0-indexed )
                        orderable: false, targets: 1
                    },
                    {
                        // Show up to 14 characters in UPC field then hide with ellipses
                        targets: 3,
                        render: $.fn.dataTable.render.ellipsis(14)
                    },
                    {
                        // Show up to 17 characters in brand field then hide with ellipses
                        targets: 4,
                        render: $.fn.dataTable.render.ellipsis(17)
                    }
                ],
                // Change New Products request type background green
                rowCallback: function (row, data, index) {
                    if (data.RequestTypes.requestname == "New Product") { $(row).find('td:eq(0)').css('background-color', '#FAC090'); }
                    if (data.RequestTypes.requestname !== "New Product") { $(row).find('td:eq(0)').css('background-color', '#E6EDD7'); }
                },
                // Default table lengths
                lengthMenu: [[20, 50, 100, -1], [20, 50, 100, "All"]],
                // Default table order
                order: [[12, "desc"]],
                // Table data source
                ajax: {
                    url: '/api/ProductUpdates'
                },
                // Table columns
                columns: [
                    { data: "RequestTypes.requestname", width: "9%" },
                    {
                        data: null,
                        className: "center",
                        defaultContent: '<a href="" class="editor_edit"><i class="fa fa-pencil" style="font-size:18px;color:black"></i></a>',
                        width: "1.5%"
                    },
                    { data: "Status.productupdatestatus", className: "editable", editField: "ProductUpdates.productstatusID", render: dropDownArrow, width: "13%" },
                    { data: "ProductUpdates.F01", width: "7%" },
                    { data: "ProductUpdates.OBJ_TAB_F155", width: "9.5%" },
                    { data: "ProductUpdates.OBJ_TAB_F29" },
                    { data: "ProductUpdates.OBJ_TAB_F22", width: "5%" },
                    { data: "ProductUpdates.promotprstartdate", width: "5%" },
                    { data: "ProductUpdates.promotprenddate", width: "5%" },
                    {
                        data: "ProductUpdates.promotprprice",
                        render: $.fn.dataTable.render.number(',', '.', 2, '$'),
                        width: "5%"
                    },
                    {
                        data: "ProductUpdates.price_tab_f30",
                        render: $.fn.dataTable.render.number(',', '.', 2, '$'),
                        width: "6%"
                    },
                    { data: "ProductUpdates.createdby", width: "6%" },
                    {
                        data: "ProductUpdates.datecreated", "render": function (value) {
                            if (value === null) return "";
                            return window.moment(value).format('M/D/YYYY h:mm:ss A');
                        }, width: "9%"
                    },
                    { data: "ProductUpdates.completeddate", visible: false },
                    { data: "Locations.locationname", editField: "ProductUpdates.locationID", visible: false },
                    { data: "ProductUpdates.AdditionalRequestNotes", visible: false },
                    { data: "ProductUpdates.IngredientList", visible: false },
                    { data: "ProductUpdates.PRICE_TAB_F49", visible: false }
                ],
                // Control button layout
                dom: '<"floatRight"B><"clear">lfrtip',
                // Default table order
                buttons: [
                    { extend: 'remove', editor: editor },
                    {
                        // Custom Promotion Report button
                        text: 'Promotion Report', formTitle: 'Run Promotion Report', extend: 'create', editor: editorPR,
                        formButtons:
                            [{ text: 'Cancel', action: function () { this.close(); } },
                                {
                                    text: 'Run Report',
                                    action: function (e, dt, node, config) {

                                        var promo;
                                        var locale;
                                        switch (editorPR.field('ProductUpdates.requesttypeID').val())
                                        {
                                            case 1:
                                                promo = "Product Info Update";
                                                break;
                                            case 2:
                                                promo = "Happy Hour";
                                                break;
                                            case 3:
                                                promo = "Member Specials";
                                                break;
                                            case 4:
                                                promo = "PFC Fresh Deals";
                                                break;
                                            case 5:
                                                promo = "Ad Hoc Promo";
                                                break;
                                            case 6:
                                                promo = "New Product";
                                                break;
                                            case 7:
                                                promo = "Co-op Deals Correction";
                                                break;
                                            case 8:
                                                promo = "Flash Sale";
                                                break;
                                            case 9:
                                                promo = "NCG Fresh Deals";
                                                break;
                                            case 10:
                                                promo = "Hackberry's Menu Item";
                                                break;
                                        };

                                        switch (editorPR.field('promolocations').val())
                                        {
                                            case 1:
                                                locale = "La Crosse";
                                                break;
                                            case 2:
                                                locale = "Rochester";
                                                break;
                                            case 3:
                                                locale = "Both stores";
                                                break;
                                            case 4:
                                                locale = "La Crosse$|^Rochester$|^Both stores";
                                                break;
                                        }

                                        var startDate = editorPR.field('ProductUpdates.promotprstartdate').val();
                                        var endDate = editorPR.field('ProductUpdates.promotprenddate').val();

                                        table.search('')
                                            .columns().search('')
                                            .column(0).search('^' + promo + '$', true, false)
                                            .column(7).search('^' + startDate + '$', true, false)
                                            .column(8).search('^' + endDate + '$', true, false)
                                            .column(14).search('^' + locale + '$', true, false).draw()
                                        this.close();

                                        // Product Maintenance: display the export button
                                        document.getElementById("exportButton").style.display = "unset";
                                    }
                                }]
                    },
                    {
                        // Show completed today filter button
                        text: 'Show Completed Today', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .columns().order('')
                                .column(0).search('^((?!(New Product)).)*$', true, false)
                                .column(2).search('^4 - Completed$', true, false)
                                .column(13).search(new Date().getMonth() + 1 + "/" + new Date().getDate() + "/" + new Date().getFullYear(), true, false).column(12).order('desc').draw()
                        }
                    },
                    {
                        // Show default view filter button
                        text: 'Show Default View', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .columns().order('')
                                .page.len(20)
                                .column(0).search('^((?!(New Product)).)*$', true, false)
                                .column(2).search('^((?!(4 - Completed)).)*$', true, false).column(12).order('desc').draw();
                        }
                    },
                    {
                        // Show all records filter button
                        text: 'Show All', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .columns().order('')
                                .column(0).search('^((?!(New Product)).)*$', true, false)
                                .column(2).search('^1 - Waiting for Manager Review$|^2 - More Info Needed$|^3 - Manager Review Completed$|^4 - Completed$', true, false).column(12).order('desc').draw();
                        }
                    },
                    {
                        text: 'Export',
                        attr: { id: 'exportButton' },
                        extend: 'excel',
                        filename: 'FDPR-' + getDate().split(" ")[0],
                        title: 'Fresh Deals Promotion Report',
                        exportOptions: {
                            columns: [0, 3, 4, 5, 6, 10, 9, 17, 7, 8, 11, 15, 16, 12, 14]
                        },
                        action: function (e, dt, node, config) {

                            // Deselect any selected row on export.
                            table.rows({ selected: true }).deselect();

                            // Order columns by location and deselect any selected row, so all data is exported.
                            table.column(14).order('asc').draw().rows().deselect();

                            // Call the default csvHtml5 action method to create the CSV file
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, node, config);

                            // Product Maintenance: hide the export button
                            document.getElementById("exportButton").style.display = "none";
                        }
                    },
                    {
                        // Redirects user back to main Product Maintenance page
                        text: 'Back', action: function () { window.location = 'ProductMaintenance' }
                    }
                ]
            });

            // Product Maintenance: hide the export button
            document.getElementById("exportButton").style.display = "none";

            // Product Maintenance: adds edit pencil in each cell
            $('#ProductUpdates').on('click', 'a.editor_edit', function (e) {
                e.preventDefault();

                editor.edit($(this).closest('tr'), {
                    title: 'Edit entry',
                    buttons:
                        [
                            {
                                text: 'Update', action: function () {
                                    editor.field('ProductUpdates.lastupdatedon').val(getDate());
                                    editor.field('ProductUpdates.lastupdatedby').val(currentUser);
                                    this.submit();
                                }
                            }
                        ]
                });
            });
        });
    </script>
}