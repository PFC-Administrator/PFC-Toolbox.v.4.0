@{
    ViewBag.Title = "Product Maintenance";
    var CreatedBy = Request["CreatedBy"];
    var Role = Request["Role"];
}

<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />

    <title>Product Maintenance</title>

    <link rel="stylesheet" type="text/css" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/1.6.1/css/buttons.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/select/1.3.1/css/select.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://editor.datatables.net/extensions/Editor/css/editor.dataTables.min.css" />
</head>
<body class="dataTables">
    <div class="container">
        <h1><img src="~/Content/PFC_Logo_128px.png" width="100" height="100">        Product Maintenance</h1>
        <br />
        <table id="ProductMaintenance" class="display text-nowrap compact" style="width:100%">
            <thead>
                <tr>
                    <th>Request Type</th>
                    <th></th>
                    <th>Status</th>
                    <th>Item Code</th>
                    <th>Brand</th>
                    <th>Description</th>
                    <th>Size</th>
                    <th>Created By</th>
                    <th>Date Created</th>
                </tr>
            </thead>
        </table>
    </div>
</body>
</html>

@section scripts{
    <script type="text/javascript" charset="utf-8" src="https://code.jquery.com/jquery-3.3.1.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.6.1/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.flash.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.html5.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.print.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/select/1.3.1/js/dataTables.select.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/responsive/1.0.7/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/plug-ins/1.10.19/sorting/datetime-moment.js"></script>

    <script>

        // Reference ~/Content/Functions.js for other custom functions
        // Function to format case cost field
        function caseCostFormatter(string) {
            return string.replace(/[^0-9.]/g, "")
                .replace("NA", "")
                .replace("na", "");
        };

        var currentUser = "@CreatedBy";
        var role = "@Role";
        var lastNPRetrieved, lastPURetrieved;
        var editorNP, editor;
        $(document).ready(function () {

            $.fn.dataTable.moment('M/D/YYYY h:mm:ss A');

            // Disable autocomplete on form fields
            $.extend(true, $.fn.dataTable.Editor.Field.defaults, {
                attr: {
                    autocomplete: 'off'
                }
            });

            // Form padding
            $.extend($.fn.dataTable.Editor.display.lightbox.conf, {
                windowPadding: 66
            });

            // New Product Form
            var editorNP = new $.fn.dataTable.Editor({
                ajax: '/api/NewProducts',
                table: '#ProductMaintenance',
                formOptions: {
                    main: {
                        onReturn: false,
                        onBackground: false
                    }
                },
                fields: [
                    {
                        label: "Product Update Type",
                        name: "ProductUpdates.requesttypeID",
                        type: "readonly",
                        type: "hidden",
                        def: "6"
                    }, {
                        label: "Location:",
                        name: "ProductUpdates.locationID",
                        type: "select",
                        placeholder: "Select a location"
                    }, {
                        label: "Mettler Product:",
                        name: "ProductUpdates.ismettlerrequired",
                        type: "select",
                        options: ["Yes", "No"],
                        placeholder: "Select an option"
                    }, {
                        label: "Shelf Tag:",
                        name: "ProductUpdates.labelID",
                        type: "select",
                        placeholder: "Select a label size"
                    }, {
                        label: "UPC/PLU:",
                        name: "ProductUpdates.F01"
                    }, {
                        label: "Mettler PLU:",
                        name: "ProductUpdates.ScalePLU"
                    }, {
                        label: "Brand:",
                        name: "ProductUpdates.OBJ_TAB_F155",
                        type: "select",
                        placeholder: "Select a brand",
                        def: "Select a brand"
                    }, {
                        label: "Shelf Tag & Receipt Description:",
                        name: "ProductUpdates.OBJ_TAB_F29"
                    }, {
                        label: "Size:",
                        name: "ProductUpdates.OBJ_TAB_F22"
                    }, {
                        label: "Sign Description:",
                        name: "ProductUpdates.OBJ_TAB_F255"
                    }, {
                        label: "Subdepartment:",
                        name: "ProductUpdates.POS_TAB_F04",
                        type: "select",
                        placeholder: "Select a subdepartment"
                    }, {
                        label: "Category:",
                        name: "ProductUpdates.OBJ_TAB_F17",
                        optionsPair: {
                            label: 'F1023',
                            value: 'F17'
                        },
                        type: "select",
                        placeholder: "Select a category"
                    }, {
                        label: "Report:",
                        name: "ProductUpdates.OBJ_TAB_F18",
                        type: "select",
                        placeholder: "Select a report"
                    }, {
                        label: "Family button:",
                        name: "ProductUpdates.OBJ_TAB_F16",
                        type: "select",
                        placeholder: "Select a family button"
                    }, {
                        label: "Like:",
                        name: "ProductUpdates.LIKE_TAB_F122",
                        type: "select",
                        placeholder: "Select a like code",
                        id: "likecodeNP"
                    }, {
                        label: "SNAP:",
                        name: "ProductUpdates.POS_TAB_F79",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Scalable:",
                        name: "ProductUpdates.POS_TAB_F82",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Taxable:",
                        name: "ProductUpdates.POS_TAB_F81",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        type: "checkbox",
                        unselectedValue: 0,
                        separator: "|"
                    }, {
                        label: "Taxable 2:",
                        name: "ProductUpdates.POS_TAB_F96",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        type: "checkbox",
                        type: "hidden",
                        unselectedValue: 0,
                        separator: "|"
                    }, {
                        label: "Stop discount:",
                        name: "ProductUpdates.POS_TAB_F150",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0,
                        type: "hidden"
                    }, {
                        label: "Force price:",
                        name: "ProductUpdates.POS_TAB_F83",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0,
                        type: "hidden"
                    }, {
                        label: "WIC:",
                        name: "ProductUpdates.POS_TAB_F178",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Vendor:",
                        name: "ProductUpdates.COST_TAB_F27",
                        type: "select",
                        placeholder: "Select a vendor"
                    }, {
                        label: "Reorder code:",
                        name: "ProductUpdates.COST_TAB_F26"
                    }, {
                        label: "Retail margin:",
                        name: "ProductUpdates.PRICE_TAB_F49"
                    }, {
                        label: "Items per case:",
                        name: "ProductUpdates.COST_TAB_F19"
                    }, {
                        label: "Case cost:",
                        name: "ProductUpdates.COST_TAB_F38"
                    }, {
                        label: "Retail Price",
                        name: "ProductUpdates.price_tab_f30"
                    }, {
                        label: "Client age:",
                        name: "ProductUpdates.POS_TAB_F171",
                        type: "hidden"
                    }, {
                        label: "Status:",
                        name: "ProductUpdates.productstatusID",
                        type: "hidden",
                        def: "3"
                    }, {
                        label: "Notes:",
                        name: "ProductUpdates.AdditionalRequestNotes",
                        type: "textarea"
                    }, {
                        label: "Item Type:",
                        name: "ProductUpdates.ScaleItemTypeID",
                        type: "select",
                        placeholder: "Select an option",
                        options: [
                            { label: "Price per pound", value: "1" },
                            { label: "Standard pack", value: "2" }
                        ]
                    }, {
                        label: "Tare:",
                        name: "ProductUpdates.TareNetWeight"
                    }, {
                        label: "Shelf Life:",
                        name: "ProductUpdates.ShelfLife"
                    }, {
                        label: "Ingredients:",
                        name: "ProductUpdates.IngredientList",
                        type: "textarea"
                    }, {
                        label: "Created by:",
                        name: "ProductUpdates.createdby",
                        type: "readonly",
                        type: "hidden",
                        def: currentUser
                    }, {
                        label: "Date created:",
                        name: "ProductUpdates.datecreated",
                        type: "hidden",
                        def: getDate()
                    }, {
                        label: "Date completed:",
                        name: "ProductUpdates.completeddate",
                        type: "hidden"
                    }, {
                        label: "Completed by:",
                        name: "ProductUpdates.completedby",
                        type: "hidden"
                    }, {
                        label: "Last updated on:",
                        name: "ProductUpdates.lastupdatedon",
                        type: "hidden"
                    }, {
                        label: "Last updated by:",
                        name: "ProductUpdates.lastupdatedby",
                        type: "hidden"
                    }
                ]
            });

            // New Product Form: tooltips that appear when a form field is hovered over.
            $(editorNP.field('ProductUpdates.locationID').node()).attr("data-toggle", "tooltip").attr("title", 'Location of where the new product is to be sold.');
            $(editorNP.field('ProductUpdates.ismettlerrequired').node()).attr("data-toggle", "tooltip").attr("title", 'Is the product going to be weighed or labeled at a Mettler Toledo scale?');
            $(editorNP.field('ProductUpdates.labelID').node()).attr("data-toggle", "tooltip").attr("title", 'Shelf tag to be queued up on SMS.');
            $(editorNP.field('ProductUpdates.F01').node()).attr("data-toggle", "tooltip").attr("title", 'Enter all digits of the UPC except for the last number (check digit) or click "Get New PLU" and follow the prompts to generate a PLU.');
            $(editorNP.field('ProductUpdates.ScalePLU').node()).attr("data-toggle", "tooltip").attr("title", 'PLU that is typed in at a Mettler Toledo scale.');
            $(editorNP.field('ProductUpdates.OBJ_TAB_F155').node()).attr("data-toggle", "tooltip").attr("title", 'Brand of the product. If no there is no brand, enter the vendor or manufacturer.');
            $(editorNP.field('ProductUpdates.OBJ_TAB_F29').node()).attr("data-toggle", "tooltip").attr("title", 'Enter the product description in a backwards fashion so similar items are grouped together in SMS. e.g. "Organic Vanilla Greek Yogurt" would be entered as "Greek Yogurt Vanilla Org". This description will appear at the POS and reports.');
            $(editorNP.field('ProductUpdates.OBJ_TAB_F22').node()).attr("data-toggle", "tooltip").attr("title", 'Abbreviate the unit of measure. For multiple pack items, use an "x" to separate the count from the size. e.g. a 12 pack of 12 oz cans would be "12 x 12 oz.".');
            $(editorNP.field('ProductUpdates.OBJ_TAB_F255').node()).attr("data-toggle", "tooltip").attr("title", 'Enter the description in common language using the full description. This description will appear on sale signage. There is no need to type the brand name here. Do NOT enter brand name or size.');
            $(editorNP.field('ProductUpdates.POS_TAB_F04').node()).attr("data-toggle", "tooltip").attr("title", 'Subdepartment that will receive the sales for this item.');
            $(editorNP.field('ProductUpdates.POS_TAB_F79').node()).attr("data-toggle", "tooltip").attr("title", 'Check the box if the product is SNAP/EBT/Food stamp eligible.');
            $(editorNP.field('ProductUpdates.POS_TAB_F82').node()).attr("data-toggle", "tooltip").attr("title", 'Check the box if the product is to be weighed at a scale.');
            $(editorNP.field('ProductUpdates.POS_TAB_F81').node()).attr("data-toggle", "tooltip").attr("title", 'Check the box if the product is taxable.');
            $(editorNP.field('ProductUpdates.POS_TAB_F178').node()).attr("data-toggle", "tooltip").attr("title", 'Check the box if the product is WIC eligible.');
            $(editorNP.field('ProductUpdates.OBJ_TAB_F17').node()).attr("data-toggle", "tooltip").attr("title", 'Categories are used to organize a subdepartment into smaller groups. Used for category margin management and reporting.');
            $(editorNP.field('ProductUpdates.OBJ_TAB_F18').node()).attr("data-toggle", "tooltip").attr("title", 'Report codes are used identify if a product is organic or local (produced within a 200 mile radius of either or both stores). Use "Conventional" if none of the available report codes apply.');
            $(editorNP.field('ProductUpdates.OBJ_TAB_F16').node()).attr("data-toggle", "tooltip").attr("title", 'Family codes are used in Hackberrys Bistro to organize buttons at the register.');
            $(editorNP.field('ProductUpdates.LIKE_TAB_F122').node()).attr("data-toggle", "tooltip").attr("title", 'Like codes are used to group UPCs & PLUs together to facilitate quicker price changes.');
            $(editorNP.field('ProductUpdates.COST_TAB_F27').node()).attr("data-toggle", "tooltip").attr("title", 'Vendor that the product is ordered from.');
            $(editorNP.field('ProductUpdates.COST_TAB_F26').node()).attr("data-toggle", "tooltip").attr("title", 'Re-order code that the vendor uses for orders.');
            $(editorNP.field('ProductUpdates.PRICE_TAB_F49').node()).attr("data-toggle", "tooltip").attr("title", 'Target margin of the product that is used for updating prices in the future.');
            $(editorNP.field('ProductUpdates.COST_TAB_F19').node()).attr("data-toggle", "tooltip").attr("title", 'Number of items in a case. If using unit cost, enter a "1".');
            $(editorNP.field('ProductUpdates.COST_TAB_F38').node()).attr("data-toggle", "tooltip").attr("title", 'Case cost or unit cost.');
            $(editorNP.field('ProductUpdates.price_tab_f30').node()).attr("data-toggle", "tooltip").attr("title", 'Retail price the product will be sold at.');
            $(editorNP.field('ProductUpdates.AdditionalRequestNotes').node()).attr("data-toggle", "tooltip").attr("title", 'Additional information that needs to be conveyed.');
            $(editorNP.field('ProductUpdates.ScaleItemTypeID').node()).attr("data-toggle", "tooltip").attr("title", 'Price per pound products have a variable weight. Standard pack products are sold by the each and can have a net weight assigned to them.');
            $(editorNP.field('ProductUpdates.TareNetWeight').node()).attr("data-toggle", "tooltip").attr("title", 'Tare weight entered in as a decimal e.g. 0.08.');
            $(editorNP.field('ProductUpdates.ShelfLife').node()).attr("data-toggle", "tooltip").attr("title", 'Shelf life of the product in days.');
            $(editorNP.field('ProductUpdates.IngredientList').node()).attr("data-toggle", "tooltip").attr("title", 'Product ingredients, allergens, or country of origin.');

            // New Product Form: converts receipt description to title case
            editorNP.field('ProductUpdates.OBJ_TAB_F29').input().on('blur', function () {
                var productName = editorNP.field('ProductUpdates.OBJ_TAB_F29').val();
                productName = titleCase(productName);
                productName = limitLength(productName, 32)
                editorNP.field('ProductUpdates.OBJ_TAB_F29').val(productName);
            });

            // New Product Form: format size field
            editorNP.field('ProductUpdates.OBJ_TAB_F22').input().on('blur', function () {
                var size = editorNP.field('ProductUpdates.OBJ_TAB_F22').val();
                size = sizeFormatter(size);
                size = limitLength(size, 10)
                editorNP.field('ProductUpdates.OBJ_TAB_F22').val(size);
            });

            // New Product Form: converts signage descriptions to title case
            editorNP.field('ProductUpdates.OBJ_TAB_F255').input().on('blur', function () {
                var productName = editorNP.field('ProductUpdates.OBJ_TAB_F255').val();
                productName = titleCase(productName);
                productName = limitLength(productName, 64)
                editorNP.field('ProductUpdates.OBJ_TAB_F255').val(productName);
            });

            // Update An Existing Product Form: removes all charactesr from case cost field
            editorNP.field('ProductUpdates.COST_TAB_F38').input().on('blur', function () {
                var caseCost = editorNP.field('ProductUpdates.COST_TAB_F38').val();
                caseCost = caseCostFormatter(caseCost);
                editorNP.field('ProductUpdates.COST_TAB_F38').val(caseCost);
            });

            // New Product Form: hides Family Button unless Hackberry's Brand is selected
            editorNP.field('ProductUpdates.OBJ_TAB_F155').input().on('change', function () {
                if (editorNP.field('ProductUpdates.OBJ_TAB_F155').val() == "HACKBERRYS" || editorNP.field('ProductUpdates.OBJ_TAB_F155').val() == "HACKBERRY'S") {
                    editorNP.field('ProductUpdates.OBJ_TAB_F16').show();
                } else {
                    editorNP.field('ProductUpdates.OBJ_TAB_F16').hide();
                }
            });

            // New Product Form: hides Like code unless Produce is selected
            editorNP.field('ProductUpdates.POS_TAB_F04').input().on('change', function () {
                if (editorNP.field('ProductUpdates.POS_TAB_F04').val() == '6' || editorNP.field('ProductUpdates.POS_TAB_F04').val() == '17' || editorNP.field('ProductUpdates.POS_TAB_F04').val() == '3') {
                    editorNP.field('ProductUpdates.LIKE_TAB_F122').show();
                } else {
                    editorNP.field('ProductUpdates.LIKE_TAB_F122').hide();
                }
            });

            // New Product Form: hides Mettler Ingredients unless Yes to Mettler Product option is selected
            editorNP.field('ProductUpdates.ismettlerrequired').input().on('change', function () {
                if (editorNP.field('ProductUpdates.ismettlerrequired').val() == 'Yes') {

                    editorNP.field('ProductUpdates.ScalePLU').show();
                    editorNP.field('ProductUpdates.ScaleItemTypeID').show();
                    editorNP.field('ProductUpdates.TareNetWeight').show();
                    editorNP.field('ProductUpdates.ShelfLife').show();
                    editorNP.field('ProductUpdates.IngredientList').show();

                    // Force price
                    editorNP.field('ProductUpdates.POS_TAB_F83').val(1);
                } else {
                    editorNP.field('ProductUpdates.ScalePLU').hide();
                    editorNP.field('ProductUpdates.ScaleItemTypeID').hide();
                    editorNP.field('ProductUpdates.TareNetWeight').hide();
                    editorNP.field('ProductUpdates.ShelfLife').hide();
                    editorNP.field('ProductUpdates.IngredientList').hide();
                }
            });

            // New Product Form: set scalable checkbox on Item Type selection
            editorNP.field('ProductUpdates.ScaleItemTypeID').input().on('change', function () {
                if (editorNP.field('ProductUpdates.ScaleItemTypeID').val() == '1') {
                    editorNP.field('ProductUpdates.POS_TAB_F82').val(1);
                    editorNP.field('ProductUpdates.OBJ_TAB_F22').val("per lb.")
                } else {
                    editorNP.field('ProductUpdates.POS_TAB_F82').val(2);
                }
            });

            // New Product Form: filter available categories on subdepartment selection
            editorNP.dependent('ProductUpdates.POS_TAB_F04', '/api/Categories');

            // New Product Form: set default POS attributes
            editorNP.dependent('ProductUpdates.POS_TAB_F04', function () {
                var subdepartment = editorNP.field('ProductUpdates.POS_TAB_F04').val();

                var GetSubdepartmentAttributes = $.ajax({
                    url: "api/GetSubdepartmentBounds",
                    type: "GET",
                    dataType: "json",
                    data: { 'F04': subdepartment },
                    error: function (error) {
                        console.log(`Error ${error}`);
                    }
                });

                GetSubdepartmentAttributes.then(function (data) {
                    editorNP.field('ProductUpdates.POS_TAB_F79').val(data.data[0].SMSSubdepartments.F79);
                    editorNP.field('ProductUpdates.POS_TAB_F178').val(data.data[0].SMSSubdepartments.F178);
                    editorNP.field('ProductUpdates.POS_TAB_F81').val(data.data[0].SMSSubdepartments.F81);
                    editorNP.field('ProductUpdates.POS_TAB_F171').val(data.data[0].SMSSubdepartments.F171);
                    editorNP.field('ProductUpdates.POS_TAB_F150').val(data.data[0].SMSSubdepartments.F150);
                });
            });

            // New Product Form: SRP Calculator
            $(document).on('click', '#calculateNP', function () {
                var srp;

                if (editorNP.field('ProductUpdates.PRICE_TAB_F49').val() == null || editorNP.field('ProductUpdates.PRICE_TAB_F49').val() == "") {
                    alert('Please enter the target margin.');
                }
                else {
                    var targetMargin = editorNP.field('ProductUpdates.PRICE_TAB_F49').val();

                    if (editorNP.field('ProductUpdates.COST_TAB_F19').val() == null || editorNP.field('ProductUpdates.COST_TAB_F19').val() == "") {
                        alert('Please enter the number of items per case or a 1.');
                    }
                    else {
                        var itemsPerCase = editorNP.field('ProductUpdates.COST_TAB_F19').val();

                        if (editorNP.field('ProductUpdates.COST_TAB_F38').val() == null || editorNP.field('ProductUpdates.COST_TAB_F38').val() == "") {
                            alert('Please enter a cost per case.');
                        }
                        else {
                            var costPerCase = editorNP.field('ProductUpdates.COST_TAB_F38').val();

                            srp = ((Math.round(((costPerCase / itemsPerCase) / (1 - (targetMargin / 100))) * 10) / 10) - .01);

                            editorNP.field('ProductUpdates.price_tab_f30').val(srp)
                        }
                    }
                }
            });

            // New Product Form: New Brand button
            $('<button id="newbrand" style="position:absolute;top:20%;right:7.25%">New Brand</button>').insertAfter(
                editorNP.field('ProductUpdates.OBJ_TAB_F155').input()
            );

            // New Product Form: Get New PLU Button
            $('<button id="getplu" style="position:absolute;top:20%;right:5%">Get New PLU</button>').insertAfter(
                editorNP.field('ProductUpdates.F01').input()
            );

            // New Product Form: Calculate button
            $('<button id="calculateNP" style="position:absolute;top:20%;right:8%">Calculate</button>').insertAfter(
                editorNP.field('ProductUpdates.COST_TAB_F38').input()
            );

            // New Product Form: Like code x button
            $('<i id="clearLikeCode" class="fa fa-close"></i>').insertAfter(
                editorNP.field('ProductUpdates.LIKE_TAB_F122').input()
            )

            // New Product Form: enter new Brand
            $(document).on('click', '#newbrand', function () {
                var newbrand = prompt("Please enter the new brand without special characters:");

                var format = /[^a-zA-Z0-9- ]/g;
                while (format.test(newbrand)) {
                    newbrand = prompt("No special characters...");
                }

                if (newbrand == null || newbrand == "") {
                    txt = "User cancelled the prompt.";
                } else {
                    brand = newbrand.toUpperCase().replace(/[^a-zA-Z0-9- ]/g, "");

                    var CreateNewBrand = $.ajax({
                        url: "/api/CreateNewBrand",
                        type: "POST",
                        dataType: "json",
                        data: {
                            action: 'create',
                            'data[0][Brands][Brand]': brand
                        },
                        error: function (error) {
                            console.log(`Error ${error}`);
                        }
                    }),
                        SetNewBrand = CreateNewBrand.then(function (data) {
                            return $.ajax({
                                url: "/api/GetBrands",
                                type: "GET",
                                dataType: "json",
                                error: function (error) {
                                    console.log(`Error ${error}`);
                                }
                            });
                        });

                    var optionsA = [];
                    SetNewBrand.done(function (data) {
                        var option = {};
                        for (i = 0; i < data.data.length; i++) {
                            option.label = data.data[i].Brands.Brand
                            optionsA.push(option);
                            option = {};
                        };
                        editorNP.field('ProductUpdates.OBJ_TAB_F155').update(optionsA);

                        // Refresh data for all tables.
                        table.ajax.reload();
                    });
                    editorNP.field('ProductUpdates.OBJ_TAB_F155').set(brand);
                }
            });

            // New Product Form: get New PLU
            $(document).on('click', '#getplu', function () {
                // If subdepartment has NOT been chosen, display alert.
                if (!editorNP.field('ProductUpdates.POS_TAB_F04').val()) {
                    alert('Please select a subdepartment!');
                }
                // If mettler select option has NOT been selected, display alert.
                else if (!editorNP.field('ProductUpdates.ismettlerrequired').val()) {
                    alert('Select yes or no to Mettler Product!');
                }
                // If it's a mettler product request.
                else if (editorNP.field('ProductUpdates.ismettlerrequired').val() == 'Yes') {

                    // Function to convert random weight UPC's to PLU's according to their subdepartment
                    // If subdepartment is meat related, remove subdepartment prefix to create a 4 digit PLU.
                    function convertUPCtoPLU(UPC, subdepartment) {
                        var PLU;
                        if (subdepartment == 41 || subdepartment == 53 || subdepartment == 54 || subdepartment == 55) {
                            PLU = pad((UPC.slice(4, -5)).replace(/^0+/, ''), 13, 0);
                        }
                        else {
                            PLU = pad(UPC.slice(3, -5), 13, 0);
                        }

                        return PLU;
                    };

                    // Function to convert PLU's to random weight UPC's to their subdepartment
                    // If subdepartment is meat related, remove subdepartment prefix to create a 4 digit PLU
                    function convertPLUtoUPC(PLU, subdepartment) {
                        var randomWeightUPC;
                        if (subdepartment == 41 || subdepartment == 53 || subdepartment == 54 || subdepartment == 55) {
                            randomWeightUPC = '0022' + pad(PLU.replace(/^0+/, ''), 4, 0) + '00000';
                        }
                        else {
                            randomWeightUPC = '002' + PLU.replace(/^0+/, '') + '00000';
                        }

                        return randomWeightUPC;
                    };

                    // Get current subdepartment code selected.
                    var subdepartment = editorNP.field('ProductUpdates.POS_TAB_F04').val();

                    // Get all used UPC's in Toolbox
                    var GetUsedToolboxUPCs = $.ajax({
                        url: "/api/GetReferenceUPCs",
                        type: "GET",
                        dataType: "json",
                        error: function (error) {
                            console.log(`Error ${error}`);
                        }
                    }),
                        // Then get subdepartment bounds from server dependent on selected subdepartment.
                        GetSubdepartmentBounds = GetUsedToolboxUPCs.then(function (data) {

                            // Creates an array of all used random weight UPCs within Toolbox.
                            usedToolboxUPCs = [];
                            for (i = 0; i < data.data.length; i++) {
                                usedToolboxUPCs.push(data.data[i].ReferenceUPCs.F01);
                            };

                            return $.ajax({
                                url: "api/GetSubdepartmentBounds",
                                type: "GET",
                                dataType: "json",
                                data: { 'F04': subdepartment },
                                error: function (error) {
                                    console.log(`Error ${error}`);
                                }
                            })
                        }),
                            // Then get all used UPC's within subdepartment range in SMS.
                            GetUsedSMSUPCs = GetSubdepartmentBounds.then(function (data) {

                                // Loops through Subdepartment's attributes to find the correct bounds.
                                for (i = 0; i < data.data.length; i++) {
                                    var tempLowerBound = (data.data[i].SMSSubdepartments.lowerBound);
                                    var tempUpperBound = (data.data[i].SMSSubdepartments.upperBound);
                                };

                                // Turn bounds into random weight UPC bounds.
                                lowerUPCBound = '002' + tempLowerBound + '00000';
                                upperUPCBound = '002' + tempUpperBound + '00000';

                                // Turn bounds into PLU bounds.
                                lowerPLUBound = '00000000' + tempLowerBound;
                                upperPLUBound = '00000000' + tempUpperBound;

                                // Start and end ranges for UPC's to check for availability.
                                startRange = tempLowerBound;
                                endRange = tempUpperBound;

                                // Return all UPC's within specified range.
                                return $.ajax({
                                    url: "/api/GetPLUUPCs",
                                    type: "GET",
                                    dataType: "json",
                                    data: {
                                        'lowerBound': lowerUPCBound,
                                        'upperBound': upperUPCBound,
                                        'lowerBound2': lowerPLUBound,
                                        'upperBound2': upperPLUBound
                                    },
                                    error: function (error) {
                                        console.log(`Error ${error}`);
                                    }
                                });
                            }),
                                // Then sort all used SMS UPCs and create their PLU or random weight UPC counterpart.
                                sortUsedSMSUPCs = GetUsedSMSUPCs.then(function (data) {

                                    // Creates an array of all used random weight UPC's in SMS.
                                    usedSMSUPCs = [];
                                    for (i = 0; i < data.data.length; i++) {
                                        // If PLU push and convert to UPC.
                                        if (data.data[i].OBJ_TAB.F01[2] == 0) {
                                            usedSMSUPCs.push(data.data[i].OBJ_TAB.F01);
                                            usedSMSUPCs.push(convertPLUtoUPC(data.data[i].OBJ_TAB.F01, subdepartment));
                                        }

                                        // If random weight UPC push and convert to PLU.
                                        if (data.data[i].OBJ_TAB.F01[2] == 2) {
                                            usedSMSUPCs.push(data.data[i].OBJ_TAB.F01);
                                            usedSMSUPCs.push(convertUPCtoPLU(data.data[i].OBJ_TAB.F01, subdepartment));
                                        }
                                    };

                                    // Sort usedSMSUPCs in ascending order
                                    usedSMSUPCs.sort(function (a, b) { return a - b });
                                }),
                                    // Update reference UPC's table and get all unusued SMS UPC's.
                                    getAllOpenUPCs = sortUsedSMSUPCs.then(function () {

                                        // Creates an array of all used random weight UPC's that exist in SMS and not Toolbox.
                                        updateReferenceUPCs = _.difference(usedSMSUPCs, usedToolboxUPCs);

                                        // Recursive function to Update ReferenceUPCs table with any random weight UPC and its according PLU.
                                        function processItem() {
                                            // Check length, if 0 quit loop...
                                            if (updateReferenceUPCs.length) {
                                                // Make a call always referencing results[0] since we're shfiting the array results...
                                                $.ajax({
                                                    url: "/api/CreateReferenceUPC",
                                                    type: 'POST',
                                                    data: {
                                                        action: 'create',
                                                        'data[0][ReferenceUPCs][F01]': updateReferenceUPCs[0]
                                                    },
                                                    error: function (error) {
                                                        console.log(`Error ${error}`);
                                                    },
                                                    success: function () {
                                                        updateReferenceUPCs.shift();
                                                        processItem();
                                                    }
                                                });
                                            }
                                        };

                                        // Call to the processItem() function.
                                        processItem();

                                        // Generates array of all numbers between range.
                                        var range = [];
                                        for (i = startRange; i < endRange; i++) {
                                            range.push('002' + i + '00000');
                                        };

                                        // Creates an array of all unused random weight UPCs in SMS
                                        unusedSMSUPCs = _.difference(range, usedSMSUPCs);
                                    });

                    // Execute chained AJAX requests to get all open SMS UPC's within range and set fields in form.
                    getAllOpenUPCs.done(function () {

                        // All available PLU/UPC's
                        var unused = _.difference(unusedSMSUPCs, usedToolboxUPCs);

                        // If subdepartment is meat related, remove subdepartment prefix to create a 4 digit PLU
                        var mettlerPLU = parseInt(convertUPCtoPLU(unused[0], subdepartment));

                        // Add new PLU to reference PLU table to make it unavailable for future use.
                        $.ajax({
                            url: "/api/CreateReferenceUPC",
                            type: "POST",
                            dataType: "json",
                            data: {
                                action: 'create',
                                'data[0][ReferenceUPCs][F01]': mettlerPLU,
                                'data[1][ReferenceUPCs][F01]': unused[0]
                            },
                            error: function (error) {
                                console.log(`Error ${error}`);
                            }
                        });

                        // Set form fields to generated values
                        editorNP.field('ProductUpdates.F01').val(unused[0]);
                        editorNP.field('ProductUpdates.ScalePLU').val(mettlerPLU);
                    });

                    // If it's a POS PLU request
                } else if (editorNP.field('ProductUpdates.ismettlerrequired').val() == 'No') {

                    // Function to convert random weight UPC's to PLU's according to their subdepartment
                    // If subdepartment is meat related, remove subdepartment prefix to create a 4 digit PLU.
                    function convertUPCtoPLU(UPC, subdepartment) {
                        var PLU;
                        if (subdepartment == 41 || subdepartment == 53 || subdepartment == 54 || subdepartment == 55) {
                            PLU = pad((UPC.slice(4, -5)).replace(/^0+/, ''), 13, 0);
                        }
                        else {
                            PLU = pad(UPC.slice(3, -5), 13, 0);
                        }

                        return PLU;
                    };

                    // Function to convert PLU's to random weight UPC's to their subdepartment
                    // If subdepartment is meat related, remove subdepartment prefix to create a 4 digit PLU
                    function convertPLUtoUPC(PLU, subdepartment) {
                        var randomWeightUPC;
                        if (subdepartment == 41 || subdepartment == 53 || subdepartment == 54 || subdepartment == 55) {
                            randomWeightUPC = '0022' + pad(PLU.replace(/^0+/, ''), 4, 0) + '00000';
                        }
                        else {
                            randomWeightUPC = '002' + PLU.replace(/^0+/, '') + '00000';
                        }

                        return randomWeightUPC;
                    };

                    // Gathers subdepartment code
                    var subdepartment = editorNP.field('ProductUpdates.POS_TAB_F04').val();

                    // Get all used UPC's in Toolbox
                    var GetUsedToolboxUPCs = $.ajax({
                        url: "/api/GetReferenceUPCs",
                        type: "GET",
                        dataType: "json",
                        error: function (error) {
                            console.log(`Error ${error}`);
                        }
                    }),
                        // Then get subdepartment bounds from server dependent on selected subdepartment.
                        GetSubdepartmentBounds = GetUsedToolboxUPCs.then(function (data) {

                            // Creates an array of all used random weight UPCs within Toolbox.
                            usedToolboxUPCs = [];
                            for (i = 0; i < data.data.length; i++) {
                                usedToolboxUPCs.push(data.data[i].ReferenceUPCs.F01);
                            };

                            return $.ajax({
                                url: "api/GetSubdepartmentBounds",
                                type: "GET",
                                dataType: "json",
                                data: { 'F04': subdepartment },
                                error: function (error) {
                                    console.log(`Error ${error}`);
                                }
                            })
                        }),
                            // Then get all used UPC's within subdepartment range in SMS.
                            GetUsedSMSUPCs = GetSubdepartmentBounds.then(function (data) {

                                // Loops through Subdepartment's attributes to find the correct bounds.
                                for (i = 0; i < data.data.length; i++) {
                                    var tempLowerBound = (data.data[i].SMSSubdepartments.lowerBound);
                                    var tempUpperBound = (data.data[i].SMSSubdepartments.upperBound);
                                };

                                // Turn bounds into random weight UPC bounds.
                                lowerUPCBound = '002' + tempLowerBound + '00000';
                                upperUPCBound = '002' + tempUpperBound + '00000';

                                // Turn bounds into PLU bounds.
                                lowerPLUBound = '00000000' + tempLowerBound;
                                upperPLUBound = '00000000' + tempUpperBound;

                                // Start and end ranges for UPC's to check for availability.
                                startRange = tempLowerBound;
                                endRange = tempUpperBound;

                                // Return all UPC's within specified range.
                                return $.ajax({
                                    url: "/api/GetPLUUPCs",
                                    type: "GET",
                                    dataType: "json",
                                    data: {
                                        'lowerBound': lowerUPCBound,
                                        'upperBound': upperUPCBound,
                                        'lowerBound2': lowerPLUBound,
                                        'upperBound2': upperPLUBound
                                    },
                                    error: function (error) {
                                        console.log(`Error ${error}`);
                                    }
                                });
                            }),
                                // Then sort all used SMS UPCs and create their PLU or random weight UPC counterpart.
                                sortUsedSMSUPCs = GetUsedSMSUPCs.then(function (data) {

                                    // Creates an array of all used random weight UPC's in SMS.
                                    usedSMSUPCs = [];
                                    for (i = 0; i < data.data.length; i++) {
                                        // If PLU push and convert to UPC.
                                        if (data.data[i].OBJ_TAB.F01[2] == 0) {
                                            usedSMSUPCs.push(data.data[i].OBJ_TAB.F01);
                                            usedSMSUPCs.push(convertPLUtoUPC(data.data[i].OBJ_TAB.F01, subdepartment));
                                        }

                                        // If random weight UPC push and convert to PLU.
                                        if (data.data[i].OBJ_TAB.F01[2] == 2) {
                                            usedSMSUPCs.push(data.data[i].OBJ_TAB.F01);
                                            usedSMSUPCs.push(convertUPCtoPLU(data.data[i].OBJ_TAB.F01, subdepartment));
                                        }
                                    };

                                    // Sort usedSMSUPCs in ascending order
                                    usedSMSUPCs.sort(function (a, b) { return a - b });
                                }),
                                    // Update reference UPC's table and get all unusued SMS UPC's.
                                    getAllOpenUPCs = sortUsedSMSUPCs.then(function () {

                                        // Creates an array of all used random weight UPC's that exist in SMS and not Toolbox.
                                        updateReferenceUPCs = _.difference(usedSMSUPCs, usedToolboxUPCs);

                                        // Recursive function to Update ReferenceUPCs table with any random weight UPC and its according PLU.
                                        function processItem() {
                                            // Check length, if 0 quit loop...
                                            if (updateReferenceUPCs.length) {
                                                // Make a call always referencing results[0] since we're shfiting the array results...
                                                $.ajax({
                                                    url: "/api/CreateReferenceUPC",
                                                    type: 'POST',
                                                    data: {
                                                        action: 'create',
                                                        'data[0][ReferenceUPCs][F01]': updateReferenceUPCs[0]
                                                    },
                                                    error: function (error) {
                                                        console.log(`Error ${error}`);
                                                    },
                                                    success: function () {
                                                        updateReferenceUPCs.shift();
                                                        processItem();
                                                    }
                                                });
                                            }
                                        };

                                        // Call to the processItem() function.
                                        processItem();

                                        // Generates array of all numbers between range.
                                        var range = [];
                                        for (i = startRange; i < endRange; i++) {
                                            range.push('00000000' + i);
                                        };

                                        // Creates an array of all unused random weight UPCs in SMS
                                        unusedSMSUPCs = _.difference(range, usedSMSUPCs);
                                    });

                    // Execute chained AJAX requests to get all open SMS UPC's within range and set fields in form.
                    getAllOpenUPCs.done(function () {

                        // All available PLU/UPC's
                        var unused = _.difference(unusedSMSUPCs, usedToolboxUPCs);

                        // If subdepartment is meat related, remove subdepartment prefix to create a 4 digit PLU
                        var randomWeightUPC = convertPLUtoUPC(unused[0], subdepartment);

                        // Add new PLU to reference PLU table to make it unavailable for future use.
                        $.ajax({
                            url: "/api/CreateReferenceUPC",
                            type: "POST",
                            dataType: "json",
                            data: {
                                action: 'create',
                                'data[0][ReferenceUPCs][F01]': unused[0],
                                'data[1][ReferenceUPCs][F01]': randomWeightUPC
                            },
                            error: function (error) {
                                console.log(`Error ${error}`);
                            }
                        });

                        // Set form fields to generated values
                        editorNP.field('ProductUpdates.F01').val(parseInt(unused[0]));
                    });
                } else {
                    alert('Uh oh, something went wrong...');
                }
            });

            // New Product Form: field validation
            editorNP.on('preSubmit', function (e, o, action) {
                if (action !== 'remove') {

                    if (!editorNP.field('ProductUpdates.locationID').val()) {
                        editorNP.field('ProductUpdates.locationID').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.ismettlerrequired').val()) {
                        editorNP.field('ProductUpdates.ismettlerrequired').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.F01').val()) {
                        editorNP.field('ProductUpdates.F01').error('Required');
                    } else {
                        // Check if UPC already exists in SMS
                        var UPC = pad(editorNP.field('ProductUpdates.F01').val(), 13, 0);

                        var CheckUPC = $.ajax({
                            url: "api/CheckUPC",
                            type: "GET",
                            dataType: "json",
                            error: function (error) {
                                console.log(`Error ${error}`);
                            }
                        });

                        CheckUPC.done(function (data) {
                            var used = [];
                            for (i = 0; i < data.data.length; i++) {
                                used.push(data.data[i].OBJ_TAB.F01);
                            }

                            for (i = 0; i < used.length; i++) {
                                if (UPC == used[i]) {
                                    editorNP.field('ProductUpdates.F01').error("UPC/PLU already exists in SMS");
                                }
                            }
                        });
                    }

                    if (!editorNP.field('ProductUpdates.labelID').val()) {
                        editorNP.field('ProductUpdates.labelID').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.OBJ_TAB_F155').val()) {
                        editorNP.field('ProductUpdates.OBJ_TAB_F155').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.OBJ_TAB_F29').val()) {
                        editorNP.field('ProductUpdates.OBJ_TAB_F29').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.OBJ_TAB_F22').val()) {
                        editorNP.field('ProductUpdates.OBJ_TAB_F22').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.OBJ_TAB_F255').val()) {
                        editorNP.field('ProductUpdates.OBJ_TAB_F255').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.POS_TAB_F04').val()) {
                        editorNP.field('ProductUpdates.POS_TAB_F04').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.OBJ_TAB_F17').val()) {
                        editorNP.field('ProductUpdates.OBJ_TAB_F17').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.OBJ_TAB_F18').val()) {
                        editorNP.field('ProductUpdates.OBJ_TAB_F18').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.price_tab_f30').val()) {
                        editorNP.field('ProductUpdates.price_tab_f30').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.COST_TAB_F27').val()) {
                        editorNP.field('ProductUpdates.COST_TAB_F27').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.COST_TAB_F19').val()) {
                        editorNP.field('ProductUpdates.COST_TAB_F19').error('Required');
                    }

                    if (!editorNP.field('ProductUpdates.COST_TAB_F38').val()) {
                        editorNP.field('ProductUpdates.COST_TAB_F38').error('Required');
                    }

                    // If any error was reported, cancel the submission so it can be corrected
                    if (this.inError()) {
                        return false;
                    }
                }
            });

            // New Product Form: clear like code select field
            $(document).on('keydown', '#likecodeNP', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editorNP.field('ProductUpdates.LIKE_TAB_F122').val(null);
                }
            });

            // New Product Form: clear like code select field
            $(document).on('click', '#clearLikeCode', function () {
                    editorNP.field('ProductUpdates.LIKE_TAB_F122').val(null);
            });


            /***********************************************************************************************************************/


            // Update An Existing Product Form
            var editor = new $.fn.dataTable.Editor({
                ajax: '/api/ProductMaintenance',
                table: '#ProductMaintenance',
                formOptions: {
                    main: {
                        onReturn: false,
                        onBackground: false
                    }
                },
                fields: [
                    {
                        label: "Product Update Type:",
                        name: "ProductUpdates.requesttypeID",
                        type: "select",
                        placeholder: "Select a request type"
                    }, {
                        label: "Location:",
                        name: "ProductUpdates.locationID",
                        type: "select",
                        placeholder: "Select a location"
                    }, {
                        label: "Mettler Product:",
                        name: "ProductUpdates.ismettlerrequired",
                        type: "select",
                        options: ["Yes", "No"],
                        placeholder: "Select an option"
                    }, {
                        label: "Shelf Tag:",
                        name: "ProductUpdates.labelID",
                        type: "select",
                        placeholder: "Select a label size"
                    }, {
                        label: "UPC/PLU:",
                        name: "ProductUpdates.F01",
                        id: "UPC"
                    }, {
                        label: "Mettler PLU:",
                        name: "ProductUpdates.ScalePLU"
                    }, {
                        label: "Vendor:",
                        name: "ProductUpdates.COST_TAB_F27",
                        type: "select",
                        placeholder: "Select a vendor"
                    }, {
                        label: "Reorder code:",
                        name: "ProductUpdates.COST_TAB_F26"
                    }, {
                        label: "Retail margin:",
                        name: "ProductUpdates.PRICE_TAB_F49"
                    }, {
                        label: "Items per case:",
                        name: "ProductUpdates.COST_TAB_F19"
                    }, {
                        label: "Case cost:",
                        name: "ProductUpdates.COST_TAB_F38"
                    }, {
                        label: "Retail Price:",
                        name: "ProductUpdates.price_tab_f30"
                    }, {
                        label: "TPR Price:",
                        name: "ProductUpdates.promotprprice"
                    }, {
                        label: "TPR Start:",
                        name: "ProductUpdates.promotprstartdate",
                        type: "datetime",
                        format: "M/DD/YYYY"
                    }, {
                        label: "TPR End:",
                        name: "ProductUpdates.promotprenddate",
                        type: "datetime",
                        format: "M/DD/YYYY"
                    }, {
                        label: "Sign:",
                        name: "ProductUpdates.signID",
                        type: "select",
                        placeholder: "Select a sign size"
                    }, {
                        label: "Brand:",
                        name: "ProductUpdates.OBJ_TAB_F155",
                        type: "select",
                        placeholder: "Select a brand",
                        def: "Select a brand",
                        id: "brandPU"
                    }, {
                        label: "Shelf Tag & Receipt Description:",
                        name: "ProductUpdates.OBJ_TAB_F29"
                    }, {
                        label: "Size:",
                        name: "ProductUpdates.OBJ_TAB_F22"
                    }, {
                        label: "Sign Description:",
                        name: "ProductUpdates.OBJ_TAB_F255"
                    }, {
                        label: "Subdepartment:",
                        name: "ProductUpdates.POS_TAB_F04",
                        type: "select",
                        placeholder: "Select a subdepartment",
                        id: "subdepartmentPU"
                    }, {
                        label: "Category:",
                        name: "ProductUpdates.OBJ_TAB_F17",
                        optionsPair: {
                            label: 'F1023',
                            value: 'F17'
                        },
                        type: "select",
                        placeholder: "Select a category",
                        id: "categoryPU"
                    }, {
                        label: "Report:",
                        name: "ProductUpdates.OBJ_TAB_F18",
                        type: "select",
                        placeholder: "Select a report",
                        id: "reportPU"
                    }, {
                        label: "Family button:",
                        name: "ProductUpdates.OBJ_TAB_F16",
                        type: "select",
                        placeholder: "Select a family button",
                        id: "familyPU"
                    }, {
                        label: "Like:",
                        name: "ProductUpdates.LIKE_TAB_F122",
                        type: "select",
                        placeholder: "Select a like code",
                        id: "likecodePU"
                    }, {
                        label: "SNAP:",
                        name: "ProductUpdates.POS_TAB_F79",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Scalable:",
                        name: "ProductUpdates.POS_TAB_F82",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Taxable:",
                        name: "ProductUpdates.POS_TAB_F81",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Taxable 2:",
                        name: "ProductUpdates.POS_TAB_F96",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        type: "checkbox",
                        type: "hidden",
                        unselectedValue: 0,
                        separator: "|"
                    }, {
                        label: "Stop discount:",
                        name: "ProductUpdates.POS_TAB_F150",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0,
                        type: "hidden"
                    }, {
                        label: "Force price:",
                        name: "ProductUpdates.POS_TAB_F83",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0,
                        type: "hidden"
                    }, {
                        label: "WIC:",
                        name: "ProductUpdates.POS_TAB_F178",
                        type: "checkbox",
                        options: [
                            { label: "", "value": 1 }
                        ],
                        separator: "|",
                        unselectedValue: 0
                    }, {
                        label: "Client age:",
                        name: "ProductUpdates.POS_TAB_F171",
                        type: "hidden"
                    }, {
                        label: "Status:",
                        name: "ProductUpdates.productstatusID",
                        type: "hidden",
                        def: "3"
                    }, {
                        label: "Notes:",
                        name: "ProductUpdates.AdditionalRequestNotes",
                        type: "textarea"
                    }, {
                        label: "Item Type:",
                        name: "ProductUpdates.ScaleItemTypeID",
                        type: "select",
                        placeholder: "Select an option",
                        options: [
                            { label: "Price per pound", value: "1" },
                            { label: "Standard pack", value: "2" }
                        ]
                    }, {
                        label: "Tare:",
                        name: "ProductUpdates.TareNetWeight"
                    }, {
                        label: "Shelf Life:",
                        name: "ProductUpdates.ShelfLife"
                    }, {
                        label: "Ingredients:",
                        name: "ProductUpdates.IngredientList",
                        type: "textarea"
                    }, {
                        label: "Created by:",
                        name: "ProductUpdates.createdby",
                        type: "readonly",
                        type: "hidden",
                        def: currentUser
                    }, {
                        label: "Date created:",
                        name: "ProductUpdates.datecreated",
                        type: "hidden",
                        def: getDate()
                    }, {
                        label: "Date completed:",
                        name: "ProductUpdates.completeddate"
                    }, {
                        label: "Completed by:",
                        name: "ProductUpdates.completedby"
                    }, {
                        label: "Last updated on:",
                        name: "ProductUpdates.lastupdatedon",
                        type: "hidden"
                    }, {
                        label: "Last updated by:",
                        name: "ProductUpdates.lastupdatedby",
                        type: "hidden"
                    }
                ]
            });

            // Update An Existing Product Form: tooltips that appear when a form field is hovered over.
            $(editor.field('ProductUpdates.locationID').node()).attr("data-toggle", "tooltip").attr("title", 'Location of where this update request should be applied.');
            $(editor.field('ProductUpdates.ismettlerrequired').node()).attr("data-toggle", "tooltip").attr("title", 'Is the product weighed or labeled at a Mettler Toledo scale?');
            $(editor.field('ProductUpdates.labelID').node()).attr("data-toggle", "tooltip").attr("title", 'Shelf tag to be queued up on SMS.');
            $(editor.field('ProductUpdates.F01').node()).attr("data-toggle", "tooltip").attr("title", 'Enter all digits of the UPC except for the last number (check digit).');
            $(editor.field('ProductUpdates.ScalePLU').node()).attr("data-toggle", "tooltip").attr("title", 'PLU that is typed in at a Mettler Toledo scale.');
            $(editor.field('ProductUpdates.OBJ_TAB_F155').node()).attr("data-toggle", "tooltip").attr("title", 'Brand of product. If no brand, vendor or manufacturer.');
            $(editor.field('ProductUpdates.OBJ_TAB_F29').node()).attr("data-toggle", "tooltip").attr("title", 'Enter product description in a backwards fashion to group similar items in SMS. e.g. "Organic Vanilla Greek Yogurt" would be entered as "Greek Yogurt Vanilla Org". This description will appear at the POS and reports.');
            $(editor.field('ProductUpdates.OBJ_TAB_F22').node()).attr("data-toggle", "tooltip").attr("title", 'Abbreviate the unit of measure. For multiple pack items, use an "x" to separate the count from the size. e.g. a 12 pack of 12 oz cans would be "12 x 12 oz.".');
            $(editor.field('ProductUpdates.OBJ_TAB_F255').node()).attr("data-toggle", "tooltip").attr("title", 'Enter the description in common language using the full description. This description will appear on sale signage.');
            $(editor.field('ProductUpdates.POS_TAB_F04').node()).attr("data-toggle", "tooltip").attr("title", 'Subdepartment that receives the sales for this item.');
            $(editorNP.field('ProductUpdates.POS_TAB_F79').node()).attr("data-toggle", "tooltip").attr("title", 'Check the box if the product is SNAP/EBT/Food stamp eligible.');
            $(editorNP.field('ProductUpdates.POS_TAB_F82').node()).attr("data-toggle", "tooltip").attr("title", 'Check the box if the product is to be weighed at a scale.');
            $(editorNP.field('ProductUpdates.POS_TAB_F81').node()).attr("data-toggle", "tooltip").attr("title", 'Check the box if the product is taxable.');
            $(editorNP.field('ProductUpdates.POS_TAB_F178').node()).attr("data-toggle", "tooltip").attr("title", 'Check the box if the product is WIC eligible.');
            $(editor.field('ProductUpdates.OBJ_TAB_F17').node()).attr("data-toggle", "tooltip").attr("title", 'Categories used to organize a subdepartment into smaller groups.');
            $(editor.field('ProductUpdates.OBJ_TAB_F18').node()).attr("data-toggle", "tooltip").attr("title", 'Report codes used to identify if a product is organic or local (produced within a 200 mile radius of either or both stores). Use "Conventional" if none of the available report codes apply.');
            $(editor.field('ProductUpdates.OBJ_TAB_F16').node()).attr("data-toggle", "tooltip").attr("title", 'Family codes used to organize buttons at the register in Hackberrys Bistro.');
            $(editor.field('ProductUpdates.LIKE_TAB_F122').node()).attr("data-toggle", "tooltip").attr("title", 'Like codes used to group UPCs & PLUs together to facilitate quicker price changes.');
            $(editor.field('ProductUpdates.COST_TAB_F27').node()).attr("data-toggle", "tooltip").attr("title", 'Vendor that the product is ordered from.');
            $(editor.field('ProductUpdates.COST_TAB_F26').node()).attr("data-toggle", "tooltip").attr("title", 'Re-order code that the vendor uses for orders.');
            $(editor.field('ProductUpdates.PRICE_TAB_F49').node()).attr("data-toggle", "tooltip").attr("title", 'Target margin of the product that is used for updating prices in the future.');
            $(editor.field('ProductUpdates.COST_TAB_F19').node()).attr("data-toggle", "tooltip").attr("title", 'Number of items in a case. If using unit cost, enter a "1".');
            $(editor.field('ProductUpdates.COST_TAB_F38').node()).attr("data-toggle", "tooltip").attr("title", 'Case cost or unit cost.');
            $(editor.field('ProductUpdates.price_tab_f30').node()).attr("data-toggle", "tooltip").attr("title", 'Price the product will be sold at the register.');
            $(editor.field('ProductUpdates.promotprstartdate').node()).attr("data-toggle", "tooltip").attr("title", 'Temporarily reduced price.');
            $(editor.field('ProductUpdates.promotprstartdate').node()).attr("data-toggle", "tooltip").attr("title", 'The day the temporarily reduced price will begin.');
            $(editor.field('ProductUpdates.promotprenddate').node()).attr("data-toggle", "tooltip").attr("title", 'The day the temporarily reduced price will end.');
            $(editor.field('ProductUpdates.signID').node()).attr("data-toggle", "tooltip").attr("title", 'Signage to be queued up on SMS.');
            $(editor.field('ProductUpdates.AdditionalRequestNotes').node()).attr("data-toggle", "tooltip").attr("title", 'Additional information that needs to be conveyed.');
            $(editor.field('ProductUpdates.ScaleItemTypeID').node()).attr("data-toggle", "tooltip").attr("title", 'Price per pound products have a variable weight. Standard pack products are sold by the each and can have a net weight assigned to them.');
            $(editor.field('ProductUpdates.TareNetWeight').node()).attr("data-toggle", "tooltip").attr("title", 'Price per pound products need a tare weight entered in as a decimal e.g. 0.08 for tare fo 8.');
            $(editor.field('ProductUpdates.ShelfLife').node()).attr("data-toggle", "tooltip").attr("title", 'Shelf life of the product in days.');
            $(editor.field('ProductUpdates.IngredientList').node()).attr("data-toggle", "tooltip").attr("title", 'Ingredients, allergens, or country of origins.');

            // Update An Existing Product Form: converts receipt description to title case
            editor.field('ProductUpdates.OBJ_TAB_F29').input().on('blur', function () {
                var productName = editor.field('ProductUpdates.OBJ_TAB_F29').val();
                productName = titleCase(productName);
                productName = limitLength(productName, 32)
                editor.field('ProductUpdates.OBJ_TAB_F29').val(productName);
            });

            // Update An Existing Product Form: format size field
            editor.field('ProductUpdates.OBJ_TAB_F22').input().on('blur', function () {
                var size = editor.field('ProductUpdates.OBJ_TAB_F22').val();
                size = sizeFormatter(size);
                size = limitLength(size, 10)
                editor.field('ProductUpdates.OBJ_TAB_F22').val(size);
            });

            // Update An Existing Product Form: converts signage descriptions to title case
            editor.field('ProductUpdates.OBJ_TAB_F255').input().on('blur', function () {
                var productName = editor.field('ProductUpdates.OBJ_TAB_F255').val();
                productName = titleCase(productName);
                productName = limitLength(productName, 64)
                editor.field('ProductUpdates.OBJ_TAB_F255').val(productName);
            });

            // Update An Existing Product Form: removes all charactesr from case cost field
            editor.field('ProductUpdates.COST_TAB_F38').input().on('blur', function () {
                var caseCost = editor.field('ProductUpdates.COST_TAB_F38').val();
                caseCost = caseCostFormatter(caseCost);
                editor.field('ProductUpdates.COST_TAB_F38').val(caseCost);
            });

            // Update An Existing Product Form: shows completed by info if product is marked as complete
            editor.on('open', function () {
                if (editor.field('ProductUpdates.productstatusID').val() == 4) {
                    editor.field('ProductUpdates.completeddate').show();
                    editor.field('ProductUpdates.completedby').show();
                }
                else {
                    editor.field('ProductUpdates.completeddate').hide();
                    editor.field('ProductUpdates.completedby').hide();
                }
            });

            // Update An Existing Product Form: hides cost info on load
            editor.field('ProductUpdates.POS_TAB_F04').input().on('change', function () {
                editor.field('ProductUpdates.COST_TAB_F27').hide();
                editor.field('ProductUpdates.COST_TAB_F26').hide();
                editor.field('ProductUpdates.PRICE_TAB_F49').hide();
                editor.field('ProductUpdates.COST_TAB_F19').hide();

                // Hide calculate button
                document.getElementById('calculate').style.visibility = 'hidden';
            });

            // Update An Existing Product Form: hides TPR related fields unless a promotional request type is selected
            editor.field('ProductUpdates.requesttypeID').input().on('change', function () {
                if (editor.field('ProductUpdates.requesttypeID').val() == '2' || editor.field('ProductUpdates.requesttypeID').val() == '3' || editor.field('ProductUpdates.requesttypeID').val() == '4' || editor.field('ProductUpdates.requesttypeID').val() == '5' || editor.field('ProductUpdates.requesttypeID').val() == '7' || editor.field('ProductUpdates.requesttypeID').val() == '8' || editor.field('ProductUpdates.requesttypeID').val() == '9') {
                    editor.field('ProductUpdates.signID').show();
                    editor.field('ProductUpdates.promotprstartdate').show();
                    editor.field('ProductUpdates.promotprenddate').show();
                    editor.field('ProductUpdates.promotprprice').show();
                    editor.field('ProductUpdates.PRICE_TAB_F49').show();
                } else {
                    editor.field('ProductUpdates.signID').hide();
                    editor.field('ProductUpdates.promotprstartdate').hide();
                    editor.field('ProductUpdates.promotprenddate').hide();
                    editor.field('ProductUpdates.promotprprice').hide();
                }
            });

            // Update An Existing Product Form: hides Family Button unless Hackberry's Brand is selected
            editor.field('ProductUpdates.requesttypeID').input().on('change', function () {
                if (editor.field('ProductUpdates.requesttypeID').val() == '10') {
                    editor.field('ProductUpdates.OBJ_TAB_F16').show();
                } else {
                    editor.field('ProductUpdates.OBJ_TAB_F16').hide();
                }
            });

            // Update An Existing Product Form: hides Like code unless Produce is selected
            editor.field('ProductUpdates.POS_TAB_F04').input().on('change', function () {
                if (editor.field('ProductUpdates.POS_TAB_F04').val() == '6' || editor.field('ProductUpdates.POS_TAB_F04').val() == '17' || editor.field('ProductUpdates.POS_TAB_F04').val() == '3') {
                    editor.field('ProductUpdates.LIKE_TAB_F122').show();
                } else {
                    editor.field('ProductUpdates.LIKE_TAB_F122').hide();
                }
            });

            // Update An Existing Product Form: hides Mettler Ingredients unless Yes to Mettler Product option is selected
            editor.field('ProductUpdates.ismettlerrequired').input().on('change', function () {
                if (editor.field('ProductUpdates.ismettlerrequired').val() == 'Yes') {
                    editor.field('ProductUpdates.ScalePLU').show();
                    editor.field('ProductUpdates.ScaleItemTypeID').show();
                    editor.field('ProductUpdates.TareNetWeight').show();
                    editor.field('ProductUpdates.ShelfLife').show();
                    editor.field('ProductUpdates.IngredientList').show();

                    // Force price
                    editor.field('ProductUpdates.POS_TAB_F83').val(1);
                } else {
                    editor.field('ProductUpdates.ScalePLU').hide();
                    editor.field('ProductUpdates.ScaleItemTypeID').hide();
                    editor.field('ProductUpdates.TareNetWeight').hide();
                    editor.field('ProductUpdates.ShelfLife').hide();
                    editor.field('ProductUpdates.IngredientList').hide();
                }
            });

            // Update An Existing Product Form: set scalable checkbox on Item Type selection
            editor.field('ProductUpdates.ScaleItemTypeID').input().on('change', function () {
                if (editor.field('ProductUpdates.ScaleItemTypeID').val() == '1') {
                    editor.field('ProductUpdates.POS_TAB_F82').val(1);
                    editor.field('ProductUpdates.OBJ_TAB_F22').val("per lb.")
                } else {
                    editor.field('ProductUpdates.POS_TAB_F82').val(0);
                }
            });

            // Update An Existing Product Form: filter available categories on subdepartment selection
            editor.dependent('ProductUpdates.POS_TAB_F04', '/api/Categories');

            // Update An Existing Product Form: set default POS attributes
            editor.dependent('ProductUpdates.POS_TAB_F04', function () {
                var subdepartment = editor.field('ProductUpdates.POS_TAB_F04').val();

                var GetSubdepartmentAttributes = $.ajax({
                    url: "api/GetSubdepartmentBounds",
                    type: "GET",
                    dataType: "json",
                    data: { 'F04': subdepartment },
                    error: function (error) {
                        console.log(`Error ${error}`);
                    }
                });

                GetSubdepartmentAttributes.then(function (data) {
                    editor.field('ProductUpdates.POS_TAB_F79').val(data.data[0].SMSSubdepartments.F79);
                    editor.field('ProductUpdates.POS_TAB_F178').val(data.data[0].SMSSubdepartments.F178);
                    editor.field('ProductUpdates.POS_TAB_F81').val(data.data[0].SMSSubdepartments.F81);
                    editor.field('ProductUpdates.POS_TAB_F171').val(data.data[0].SMSSubdepartments.F171);
                    editor.field('ProductUpdates.POS_TAB_F150').val(data.data[0].SMSSubdepartments.F150);
                });
            });

            // Update An Existing Product Form: display cost info when cost button is clicked
            var costCounter = 0;
            $(document).on('click', '#cost', function () {
                if (costCounter == 0) {
                    editor.field('ProductUpdates.COST_TAB_F27').show();
                    editor.field('ProductUpdates.COST_TAB_F26').show();
                    editor.field('ProductUpdates.PRICE_TAB_F49').show();
                    editor.field('ProductUpdates.COST_TAB_F19').show();
                    editor.field('ProductUpdates.COST_TAB_F38').show();

                    // Show calculate button
                    document.getElementById('calculate').style.visibility = 'visible';

                    costCounter = 1
                } else {
                    editor.field('ProductUpdates.COST_TAB_F27').hide();
                    editor.field('ProductUpdates.COST_TAB_F26').hide();
                    editor.field('ProductUpdates.PRICE_TAB_F49').hide();
                    editor.field('ProductUpdates.COST_TAB_F19').hide();
                    editor.field('ProductUpdates.COST_TAB_F38').hide();

                    // Hide calculate button
                    document.getElementById('calculate').style.visibility = 'hidden';

                    costCounter = 0
                }
            });

            // Update An Existing Product Form: display SRP calculator info when cost button is clicked
            var srpCounter = 0;
            $(document).on('click', '#srpcalculator', function () {
                if (srpCounter == 0) {
                    editor.field('ProductUpdates.COST_TAB_F19').show();
                    editor.field('ProductUpdates.COST_TAB_F38').show();
                    editor.field('ProductUpdates.PRICE_TAB_F49').show();

                    // Show calculate button
                    document.getElementById('calculate').style.visibility = 'visible';

                    srpCounter = 1
                } else {
                    editor.field('ProductUpdates.COST_TAB_F19').hide();
                    editor.field('ProductUpdates.COST_TAB_F38').hide();
                    editor.field('ProductUpdates.PRICE_TAB_F49').hide();

                    // Hide calculate button
                    document.getElementById('calculate').style.visibility = 'hidden';

                    srpCounter = 0
                }
            });

            // Update An Existing Product Form: SRP Calculator
            $(document).on('click', '#calculate', function () {
                var srp;

                if (editor.field('ProductUpdates.PRICE_TAB_F49').val() == null || editor.field('ProductUpdates.PRICE_TAB_F49').val() == "") {
                    alert('Please enter the target margin.');
                }
                else {
                    var targetMargin = editor.field('ProductUpdates.PRICE_TAB_F49').val();

                    if (editor.field('ProductUpdates.COST_TAB_F19').val() == null || editor.field('ProductUpdates.COST_TAB_F19').val() == "") {
                        alert('Please enter the number of items per case or a 1.');
                    }
                    else {
                        var itemsPerCase = editor.field('ProductUpdates.COST_TAB_F19').val();

                        if (editor.field('ProductUpdates.COST_TAB_F38').val() == null || editor.field('ProductUpdates.COST_TAB_F38').val() == "") {
                            alert('Please enter a cost per case.');
                        }
                        else {
                            var costPerCase = editor.field('ProductUpdates.COST_TAB_F38').val();

                            srp = ((Math.round(((costPerCase / itemsPerCase) / (1 - (targetMargin / 100))) * 10) / 10) - .01);

                            editor.field('ProductUpdates.price_tab_f30').val(srp)
                        }
                    }
                }
            });

            // Update An Existing Product Form: Cost button
            $('<button id="cost" style="position:absolute;top:20%;right:12.5%">Cost</button>').insertAfter(
                editor.field('ProductUpdates.price_tab_f30').input()
            );

            // Update An Existing Product Form: SRP button
            $('<button id="srpcalculator" style="position:absolute;top:20%;right:5%">SRP</button>').insertAfter(
                editor.field('ProductUpdates.price_tab_f30').input()
            );

            // Update An Existing Product Form: Calculate button
            $('<button id="calculate" style="position:absolute;top:20%;right:8%">Calculate</button>').insertAfter(
                editor.field('ProductUpdates.COST_TAB_F38').input()
            );

            // Update An Existing Product Form: Like code x button
            $('<i id="clearLikeCode" class="fa fa-close"></i>').insertAfter(
                editor.field('ProductUpdates.LIKE_TAB_F122').input()
            );

            // Update An Existing Product Form: field validation
            editor.on('preSubmit', function (e, o, action) {
                if (action !== 'remove') {

                    if (!editor.field('ProductUpdates.requesttypeID').val()) {
                        editor.field('ProductUpdates.requesttypeID').error('Required');
                    }

                    if (!editor.field('ProductUpdates.locationID').val()) {
                        editor.field('ProductUpdates.locationID').error('Required');
                    }

                    if (!editor.field('ProductUpdates.ismettlerrequired').val()) {
                        editor.field('ProductUpdates.ismettlerrequired').error('Required');
                    }

                    if (!editor.field('ProductUpdates.F01').val()) {
                        editor.field('ProductUpdates.F01').error('Required');
                    } else {
                        // Check if UPC doesn't exist in SMS
                        var UPC = pad(editor.field('ProductUpdates.F01').val(), 13, 0);

                        var CheckUPC = $.ajax({
                            url: "api/CheckUPC",
                            type: "GET",
                            dataType: "json",
                            error: function (error) {
                                console.log(`Error ${error}`);
                            }
                        });

                        CheckUPC.done(function (data) {
                            var used = [];
                            for (i = 0; i < data.data.length; i++) {
                                used.push(data.data[i].OBJ_TAB.F01);
                            }

                            var count = 0;
                            for (i = 0; i < used.length; i++) {
                                if (UPC == used[i]) {
                                    count++
                                }
                            }

                            if (count == 0) {
                                editor.field('ProductUpdates.F01').error("UPC/PLU does not exist in SMS");
                            }
                        });
                    }

                    // Fields required for PFC & NCG Fresh Deals
                    if (editor.field('ProductUpdates.requesttypeID').val() == 4 || editor.field('ProductUpdates.requesttypeID').val() == 9) {

                        // retail
                        if (!editor.field('ProductUpdates.price_tab_f30').val()) {
                            editor.field('ProductUpdates.price_tab_f30').error('Required');
                        }

                        //margin
                        if (!editor.field('ProductUpdates.PRICE_TAB_F49').val()) {
                            editor.field('ProductUpdates.PRICE_TAB_F49').error('Required');
                            editor.field('ProductUpdates.PRICE_TAB_F49').show();
                        }

                        //tpr price
                        if (!editor.field('ProductUpdates.promotprprice').val()) {
                            editor.field('ProductUpdates.promotprprice').error('Required');
                        }

                        //tpr start
                        if (!editor.field('ProductUpdates.promotprstartdate').val()) {
                            editor.field('ProductUpdates.promotprstartdate').error('Required');
                        }

                        //tpr end
                        if (!editor.field('ProductUpdates.promotprenddate').val()) {
                            editor.field('ProductUpdates.promotprenddate').error('Required');
                        }

                        // brand
                        if (!editor.field('ProductUpdates.OBJ_TAB_F155').val()) {
                            editor.field('ProductUpdates.OBJ_TAB_F155').error('Required');
                        }

                        //short description
                        if (!editor.field('ProductUpdates.OBJ_TAB_F29').val()) {
                            editor.field('ProductUpdates.OBJ_TAB_F29').error('Required');
                        }

                        //size
                        if (!editor.field('ProductUpdates.OBJ_TAB_F22').val()) {
                            editor.field('ProductUpdates.OBJ_TAB_F22').error('Required');
                        }
                    }

                    // If any error was reported, cancel the submission so it can be corrected
                    if (this.inError()) {
                        return false;
                    }
                }
            });

            // Update An Existing Product Form: clear brand select field
            $(document).on('keydown', '#brandPU', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editor.field('ProductUpdates.OBJ_TAB_F155').val(null);
                }
            });

            // Update An Existing Product Form: clear subdepartment select field
            $(document).on('keydown', '#subdepartmentPU', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editor.field('ProductUpdates.POS_TAB_F04').val(null);
                }
            });

            // Update An Existing Product Form: clear category select field
            $(document).on('keydown', '#categoryPU', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editor.field('ProductUpdates.OBJ_TAB_F17').val(null);
                }
            });

            // Update An Existing Product Form: clear report select field
            $(document).on('keydown', '#reportPU', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editor.field('ProductUpdates.OBJ_TAB_F18').val(null);
                }
            });

            // Update An Existing Product Form: clear family select field
            $(document).on('keydown', '#familyPU', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editor.field('ProductUpdates.OBJ_TAB_F16').val(null);
                }
            });

            // Update An Existing Product Form: clear like code select field
            $(document).on('keydown', '#likecodePU', function (event) {
                if (event.keyCode == 8 || event.keyCode == 46) {
                    editor.field('ProductUpdates.LIKE_TAB_F122').val(null);
                }
            });

            // Update An Existing Product Form: clear like code select field
            $(document).on('click', '#clearLikeCode', function () {
                editor.field('ProductUpdates.LIKE_TAB_F122').val(null);
            });


            /***********************************************************************************************************************/


            // Create the DataTables table
            var table = $('#ProductMaintenance').DataTable({
                //serverSide: true,
                deferRender: true,
                autoWidth: false,
                select: true,
                // Default view showing incomplete requests
                initComplete: function (e, dt, node, config) {
                    table.column(2).search('^1 - Waiting for Manager Review$|^2 - More Info Needed$|^3 - Manager Review Completed$', true, false).draw()
                },
                columnDefs: [{
                    targets: 3,
                    render: function (data, type, row) {
                        if (type === 'display' && data != null) {
                            data = data.replace(/<(?:.|\\n)*?>/gm, '');
                            if (data.length > 14) {
                                return '<span class=\"show-ellipsis\">' + data.substr(0, 14) + '</span><span class=\"no-show\">' + data.substr(14) + '</span>';
                            } else {
                                return data;
                            }
                        } else {
                            return data;
                        }
                    },
                }],
                columnDefs: [
                    { orderable: false, targets: 1 }
                ],
                // Default table lengths
                lengthMenu: [[20, 50, 100, -1], [20, 50, 100, "All"]],
                // Table data source
                ajax: {
                    url: '/api/ProductMaintenance'//,
                    //type: 'POST'
                },
                // Table columns
                columns: [
                    { "data": "RequestTypes.requestname", width: "10%" },
                    {
                        "data": null,
                        className: "center",
                        defaultContent: '<a href="" class="editor_edit"><i class="fa fa-pencil" style="font-size:18px;color:black"></i></a>',
                        width: "2%"
                    },
                    { "data": "Status.productupdatestatus", width: "10%" },
                    { "data": "ProductUpdates.F01", width: "5%" },
                    { "data": "ProductUpdates.OBJ_TAB_F155", width: "10%" },
                    { "data": "ProductUpdates.OBJ_TAB_F29" },
                    { "data": "ProductUpdates.OBJ_TAB_F22", width: "5%" },
                    { "data": "ProductUpdates.createdby", width: "10%" },
                    {
                        "data": "ProductUpdates.datecreated", "render": function (value) {
                            if (value === null) return "";
                            return window.moment(value).format('M/D/YYYY h:mm:ss A');
                        }, width: "10%"
                    },
                    { "data": "ProductUpdates.completeddate", visible: false }
                ],
                // Change New Products request type background green
                rowCallback: function (row, data, index) {
                    if (data.RequestTypes.requestname == "New Product") { $(row).find('td:eq(0)').css('background-color', '#FAC090'); }
                    if (data.RequestTypes.requestname !== "New Product") { $(row).find('td:eq(0)').css('background-color', '#E6EDD7'); }
                },
                // Control button layout
                dom: '<"floatRight"B><"clear">lfrtip',
                // Default table order
                order: [[8, "desc"]],
                buttons: [
                    // New Product Form: opens the New Product form
                    { text: 'New Product', formTitle: 'Add A New Product', extend: 'create', editor: editorNP,
                        formButtons:
                            [
                                { text: 'Cancel', action: function () { this.close(); } },
                                'Create',
                                {
                                    text: 'Submit Another', action: function () {

                                        // Creates lastNewProduct object to store current forms data to be called later
                                        var lastNewProduct = {
                                            'requesttypeID': editorNP.field('ProductUpdates.requesttypeID').val(),
                                            'locationID': editorNP.field('ProductUpdates.locationID').val(),
                                            'ismettlerrequired': editorNP.field('ProductUpdates.ismettlerrequired').val(),
                                            'labelID': editorNP.field('ProductUpdates.labelID').val(),
                                            'COST_TAB_F27': editorNP.field('ProductUpdates.COST_TAB_F27').val(),
                                            'OBJ_TAB_F155': editorNP.field('ProductUpdates.OBJ_TAB_F155').val(),
                                            'OBJ_TAB_F29': editorNP.field('ProductUpdates.OBJ_TAB_F29').val(),
                                            'OBJ_TAB_F22': editorNP.field('ProductUpdates.OBJ_TAB_F22').val(),
                                            'OBJ_TAB_F255': editorNP.field('ProductUpdates.OBJ_TAB_F255').val(),
                                            'POS_TAB_F04': editorNP.field('ProductUpdates.POS_TAB_F04').val(),
                                            'OBJ_TAB_F17': editorNP.field('ProductUpdates.OBJ_TAB_F17').val(),
                                            'OBJ_TAB_F18': editorNP.field('ProductUpdates.OBJ_TAB_F18').val(),
                                            'POS_TAB_F79': editorNP.field('ProductUpdates.POS_TAB_F79').val(),
                                            'POS_TAB_F82': editorNP.field('ProductUpdates.POS_TAB_F82').val(),
                                            'POS_TAB_F81': editorNP.field('ProductUpdates.POS_TAB_F81').val(),
                                            'POS_TAB_F178': editorNP.field('ProductUpdates.POS_TAB_F178').val(),
                                            'AdditionalRequestNotes': editorNP.field('ProductUpdates.AdditionalRequestNotes').val(),
                                            'ScaleItemTypeID': editorNP.field('ProductUpdates.ScaleItemTypeID').val(),
                                            'TareNetWeight': editorNP.field('ProductUpdates.TareNetWeight').val(),
                                            'ShelfLife': editorNP.field('ProductUpdates.ShelfLife').val(),
                                            'IngredientList': editorNP.field('ProductUpdates.IngredientList').val(),
                                            'createdby': editorNP.field('ProductUpdates.createdby').val()
                                        };

                                        // Puts the object into local storage
                                        localStorage.setItem('lastNewProduct', JSON.stringify(lastNewProduct));

                                        // Retrieve the object from storage
                                        lastNPRetrieved = localStorage.getItem('lastNewProduct');

                                        this.submit();
                                        editorNP.create();
                                    }
                                },
                                { text: 'Clear', action: function () { fields = editorNP.displayed(); for (field in fields) { editorNP.field(fields[field]).val(''); }; } },
                                {
                                    text: 'Copy', action: function () {

                                        // Initialize lastProduct variable with object retrieved from storage
                                        var lastNewProduct = JSON.parse(lastNPRetrieved)

                                        // Assign lastProduct values to their respective fields
                                        editorNP.field('ProductUpdates.requesttypeID').val(lastNewProduct.requesttypeID);
                                        editorNP.field('ProductUpdates.locationID').val(lastNewProduct.locationID);
                                        editorNP.field('ProductUpdates.ismettlerrequired').val(lastNewProduct.ismettlerrequired);
                                        editorNP.field('ProductUpdates.labelID').val(lastNewProduct.labelID);
                                        editorNP.field('ProductUpdates.COST_TAB_F27').val(lastNewProduct.COST_TAB_F27);
                                        editorNP.field('ProductUpdates.OBJ_TAB_F155').val(lastNewProduct.OBJ_TAB_F155);
                                        editorNP.field('ProductUpdates.OBJ_TAB_F29').val(lastNewProduct.OBJ_TAB_F29);
                                        editorNP.field('ProductUpdates.OBJ_TAB_F22').val(lastNewProduct.OBJ_TAB_F22);
                                        editorNP.field('ProductUpdates.OBJ_TAB_F255').val(lastNewProduct.OBJ_TAB_F255);
                                        editorNP.field('ProductUpdates.POS_TAB_F04').val(lastNewProduct.POS_TAB_F04);
                                        editorNP.field('ProductUpdates.OBJ_TAB_F17').val(lastNewProduct.OBJ_TAB_F17);
                                        editorNP.field('ProductUpdates.OBJ_TAB_F18').val(lastNewProduct.OBJ_TAB_F18);
                                        editorNP.field('ProductUpdates.POS_TAB_F79').val(lastNewProduct.POS_TAB_F79);
                                        editorNP.field('ProductUpdates.POS_TAB_F82').val(lastNewProduct.POS_TAB_F82);
                                        editorNP.field('ProductUpdates.POS_TAB_F81').val(lastNewProduct.POS_TAB_F81);
                                        editorNP.field('ProductUpdates.POS_TAB_F178').val(lastNewProduct.POS_TAB_F178);
                                        editorNP.field('ProductUpdates.AdditionalRequestNotes').val(lastNewProduct.AdditionalRequestNotes);
                                        editorNP.field('ProductUpdates.ScaleItemTypeID').val(lastNewProduct.ScaleItemTypeID);
                                        editorNP.field('ProductUpdates.TareNetWeight').val(lastNewProduct.TareNetWeight);
                                        editorNP.field('ProductUpdates.ShelfLife').val(lastNewProduct.ShelfLife);
                                        editorNP.field('ProductUpdates.IngredientList').val(lastNewProduct.IngredientList);
                                        editorNP.field('ProductUpdates.createdby').val(lastNewProduct.createdby);
                                        editorNP.field('ProductUpdates.datecreated').val(getDate());
                                    }
                                }
                            ]
                    },
                    // Update An Existing Product Form: opens the Update an Existing Product Form
                    { text: 'Update Product', formTitle: 'Update An Existing Product', extend: 'create', editor: editor,
                        formButtons:
                            [
                                { text: 'Cancel', action: function () { this.close(); } },
                                'Create',
                                {
                                    text: 'Submit Another', action: function () {

                                        // Creates lastProduct object to store current forms data to be called later
                                        var lastProductUpdate = {
                                            'requesttypeID': editor.field('ProductUpdates.requesttypeID').val(),
                                            'locationID': editor.field('ProductUpdates.locationID').val(),
                                            'ismettlerrequired': editor.field('ProductUpdates.ismettlerrequired').val(),
                                            'labelID': editor.field('ProductUpdates.labelID').val(),
                                            'COST_TAB_F27': editor.field('ProductUpdates.COST_TAB_F27').val(),
                                            'promotprprice': editor.field('ProductUpdates.promotprprice').val(),
                                            'promotprstartdate': editor.field('ProductUpdates.promotprstartdate').val(),
                                            'promotprenddate': editor.field('ProductUpdates.promotprenddate').val(),
                                            'signID': editor.field('ProductUpdates.signID').val(),
                                            'OBJ_TAB_F155': editor.field('ProductUpdates.OBJ_TAB_F155').val(),
                                            'OBJ_TAB_F29': editor.field('ProductUpdates.OBJ_TAB_F29').val(),
                                            'OBJ_TAB_F22': editor.field('ProductUpdates.OBJ_TAB_F22').val(),
                                            'OBJ_TAB_F255': editor.field('ProductUpdates.OBJ_TAB_F255').val(),
                                            'POS_TAB_F04': editor.field('ProductUpdates.POS_TAB_F04').val(),
                                            'OBJ_TAB_F17': editor.field('ProductUpdates.OBJ_TAB_F17').val(),
                                            'OBJ_TAB_F18': editor.field('ProductUpdates.OBJ_TAB_F18').val(),
                                            'POS_TAB_F79': editor.field('ProductUpdates.POS_TAB_F79').val(),
                                            'POS_TAB_F82': editor.field('ProductUpdates.POS_TAB_F82').val(),
                                            'POS_TAB_F81': editor.field('ProductUpdates.POS_TAB_F81').val(),
                                            'POS_TAB_F178': editor.field('ProductUpdates.POS_TAB_F178').val(),
                                            'AdditionalRequestNotes': editor.field('ProductUpdates.AdditionalRequestNotes').val(),
                                            'ScaleItemTypeID': editor.field('ProductUpdates.ScaleItemTypeID').val(),
                                            'TareNetWeight': editor.field('ProductUpdates.TareNetWeight').val(),
                                            'ShelfLife': editor.field('ProductUpdates.ShelfLife').val(),
                                            'IngredientList': editor.field('ProductUpdates.IngredientList').val(),
                                            'createdby': editor.field('ProductUpdates.createdby').val()
                                        };

                                        // Puts the object into local storage
                                        localStorage.setItem('lastProductUpdate', JSON.stringify(lastProductUpdate));

                                        // Retrieve the object from storage
                                        lastPURetrieved = localStorage.getItem('lastProductUpdate');

                                        this.submit();
                                        editor.create();
                                    }
                                },
                                { text: 'Clear', action: function () { fields = editor.displayed(); for (field in fields) { editor.field(fields[field]).val(''); }; } },
                                {
                                    text: 'Copy', action: function () {

                                        // Initialize lastProduct variable with object retrieved from storage
                                        var lastProductUpdate = JSON.parse(lastPURetrieved)

                                        // Assign lastProductUpdate values to their respective fields
                                        editor.field('ProductUpdates.requesttypeID').val(lastProductUpdate.requesttypeID);
                                        editor.field('ProductUpdates.locationID').val(lastProductUpdate.locationID);
                                        editor.field('ProductUpdates.ismettlerrequired').val(lastProductUpdate.ismettlerrequired);
                                        editor.field('ProductUpdates.labelID').val(lastProductUpdate.labelID);
                                        editor.field('ProductUpdates.COST_TAB_F27').val(lastProductUpdate.COST_TAB_F27);
                                        editor.field('ProductUpdates.promotprprice').val(lastProductUpdate.promotprprice);
                                        editor.field('ProductUpdates.promotprstartdate').val(lastProductUpdate.promotprstartdate);
                                        editor.field('ProductUpdates.promotprenddate').val(lastProductUpdate.promotprenddate);
                                        editor.field('ProductUpdates.signID').val(lastProductUpdate.signID);
                                        editor.field('ProductUpdates.OBJ_TAB_F155').val(lastProductUpdate.OBJ_TAB_F155);
                                        editor.field('ProductUpdates.OBJ_TAB_F29').val(lastProductUpdate.OBJ_TAB_F29);
                                        editor.field('ProductUpdates.OBJ_TAB_F22').val(lastProductUpdate.OBJ_TAB_F22);
                                        editor.field('ProductUpdates.OBJ_TAB_F255').val(lastProductUpdate.OBJ_TAB_F255);
                                        editor.field('ProductUpdates.POS_TAB_F04').val(lastProductUpdate.POS_TAB_F04);
                                        editor.field('ProductUpdates.OBJ_TAB_F17').val(lastProductUpdate.OBJ_TAB_F17);
                                        editor.field('ProductUpdates.OBJ_TAB_F18').val(lastProductUpdate.OBJ_TAB_F18);
                                        editor.field('ProductUpdates.POS_TAB_F79').val(lastProductUpdate.POS_TAB_F79);
                                        editor.field('ProductUpdates.POS_TAB_F82').val(lastProductUpdate.POS_TAB_F82);
                                        editor.field('ProductUpdates.POS_TAB_F81').val(lastProductUpdate.POS_TAB_F81);
                                        editor.field('ProductUpdates.POS_TAB_F178').val(lastProductUpdate.POS_TAB_F178);
                                        editor.field('ProductUpdates.AdditionalRequestNotes').val(lastProductUpdate.AdditionalRequestNotes);
                                        editor.field('ProductUpdates.ScaleItemTypeID').val(lastProductUpdate.ScaleItemTypeID);
                                        editor.field('ProductUpdates.TareNetWeight').val(lastProductUpdate.TareNetWeight);
                                        editor.field('ProductUpdates.ShelfLife').val(lastProductUpdate.ShelfLife);
                                        editor.field('ProductUpdates.IngredientList').val(lastProductUpdate.IngredientList);
                                        editor.field('ProductUpdates.createdby').val(lastProductUpdate.createdby);
                                        editor.field('ProductUpdates.datecreated').val(getDate());
                                    }
                                }
                            ]
                    },
                    {
                        // Show completed today filter button
                        text: 'Show Completed Today', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .columns().order('')
                                .column(2).search('^4 - Completed$')
                                .column(9).search(new Date().getMonth() + 1 + "/" + new Date().getDate() + "/" + new Date().getFullYear(), true, false).column(8).order('desc').draw()
                        }
                    },
                    {
                        // Show default view filter button
                        text: 'Show Default View', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .columns().order('')
                                .page.len(20)
                                .column(2).search('^1 - Waiting for Manager Review$|^2 - More Info Needed$|^3 - Manager Review Completed$', true, false).column(8).order('desc').draw()
                        }
                    },
                    {
                        // Show all records filter button
                        text: 'Show All', action: function (e, dt, node, config) {
                            table.search('')
                                .columns().search('')
                                .columns().order('')
                                .column(2).search('^1 - Waiting for Manager Review$|^2 - More Info Needed$|^3 - Manager Review Completed$|^4 - Completed$', true, false).column(8).order('desc').draw()
                        }
                    },

                    // Redirects user to New Products page
                    { text: 'Manage New Products (Export)', attr: { id: 'ManageNewProducts' }, action: function () { window.location = 'NewProducts' } },

                    // Redirects user to Product Updates page
                    { text: 'Manage Update Requests', action: function () { window.location = 'ProductUpdates' } }
                ]
            });

            // Product Maintenance: adds edit pencil in each cell
            $('#ProductMaintenance').on('click', 'a.editor_edit', function (e) {
                e.preventDefault();

                editor.edit($(this).closest('tr'), {
                    title: 'Edit entry',
                    buttons:
                        [
                            {
                                text: 'Update', action: function () {
                                    editor.field('ProductUpdates.lastupdatedon').val(getDate());
                                    editor.field('ProductUpdates.lastupdatedby').val(currentUser);
                                    this.submit();
                                }
                            }
                        ]
                });
            });

            // Product Maintenance: disable Manage New Products (Export) button unless current user has manager or admin status
            if (!(role >= 4)) {
                table.button('#ManageNewProducts').disable();
            }

            // Reload table once a minute.
            setInterval(function () {
                table.ajax.reload();
            }, 60000);

        });
    </script>
}